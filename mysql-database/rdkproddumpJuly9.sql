-- MySQL dump 10.13  Distrib 5.1.54, for pc-linux-gnu (i686)
--
-- Host: localhost    Database: rdktesttoolm3testdb
-- ------------------------------------------------------
-- Server version	5.1.54-community

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `box_manufacturer`
--

DROP TABLE IF EXISTS `box_manufacturer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box_manufacturer` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box_manufacturer`
--

LOCK TABLES `box_manufacturer` WRITE;
/*!40000 ALTER TABLE `box_manufacturer` DISABLE KEYS */;
INSERT INTO `box_manufacturer` VALUES (1,0,'Arris'),(2,0,'Broadcom'),(3,0,'Cisco'),(4,0,'Entropic'),(5,0,'Humax'),(6,0,'Intel'),(7,0,'Motorola'),(8,0,'Pace'),(9,0,'Samsung'),(10,0,'Technicolor');
/*!40000 ALTER TABLE `box_manufacturer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `box_model`
--

DROP TABLE IF EXISTS `box_model`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box_model` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box_model`
--

LOCK TABLES `box_model` WRITE;
/*!40000 ALTER TABLE `box_model` DISABLE KEYS */;
/*!40000 ALTER TABLE `box_model` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `box_type`
--

DROP TABLE IF EXISTS `box_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box_type` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `type` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box_type`
--

LOCK TABLES `box_type` WRITE;
/*!40000 ALTER TABLE `box_type` DISABLE KEYS */;
INSERT INTO `box_type` VALUES (1,0,'Xi3','Client'),(2,0,'XG1','Gateway'),(3,0,'XG5','Gateway');
/*!40000 ALTER TABLE `box_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `configuration`
--

DROP TABLE IF EXISTS `configuration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `configuration` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `box_model_id` bigint(20) NOT NULL,
  `box_type_id` bigint(20) NOT NULL,
  `stb_ip` longtext NOT NULL,
  `stb_name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK733374F641CE91C` (`box_type_id`),
  KEY `FK733374F6827DEFB8` (`box_model_id`),
  CONSTRAINT `FK733374F641CE91C` FOREIGN KEY (`box_type_id`) REFERENCES `box_type` (`id`),
  CONSTRAINT `FK733374F6827DEFB8` FOREIGN KEY (`box_model_id`) REFERENCES `box_model` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `configuration`
--

LOCK TABLES `configuration` WRITE;
/*!40000 ALTER TABLE `configuration` DISABLE KEYS */;
/*!40000 ALTER TABLE `configuration` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `device`
--

DROP TABLE IF EXISTS `device`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `box_manufacturer_id` bigint(20) NOT NULL,
  `box_type_id` bigint(20) NOT NULL,
  `device_status` varchar(255) NOT NULL,
  `socvendor_id` bigint(20) NOT NULL,
  `stb_ip` varchar(255) NOT NULL,
  `stb_name` varchar(255) NOT NULL,
  `stb_port` varchar(255) NOT NULL,
  `gateway_ip` varchar(255) DEFAULT NULL,
  `recorder_id` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `stb_ip` (`stb_ip`),
  UNIQUE KEY `stb_name` (`stb_name`),
  KEY `FKB06B1E56D70E4BBC` (`box_manufacturer_id`),
  KEY `FKB06B1E5641CE91C` (`box_type_id`),
  KEY `FKB06B1E565DC65445` (`socvendor_id`),
  CONSTRAINT `FKB06B1E5641CE91C` FOREIGN KEY (`box_type_id`) REFERENCES `box_type` (`id`),
  CONSTRAINT `FKB06B1E565DC65445` FOREIGN KEY (`socvendor_id`) REFERENCES `socvendor` (`id`),
  CONSTRAINT `FKB06B1E56D70E4BBC` FOREIGN KEY (`box_manufacturer_id`) REFERENCES `box_manufacturer` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `device`
--

LOCK TABLES `device` WRITE;
/*!40000 ALTER TABLE `device` DISABLE KEYS */;
INSERT INTO `device` VALUES (1,3,6,2,'FREE',4,'192.168.160.166','TVM_Test_Machine','8087','','T0100190784'),(2,0,6,1,'FREE',5,'192.168.161.222','TVM_Xi3','8087','192.168.160.166',NULL),(3,269,2,1,'ALLOCATED',5,'192.168.27.157','Chennai_Xi3','8087',NULL,NULL),(4,383,2,1,'FREE',5,'192.168.30.62','Bangalore_Xi3','8087','192.168.30.162',''),(5,97,2,1,'FREE',5,'192.168.160.241','TVM_Xi3_241','8087','192.168.160.130',''),(6,47,6,2,'FREE',4,'192.168.30.162','Bangalore_XG1','8087','','T0100190784'),(8,1,1,2,'FREE',5,'192.168.30.61','Bgr-XG1','8087','',NULL),(10,0,8,2,'FREE',4,'192.168.160.130','TVM_XG1','8087',NULL,'T0100193952');
/*!40000 ALTER TABLE `device` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `device_group`
--

DROP TABLE IF EXISTS `device_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device_group` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `device_group`
--

LOCK TABLES `device_group` WRITE;
/*!40000 ALTER TABLE `device_group` DISABLE KEYS */;
INSERT INTO `device_group` VALUES (1,29,'XG1',NULL),(2,17,'Xi3',NULL);
/*!40000 ALTER TABLE `device_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `device_group_device`
--

DROP TABLE IF EXISTS `device_group_device`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device_group_device` (
  `device_group_devices_id` bigint(20) DEFAULT NULL,
  `device_id` bigint(20) DEFAULT NULL,
  KEY `FKD0056F5FBC11ECEF` (`device_id`),
  KEY `FKD0056F5FE4F3C3A` (`device_group_devices_id`),
  CONSTRAINT `FKD0056F5FBC11ECEF` FOREIGN KEY (`device_id`) REFERENCES `device` (`id`),
  CONSTRAINT `FKD0056F5FE4F3C3A` FOREIGN KEY (`device_group_devices_id`) REFERENCES `device_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `device_group_device`
--

LOCK TABLES `device_group_device` WRITE;
/*!40000 ALTER TABLE `device_group_device` DISABLE KEYS */;
INSERT INTO `device_group_device` VALUES (2,2),(2,3),(1,1),(1,8),(2,4),(2,5),(1,10),(1,6);
/*!40000 ALTER TABLE `device_group_device` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `device_stream`
--

DROP TABLE IF EXISTS `device_stream`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device_stream` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `device_id` bigint(20) NOT NULL,
  `ocap_id` varchar(255) NOT NULL,
  `stream_id` bigint(20) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FKC66181895BBC466F` (`stream_id`),
  KEY `FKC6618189BC11ECEF` (`device_id`),
  CONSTRAINT `FKC6618189BC11ECEF` FOREIGN KEY (`device_id`) REFERENCES `device` (`id`),
  CONSTRAINT `FKC66181895BBC466F` FOREIGN KEY (`stream_id`) REFERENCES `streaming_details` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=97 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `device_stream`
--

LOCK TABLES `device_stream` WRITE;
/*!40000 ALTER TABLE `device_stream` DISABLE KEYS */;
INSERT INTO `device_stream` VALUES (37,1,1,'0x1265',4),(38,1,1,'0x1022',5),(39,1,1,'0x1268',6),(40,1,1,'0x21fb',7),(41,1,1,'NA',8),(42,1,1,'0x2500',9),(43,1,1,'0x1269',10),(44,1,1,'0x1265',11),(45,1,1,'0x2897',12),(46,1,1,'0x2f13',13),(47,1,1,'0x2f58',14),(48,1,1,'0x1ca3',15),(49,1,6,'0x1265',4),(50,2,6,'0x1269',5),(51,2,6,'0x126c',6),(52,2,6,'0x2670',7),(53,1,6,'NA',8),(54,1,6,'0x2500',9),(55,1,6,'0x1269',10),(56,1,6,'0x1265',11),(57,2,6,'0x2897',12),(58,2,6,'0x2f13',13),(59,2,6,'0x2f58',14),(60,2,6,'0x1ca3',15),(61,0,8,'0x1265',4),(62,0,8,'0x126c',5),(63,0,8,'0x1269',6),(64,0,8,'0x2670',7),(65,0,8,'0x1022',8),(66,0,8,'0x2500',9),(67,0,8,'0x1ca3',10),(68,0,8,'0x126a',11),(69,0,8,'0x1040',12),(70,0,8,'0x21fb',13),(71,0,8,'0x2f13',14),(72,0,8,'0x3ef4',15),(85,0,10,'1',4),(86,0,10,'2',5),(87,0,10,'3',6),(88,0,10,'4',7),(89,0,10,'5',8),(90,0,10,'6',9),(91,0,10,'7',10),(92,0,10,'8',11),(93,0,10,'0x126a',12),(94,0,10,'0x1022',13),(95,0,10,'0x1268',14),(96,0,10,'9',15);
/*!40000 ALTER TABLE `device_stream` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `execution`
--

DROP TABLE IF EXISTS `execution`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `execution` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `date_of_execution` varchar(255) NOT NULL,
  `device_id` bigint(20) NOT NULL,
  `device_group_id` bigint(20) DEFAULT NULL,
  `end_time` datetime DEFAULT NULL,
  `name` varchar(255) NOT NULL,
  `output_data` longtext,
  `result` varchar(255) DEFAULT NULL,
  `script_id` bigint(20) NOT NULL,
  `script_group_id` bigint(20) DEFAULT NULL,
  `start_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKBEF90B18E2F1DCCF` (`script_id`),
  KEY `FKBEF90B18BC11ECEF` (`device_id`),
  KEY `FKBEF90B18E9F2698` (`device_group_id`),
  KEY `FKBEF90B18FDA8F66E` (`script_group_id`),
  CONSTRAINT `FKBEF90B18FDA8F66E` FOREIGN KEY (`script_group_id`) REFERENCES `script_group` (`id`),
  CONSTRAINT `FKBEF90B18BC11ECEF` FOREIGN KEY (`device_id`) REFERENCES `device` (`id`),
  CONSTRAINT `FKBEF90B18E2F1DCCF` FOREIGN KEY (`script_id`) REFERENCES `script` (`id`),
  CONSTRAINT `FKBEF90B18E9F2698` FOREIGN KEY (`device_group_id`) REFERENCES `device_group` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=362 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `execution`
--

LOCK TABLES `execution` WRITE;
/*!40000 ALTER TABLE `execution` DISABLE KEYS */;
INSERT INTO `execution` VALUES (1,1,'2013/07/04 18:08:03',5,NULL,NULL,'TVM_Xi3_241-20130704180752','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[RESULT]!<br/>{\"id\":\"2\",\"result\":\"Load Module Success\\n\"}<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>[RESULT] {\"details\":\"INVALID_PARAM\",\"result\":\"FAILURE\"}<br/> <br/>Result Got : {\"details\":\"INVALID_PARAM\",\"result\":\"FAILURE\"}<br/><br/>[Result WS ] http://192.168.161.200:8080/rdk-testtool-m3/execution/saveResultDetails?execId=1&resultData={\"details\":\"INVALID_PARAM\",\"result\":\"FAILURE\"}<br/><br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>[RESULT] {\"details\":\"INVALID_STATE\",\"result\":\"FAILURE\"}<br/> <br/>Result Got : {\"details\":\"INVALID_STATE\",\"result\":\"FAILURE\"}<br/><br/>[Result WS ] http://192.168.161.200:8080/rdk-testtool-m3/execution/saveResultDetails?execId=1&resultData={\"details\":\"INVALID_STATE\",\"result\":\"FAILURE\"}<br/><br/>result : FAILURE<br/>details : INVALID_STATE<br/>FAILURE: IARM_Bus_Connect failed with INVALID_STATE<br/>[TEST EXECUTION RESULT] : FAILURE<br/>Unload module Success<br/><br/>','FAILURE',79,NULL,NULL),(2,1,'2013/07/04 18:08:46',5,NULL,NULL,'TVM_Xi3_241-20130704180837','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[RESULT]!<br/>{\"id\":\"2\",\"result\":\"Load Module Success\\n\"}<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>[RESULT] {\"details\":\"INVALID_PARAM\",\"result\":\"FAILURE\"}<br/> <br/>Result Got : {\"details\":\"INVALID_PARAM\",\"result\":\"FAILURE\"}<br/><br/>[Result WS ] http://192.168.161.200:8080/rdk-testtool-m3/execution/saveResultDetails?execId=2&resultData={\"details\":\"INVALID_PARAM\",\"result\":\"FAILURE\"}<br/><br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>[RESULT] {\"details\":\"INVALID_STATE\",\"result\":\"FAILURE\"}<br/> <br/>Result Got : {\"details\":\"INVALID_STATE\",\"result\":\"FAILURE\"}<br/><br/>[Result WS ] http://192.168.161.200:8080/rdk-testtool-m3/execution/saveResultDetails?execId=2&resultData={\"details\":\"INVALID_STATE\",\"result\":\"FAILURE\"}<br/><br/>result : FAILURE<br/>details : INVALID_STATE<br/>FAILURE: IARM_Bus_Connect failed with INVALID_STATE<br/>[TEST EXECUTION RESULT] : FAILURE<br/>Unload module Success<br/><br/>','FAILURE',79,NULL,NULL),(3,1,'2013/07/04 18:23:37',3,NULL,NULL,'Chennai_Xi3-20130704182312','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[RESULT]!<br/>{\"id\":\"2\",\"result\":\"Load Module Success\\n\"}<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>[RESULT] {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/> <br/>Result Got : {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>[Result WS ] http://192.168.161.200:8080/rdk-testtool-m3/execution/saveResultDetails?execId=3&resultData={\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>[RESULT] {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/> <br/>Result Got : {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>[Result WS ] http://192.168.161.200:8080/rdk-testtool-m3/execution/saveResultDetails?execId=3&resultData={\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>[RESULT] {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/> <br/>Result Got : {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>[Result WS ] http://192.168.161.200:8080/rdk-testtool-m3/execution/saveResultDetails?execId=3&resultData={\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application registeres RPC<br/>Executing IARMBUS_RequestResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_RequestResource\"}<br/>[RESULT] {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/> <br/>Result Got : {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>[Result WS ] http://192.168.161.200:8080/rdk-testtool-m3/execution/saveResultDetails?execId=3&resultData={\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Requested decoder-0 resource is allocated successfully for the application<br/>Executing IARMBUS_ReleaseResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_ReleaseResource\"}<br/>[RESULT] {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/> <br/>Result Got : {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>[Result WS ] http://192.168.161.200:8080/rdk-testtool-m3/execution/saveResultDetails?execId=3&resultData={\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Allocated  resource is successfully released<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>[RESULT] {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/> <br/>Result Got : {\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>[Result WS ] http://192.168.161.200:8080/rdk-testtool-m3/execution/saveResultDetails?execId=3&resultData={\"details\":\"NULL\",\"result\":\"SUCCESS\"}<br/><br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',72,NULL,NULL),(4,1,'2013/07/04 18:25:21',3,NULL,NULL,'Chennai_Xi3-20130704182513','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application registeres RPC<br/>Executing IARMBUS_RequestResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_RequestResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Requested decoder-0 resource is allocated successfully for the application<br/>Executing IARMBUS_ReleaseResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_ReleaseResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Allocated  resource is successfully released<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',72,NULL,NULL),(5,2,'2013/07/04 18:25:37',3,NULL,NULL,'Chennai_Xi3-20130704182531','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Appplication register RPC<br/>Executing IARMBUS_RequestResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 2, \"method\": \"TestMgr_IARMBUS_RequestResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Requested deocder-1 resource is allocated successfully for the application<br/>Executing IARMBUS_ReleaseResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 2, \"method\": \"TestMgr_IARMBUS_ReleaseResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Allocated  decoder-1 resource is successfully released<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',73,NULL,NULL),(6,0,'2013/07/04 18:25:49',3,NULL,NULL,'Chennai_Xi3-20130704182540','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing devicesettings<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing DS_sample....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_DS_Sample\"}<br/>result : <br/>[TEST EXECUTION RESULT] : <br/>Unload module Success<br/><br/>',NULL,153,NULL,NULL),(7,1,'2013/07/04 18:48:53',3,NULL,NULL,'Chennai_Xi3-20130704184826','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application registeres RPC<br/>Executing IARMBUS_RequestResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_RequestResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Requested decoder-0 resource is allocated successfully for the application<br/>Executing IARMBUS_ReleaseResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_ReleaseResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Allocated  resource is successfully released<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',72,NULL,NULL),(8,0,'2013/07/04 18:49:03',3,NULL,NULL,'Chennai_Xi3-20130704184826','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing devicesettings<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing DS_sample....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_DS_Sample\"}<br/>result : :{<br/>[TEST EXECUTION RESULT] : :{<br/>Unload module Success<br/><br/>',NULL,153,NULL,NULL),(9,0,'2013/07/04 19:03:28',3,NULL,NULL,'Chennai_Xi3-20130704190315','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372944808184.py\", line 14, in <module><br/>    tdkTestObj.addParameter(\"indicator_name\",\"Power\");<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 112, in addParameter<br/>    data = json.loads(self.jsonMsgValue)	<br/>  File \"/usr/local/lib/python2.7/json/__init__.py\", line 338, in loads<br/>    return _default_decoder.decode(s)<br/>  File \"/usr/local/lib/python2.7/json/decoder.py\", line 365, in decode<br/>    obj, end = self.raw_decode(s, idx=_w(s, 0).end())<br/>  File \"/usr/local/lib/python2.7/json/decoder.py\", line 383, in raw_decode<br/>    raise ValueError(\"No JSON object could be decoded\")<br/>ValueError: No JSON object could be decoded<br/>',NULL,153,NULL,NULL),(10,1,'2013/07/04 19:03:58',3,NULL,NULL,'Chennai_Xi3-20130704190352','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application registeres RPC<br/>Executing IARMBUS_RequestResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_RequestResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Requested decoder-0 resource is allocated successfully for the application<br/>Executing IARMBUS_ReleaseResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_ReleaseResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Allocated  resource is successfully released<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',72,NULL,NULL),(11,1,'2013/07/04 19:04:03',3,NULL,NULL,'Chennai_Xi3-20130704190352','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application registeres RPC<br/>Executing IARMBUS_RequestResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_RequestResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Requested decoder-0 resource is allocated successfully for the application<br/>Executing IARMBUS_ReleaseResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_ReleaseResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Allocated  resource is successfully released<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',72,NULL,NULL),(12,1,'2013/07/04 19:04:12',3,NULL,NULL,'Chennai_Xi3-20130704190352','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Appplication register RPC<br/>Executing IARMBUS_RequestResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 2, \"method\": \"TestMgr_IARMBUS_RequestResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Requested deocder-1 resource is allocated successfully for the application<br/>Executing IARMBUS_ReleaseResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 2, \"method\": \"TestMgr_IARMBUS_ReleaseResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Allocated  decoder-1 resource is successfully released<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',73,NULL,NULL),(13,1,'2013/07/04 19:04:37',3,NULL,NULL,'Chennai_Xi3-20130704190352','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Appplication register RPC<br/>Executing IARMBUS_RequestResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 3, \"method\": \"TestMgr_IARMBUS_RequestResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Requested graphics plane-0 resource is allocated successfully for the application<br/>Executing IARMBUS_ReleaseResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 3, \"method\": \"TestMgr_IARMBUS_ReleaseResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Allocated  graphics plane-0 resource is successfully released<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',74,NULL,NULL),(14,0,'2013/07/04 19:05:02',3,NULL,NULL,'Chennai_Xi3-20130704190352','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372944902820.py\", line 14, in <module><br/>    tdkTestObj.addParameter(\"indicator_name\",\"Power\");<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 112, in addParameter<br/>    data = json.loads(self.jsonMsgValue)	<br/>  File \"/usr/local/lib/python2.7/json/__init__.py\", line 338, in loads<br/>    return _default_decoder.decode(s)<br/>  File \"/usr/local/lib/python2.7/json/decoder.py\", line 365, in decode<br/>    obj, end = self.raw_decode(s, idx=_w(s, 0).end())<br/>  File \"/usr/local/lib/python2.7/json/decoder.py\", line 383, in raw_decode<br/>    raise ValueError(\"No JSON object could be decoded\")<br/>ValueError: No JSON object could be decoded<br/>',NULL,153,NULL,NULL),(15,0,'2013/07/04 19:06:03',3,NULL,NULL,'Chennai_Xi3-20130704190555','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372944963261.py\", line 20, in <module><br/>    print \"FAILURE:\" %details;<br/>TypeError: not all arguments converted during string formatting<br/>',NULL,153,NULL,NULL),(16,0,'2013/07/04 19:08:07',3,NULL,NULL,'Chennai_Xi3-20130704190755','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing devicesettings<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing DS_setColor....<br/><br/><!DOCTYPE html><br/><html><br/><head><br/><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><br/><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><br/><title>RDK Test Suite</title><br/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><br/><br/><link rel=\"apple-touch-icon\"<br/>	href=\"/rdk-testtool-m3/images/apple-touch-icon.png\"><br/><link rel=\"apple-touch-icon\" sizes=\"114x114\"<br/>	href=\"/rdk-testtool-m3/images/apple-touch-icon-retina.png\"><br/><link rel=\"stylesheet\" href=\"/rdk-testtool-m3/css/main.css\"<br/>	type=\"text/css\"><br/><link rel=\"stylesheet\"<br/>	href=\"/rdk-testtool-m3/css/mobile.css\" type=\"text/css\"><br/><link rel=\"stylesheet\" href=\"/rdk-testtool-m3/css/basic.css\"<br/>	type=\"text/css\" /><br/><br/><script src=\"/rdk-testtool-m3/js/jquery-1.6.1.min.js\" type=\"text/javascript\"></script><br/><br/><script src=\"/rdk-testtool-m3/js/jquery.simplemodal.js\" type=\"text/javascript\"></script><br/><br/><br/><br/>		<br/>		<meta name=\"layout\" content=\"main\"><br/>		<br/>	<br/><br/></head><br/><body><br/>	<div id=\"grailsLogo\" role=\"banner\"><br/>		<img src=\"/rdk-testtool-m3/images/comcast_logo_red.png\"<br/>			alt=\"Grails\" /><br/>	</div><br/>	<div<br/>		style=\"width: 100%; min-width: 100%; text-align: right; border-bottom: 3px solid #CCCCCC; border-bottom-color: #C11B17\"><br/>		<br/>			<a href=\"/rdk-testtool-m3/auth/login\" class=\"customizedLink\">Admin Sign In</a><br/>		<br/>	</div><br/>	<hr><br/>	<table id=\"maintable\"><br/>		<tr><br/>			<td nowrap=\"nowrap\"<br/>				style=\"position: absolute; min-width: 500px; height: 20px; width: 947px; background-color: #C8BBBE; border-bottom-color: #C11B17\"><br/>				<div id=\"header\" align=\"left\"><br/>					<ul><br/>						<li><a href=\"/rdk-testtool-m3/primitiveTest/create\" onclick=\"selectPrim();\"><br/>								<span><p id=\"primid\">Primitive Test</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/scriptGroup/list\"><br/>								<span><p id=\"scriptid\">Scripting</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/deviceGroup/list\"><br/>								<span><p id=\"deviceid\">Devices</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/execution/create\"><br/>								<span><p id=\"execid\">Execution</p></span><br/>							</a></li><br/>						<br/>					</ul><br/>				</div><br/>			</td><br/>		</tr><br/>	</table><br/>	<br><br/>	<br/>		<br/>			<ul class=\"errors\"><br/>				<li>An error has occurred</li><br/>			</ul><br/>		<br/>	<br/>	<br><br/>	<div class=\"footer\" role=\"contentinfo\"></div><br/>	<div id=\"spinner\" class=\"spinner\" style=\"display: none;\"><br/>		Loading&hellip;<br/>	</div><br/>	<br/>	<br/>	<br/></body><br/></html><br/><br/>result : :{<br/>details : {<br/>FAILURE:<br/>[TEST EXECUTION RESULT] : :{<br/>Unload module Success<br/><br/>',NULL,153,NULL,NULL),(17,0,'2013/07/04 19:10:00',3,NULL,NULL,'Chennai_Xi3-20130704190755','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372945200862.py\", line 15, in <module><br/>    tdkTestObj.addParameter(\"indicator_name\",\"Power\");<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 112, in addParameter<br/>    data = json.loads(self.jsonMsgValue)	<br/>  File \"/usr/local/lib/python2.7/json/__init__.py\", line 338, in loads<br/>    return _default_decoder.decode(s)<br/>  File \"/usr/local/lib/python2.7/json/decoder.py\", line 365, in decode<br/>    obj, end = self.raw_decode(s, idx=_w(s, 0).end())<br/>  File \"/usr/local/lib/python2.7/json/decoder.py\", line 383, in raw_decode<br/>    raise ValueError(\"No JSON object could be decoded\")<br/>ValueError: No JSON object could be decoded<br/>',NULL,153,NULL,NULL),(18,0,'2013/07/04 19:10:51',3,NULL,NULL,'Chennai_Xi3-20130704190755','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing devicesettings<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>1<br/>2<br/>Executing DS_setColor....<br/><br/><!DOCTYPE html><br/><html><br/><head><br/><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><br/><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><br/><title>RDK Test Suite</title><br/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><br/><br/><link rel=\"apple-touch-icon\"<br/>	href=\"/rdk-testtool-m3/images/apple-touch-icon.png\"><br/><link rel=\"apple-touch-icon\" sizes=\"114x114\"<br/>	href=\"/rdk-testtool-m3/images/apple-touch-icon-retina.png\"><br/><link rel=\"stylesheet\" href=\"/rdk-testtool-m3/css/main.css\"<br/>	type=\"text/css\"><br/><link rel=\"stylesheet\"<br/>	href=\"/rdk-testtool-m3/css/mobile.css\" type=\"text/css\"><br/><link rel=\"stylesheet\" href=\"/rdk-testtool-m3/css/basic.css\"<br/>	type=\"text/css\" /><br/><br/><script src=\"/rdk-testtool-m3/js/jquery-1.6.1.min.js\" type=\"text/javascript\"></script><br/><br/><script src=\"/rdk-testtool-m3/js/jquery.simplemodal.js\" type=\"text/javascript\"></script><br/><br/><br/><br/>		<br/>		<meta name=\"layout\" content=\"main\"><br/>		<br/>	<br/><br/></head><br/><body><br/>	<div id=\"grailsLogo\" role=\"banner\"><br/>		<img src=\"/rdk-testtool-m3/images/comcast_logo_red.png\"<br/>			alt=\"Grails\" /><br/>	</div><br/>	<div<br/>		style=\"width: 100%; min-width: 100%; text-align: right; border-bottom: 3px solid #CCCCCC; border-bottom-color: #C11B17\"><br/>		<br/>			<a href=\"/rdk-testtool-m3/auth/login\" class=\"customizedLink\">Admin Sign In</a><br/>		<br/>	</div><br/>	<hr><br/>	<table id=\"maintable\"><br/>		<tr><br/>			<td nowrap=\"nowrap\"<br/>				style=\"position: absolute; min-width: 500px; height: 20px; width: 947px; background-color: #C8BBBE; border-bottom-color: #C11B17\"><br/>				<div id=\"header\" align=\"left\"><br/>					<ul><br/>						<li><a href=\"/rdk-testtool-m3/primitiveTest/create\" onclick=\"selectPrim();\"><br/>								<span><p id=\"primid\">Primitive Test</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/scriptGroup/list\"><br/>								<span><p id=\"scriptid\">Scripting</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/deviceGroup/list\"><br/>								<span><p id=\"deviceid\">Devices</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/execution/create\"><br/>								<span><p id=\"execid\">Execution</p></span><br/>							</a></li><br/>						<br/>					</ul><br/>				</div><br/>			</td><br/>		</tr><br/>	</table><br/>	<br><br/>	<br/>		<br/>			<ul class=\"errors\"><br/>				<li>An error has occurred</li><br/>			</ul><br/>		<br/>	<br/>	<br><br/>	<div class=\"footer\" role=\"contentinfo\"></div><br/>	<div id=\"spinner\" class=\"spinner\" style=\"display: none;\"><br/>		Loading&hellip;<br/>	</div><br/>	<br/>	<br/>	<br/></body><br/></html><br/><br/>result : :{<br/>details : {<br/>{<br/>FAILURE:<br/>[TEST EXECUTION RESULT] : :{<br/>Unload module Success<br/><br/>',NULL,153,NULL,NULL),(19,0,'2013/07/04 19:14:50',3,NULL,NULL,'Chennai_Xi3-20130704190755','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing devicesettings<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>1<br/>2<br/>Executing DS_setColor....<br/><br/><!DOCTYPE html><br/><html><br/><head><br/><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><br/><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><br/><title>RDK Test Suite</title><br/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><br/><br/><link rel=\"apple-touch-icon\"<br/>	href=\"/rdk-testtool-m3/images/apple-touch-icon.png\"><br/><link rel=\"apple-touch-icon\" sizes=\"114x114\"<br/>	href=\"/rdk-testtool-m3/images/apple-touch-icon-retina.png\"><br/><link rel=\"stylesheet\" href=\"/rdk-testtool-m3/css/main.css\"<br/>	type=\"text/css\"><br/><link rel=\"stylesheet\"<br/>	href=\"/rdk-testtool-m3/css/mobile.css\" type=\"text/css\"><br/><link rel=\"stylesheet\" href=\"/rdk-testtool-m3/css/basic.css\"<br/>	type=\"text/css\" /><br/><br/><script src=\"/rdk-testtool-m3/js/jquery-1.6.1.min.js\" type=\"text/javascript\"></script><br/><br/><script src=\"/rdk-testtool-m3/js/jquery.simplemodal.js\" type=\"text/javascript\"></script><br/><br/><br/><br/>		<br/>		<meta name=\"layout\" content=\"main\"><br/>		<br/>	<br/><br/></head><br/><body><br/>	<div id=\"grailsLogo\" role=\"banner\"><br/>		<img src=\"/rdk-testtool-m3/images/comcast_logo_red.png\"<br/>			alt=\"Grails\" /><br/>	</div><br/>	<div<br/>		style=\"width: 100%; min-width: 100%; text-align: right; border-bottom: 3px solid #CCCCCC; border-bottom-color: #C11B17\"><br/>		<br/>			<a href=\"/rdk-testtool-m3/auth/login\" class=\"customizedLink\">Admin Sign In</a><br/>		<br/>	</div><br/>	<hr><br/>	<table id=\"maintable\"><br/>		<tr><br/>			<td nowrap=\"nowrap\"<br/>				style=\"position: absolute; min-width: 500px; height: 20px; width: 947px; background-color: #C8BBBE; border-bottom-color: #C11B17\"><br/>				<div id=\"header\" align=\"left\"><br/>					<ul><br/>						<li><a href=\"/rdk-testtool-m3/primitiveTest/create\" onclick=\"selectPrim();\"><br/>								<span><p id=\"primid\">Primitive Test</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/scriptGroup/list\"><br/>								<span><p id=\"scriptid\">Scripting</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/deviceGroup/list\"><br/>								<span><p id=\"deviceid\">Devices</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/execution/create\"><br/>								<span><p id=\"execid\">Execution</p></span><br/>							</a></li><br/>						<br/>					</ul><br/>				</div><br/>			</td><br/>		</tr><br/>	</table><br/>	<br><br/>	<br/>		<br/>			<ul class=\"errors\"><br/>				<li>An error has occurred</li><br/>			</ul><br/>		<br/>	<br/>	<br><br/>	<div class=\"footer\" role=\"contentinfo\"></div><br/>	<div id=\"spinner\" class=\"spinner\" style=\"display: none;\"><br/>		Loading&hellip;<br/>	</div><br/>	<br/>	<br/>	<br/></body><br/></html><br/><br/>result : :{<br/>details : {<br/>{<br/>FAILURE:<br/>[TEST EXECUTION RESULT] : :{<br/>Unload module Success<br/><br/>',NULL,153,NULL,NULL),(20,1,'2013/07/04 19:15:13',3,NULL,NULL,'Chennai_Xi3-20130704190755','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application registeres RPC<br/>Executing IARMBUS_RequestResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_RequestResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Requested decoder-0 resource is allocated successfully for the application<br/>Executing IARMBUS_ReleaseResource....<br/>{\"jsonrpc\": \"2.0\", \"id\": \"2\", \"resource_type\": 1, \"method\": \"TestMgr_IARMBUS_ReleaseResource\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Allocated  resource is successfully released<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',72,NULL,NULL),(21,1,'2013/07/04 19:17:14',4,NULL,NULL,'Bangalore_Xi3-20130704191710','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : FAILURE<br/>Result.........FAILURE<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>','FAILURE',155,NULL,NULL),(24,0,'2013/07/04 19:23:10',4,NULL,NULL,'Bangalore_Xi3-20130704192306','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372945990965.py\", line 52<br/>    print \"Inside if\" urlList[url];<br/>                            ^<br/>SyntaxError: invalid syntax<br/>',NULL,146,NULL,NULL),(25,1,'2013/07/04 19:23:39',4,NULL,NULL,'Bangalore_Xi3-20130704192335','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372946019542.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>','FAILURE',146,NULL,NULL),(26,1,'2013/07/04 19:26:44',4,NULL,NULL,'Bangalore_Xi3-20130704192640','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372946204232.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>','FAILURE',146,NULL,NULL),(28,1,'2013/07/04 19:37:58',4,NULL,NULL,'Bangalore_Xi3-20130704193754','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=02&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : FAILURE<br/>Result.........FAILURE<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>','FAILURE',147,NULL,NULL),(30,0,'2013/07/04 19:39:27',3,NULL,NULL,'Chennai_Xi3-20130704193904','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing devicesettings<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>1<br/>2<br/>Executing DS_setColor....<br/><br/><!DOCTYPE html><br/><html><br/><head><br/><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><br/><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"><br/><title>RDK Test Suite</title><br/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><br/><br/><link rel=\"apple-touch-icon\"<br/>	href=\"/rdk-testtool-m3/images/apple-touch-icon.png\"><br/><link rel=\"apple-touch-icon\" sizes=\"114x114\"<br/>	href=\"/rdk-testtool-m3/images/apple-touch-icon-retina.png\"><br/><link rel=\"stylesheet\" href=\"/rdk-testtool-m3/css/main.css\"<br/>	type=\"text/css\"><br/><link rel=\"stylesheet\"<br/>	href=\"/rdk-testtool-m3/css/mobile.css\" type=\"text/css\"><br/><link rel=\"stylesheet\" href=\"/rdk-testtool-m3/css/basic.css\"<br/>	type=\"text/css\" /><br/><br/><script src=\"/rdk-testtool-m3/js/jquery-1.6.1.min.js\" type=\"text/javascript\"></script><br/><br/><script src=\"/rdk-testtool-m3/js/jquery.simplemodal.js\" type=\"text/javascript\"></script><br/><br/><br/><br/>		<br/>		<meta name=\"layout\" content=\"main\"><br/>		<br/>	<br/><br/></head><br/><body><br/>	<div id=\"grailsLogo\" role=\"banner\"><br/>		<img src=\"/rdk-testtool-m3/images/comcast_logo_red.png\"<br/>			alt=\"Grails\" /><br/>	</div><br/>	<div<br/>		style=\"width: 100%; min-width: 100%; text-align: right; border-bottom: 3px solid #CCCCCC; border-bottom-color: #C11B17\"><br/>		<br/>			<a href=\"/rdk-testtool-m3/auth/login\" class=\"customizedLink\">Admin Sign In</a><br/>		<br/>	</div><br/>	<hr><br/>	<table id=\"maintable\"><br/>		<tr><br/>			<td nowrap=\"nowrap\"<br/>				style=\"position: absolute; min-width: 500px; height: 20px; width: 947px; background-color: #C8BBBE; border-bottom-color: #C11B17\"><br/>				<div id=\"header\" align=\"left\"><br/>					<ul><br/>						<li><a href=\"/rdk-testtool-m3/primitiveTest/create\" onclick=\"selectPrim();\"><br/>								<span><p id=\"primid\">Primitive Test</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/scriptGroup/list\"><br/>								<span><p id=\"scriptid\">Scripting</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/deviceGroup/list\"><br/>								<span><p id=\"deviceid\">Devices</p></span><br/>							</a></li><br/>						<li><a href=\"/rdk-testtool-m3/execution/create\"><br/>								<span><p id=\"execid\">Execution</p></span><br/>							</a></li><br/>						<br/>					</ul><br/>				</div><br/>			</td><br/>		</tr><br/>	</table><br/>	<br><br/>	<br/>		<br/>			<ul class=\"errors\"><br/>				<li>An error has occurred</li><br/>			</ul><br/>		<br/>	<br/>	<br><br/>	<div class=\"footer\" role=\"contentinfo\"></div><br/>	<div id=\"spinner\" class=\"spinner\" style=\"display: none;\"><br/>		Loading&hellip;<br/>	</div><br/>	<br/>	<br/>	<br/></body><br/></html><br/><br/>result : :{<br/>details : {<br/>{<br/>FAILURE:<br/>[TEST EXECUTION RESULT] : :{<br/>Unload module Success<br/><br/>',NULL,153,NULL,NULL),(32,0,'2013/07/04 19:43:45',4,NULL,NULL,'Bangalore_Xi3-20130704193754','ERROR:tftpy:ERR packet - errorcode: 1, message: can\'t open file<br/>ERROR:tftpy:ERR packet - errorcode: 1, message: can\'t open file<br/>ERROR:tftpy:ERR packet - errorcode: 1, message: can\'t open file<br/>ERROR:tftpy:ERR packet - errorcode: 1, message: can\'t open file<br/>ERROR:tftpy:ERR packet - errorcode: 1, message: can\'t open file<br/>ERROR:tftpy:ERR packet - errorcode: 1, message: can\'t open file<br/>ERROR:tftpy:ERR packet - errorcode: 1, message: can\'t open file<br/>ERROR:tftpy:ERR packet - errorcode: 1, message: can\'t open file<br/>ERROR:tftpy:ERR packet - errorcode: 1, message: can\'t open file<br/>ERROR:tftpy:ERR packet - errorcode: 1, message: can\'t open file<br/>WARNING:tftpy:Timeout waiting for traffic, retrying...<br/>ERROR:tftpy:Timed-out waiting for traffic<br/>WARNING:tftpy:resending last packet<br/>WARNING:tftpy:Resending packet RRQ packet: filename = /mplayerlog.txt mode = octet on sessions <tftpy.TftpStates.TftpStateSentRRQ object at 0x9b4c5ac><br/>Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372947225566.py\", line 59, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>',NULL,146,NULL,NULL),(33,0,'2013/07/04 19:45:06',3,NULL,NULL,'Chennai_Xi3-20130704194456','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing devicesettings<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>1<br/>2<br/>Executing DS_sample....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_DS_FP_setColor\"}<br/>result : <br/>details : <br/><br/>FAILURE:<br/>[TEST EXECUTION RESULT] : <br/>Unload module Success<br/><br/>',NULL,153,NULL,NULL),(34,0,'2013/07/04 19:46:15',3,NULL,NULL,'Chennai_Xi3-20130704194456','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372947375813.py\", line 8, in <module><br/>    obj.configureTestCase(\'http://192.168.161.200:8080/rdk-testtool-m3\',\'/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/\',34,ip,port,\'sample\');<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 459, in configureTestCase<br/>    self.result = tcpClient.recv(1048)<br/>socket.error: [Errno 104] Connection reset by peer<br/>',NULL,153,NULL,NULL),(35,1,'2013/07/04 19:47:18',3,NULL,NULL,'Chennai_Xi3-20130704194456','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing devicesettings<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>1<br/>2<br/>Executing DS_sample....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_DS_FP_setColor\",\"color\":0,\"indicator_name\":\"Power\"}<br/>result : SUCCESS<br/>details : Color :Blue<br/>Color :Blue<br/>SUCCESS:<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',153,NULL,NULL),(36,1,'2013/07/04 19:54:25',4,NULL,NULL,'Bangalore_Xi3-20130704195421','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372947865172.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>','FAILURE',146,NULL,NULL),(37,1,'2013/07/04 19:57:01',4,NULL,NULL,'Bangalore_Xi3-20130704195657','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372948021227.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>','FAILURE',146,NULL,NULL),(39,1,'2013/07/05 09:49:42',5,NULL,NULL,'TVM_Xi3_241-20130705094933','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARM-Bus Daemon<br/>Executing IARMBUS_RegisterEventHandler....<br/>{\"event_id\": 0, \"owner_name\": \"IRMgr\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_IARMBUS_RegisterEventHandler\"}<br/>result : <br/>details : <br/>FAILURE : IARM_Bus_RegisterEventHandler failed with  <br/>[TEST EXECUTION RESULT] : <br/>Unload module Success<br/><br/>','FAILURE',81,NULL,NULL),(40,0,'2013/07/05 09:58:13',5,NULL,NULL,'TVM_Xi3_241-20130705095808','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1372998493214.py\", line 9, in <module><br/>    obj.configureTestCase(\'http://192.168.161.200:8080/rdk-testtool-m3\',\'/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/\',40,ip,port,\'E2E_LinearTV_TuneSD_01\');<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 459, in configureTestCase<br/>    self.result = tcpClient.recv(1048)<br/>socket.error: [Errno 104] Connection reset by peer<br/>',NULL,106,NULL,NULL),(41,0,'2013/07/05 09:59:22',5,NULL,NULL,'TVM_Xi3_241-20130705095917','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(42,0,'2013/07/05 10:00:07',5,NULL,NULL,'TVM_Xi3_241-20130705095957','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(43,0,'2013/07/05 10:13:16',5,NULL,NULL,'TVM_Xi3_241-20130705101309','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(44,0,'2013/07/05 10:16:24',5,NULL,NULL,'TVM_Xi3_241-20130705101617','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(45,0,'2013/07/05 10:52:22',4,NULL,NULL,'Bangalore_Xi3-20130705105209','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373001742485.py\", line 30, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>',NULL,146,NULL,NULL),(46,0,'2013/07/05 10:52:34',4,NULL,NULL,'Bangalore_Xi3-20130705105209','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/46_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>106<br/>0<br/>inside for loop<br/>1<br/>inside for loop<br/>2<br/>inside for loop<br/>3<br/>inside for loop<br/>4<br/>inside for loop<br/>5<br/>inside for loop<br/>6<br/>inside for loop<br/>7<br/>inside for loop<br/>8<br/>inside for loop<br/>9<br/>inside for loop<br/>10<br/>inside for loop<br/>11<br/>inside for loop<br/>12<br/>inside for loop<br/>13<br/>inside for loop<br/>14<br/>inside for loop<br/>15<br/>inside for loop<br/>16<br/>inside for loop<br/>17<br/>inside for loop<br/>18<br/>inside for loop<br/>19<br/>inside for loop<br/>20<br/>inside for loop<br/>21<br/>inside for loop<br/>22<br/>inside for loop<br/>23<br/>inside for loop<br/>24<br/>inside for loop<br/>25<br/>inside for loop<br/>26<br/>inside for loop<br/>27<br/>inside for loop<br/>28<br/>inside for loop<br/>29<br/>inside for loop<br/>30<br/>inside for loop<br/>31<br/>inside for loop<br/>32<br/>inside for loop<br/>33<br/>inside for loop<br/>34<br/>inside for loop<br/>35<br/>inside for loop<br/>36<br/>inside for loop<br/>37<br/>inside for loop<br/>38<br/>inside for loop<br/>39<br/>inside for loop<br/>40<br/>inside for loop<br/>41<br/>inside for loop<br/>42<br/>inside for loop<br/>43<br/>inside for loop<br/>44<br/>inside for loop<br/>45<br/>inside for loop<br/>46<br/>inside for loop<br/>47<br/>inside for loop<br/>48<br/>inside for loop<br/>49<br/>inside for loop<br/>50<br/>inside for loop<br/>51<br/>inside for loop<br/>52<br/>inside for loop<br/>53<br/>inside for loop<br/>54<br/>inside for loop<br/>55<br/>inside for loop<br/>56<br/>inside for loop<br/>57<br/>inside for loop<br/>58<br/>inside for loop<br/>59<br/>inside for loop<br/>60<br/>inside for loop<br/>61<br/>inside for loop<br/>62<br/>inside for loop<br/>63<br/>inside for loop<br/>64<br/>inside for loop<br/>65<br/>inside for loop<br/>66<br/>inside for loop<br/>67<br/>inside for loop<br/>68<br/>inside for loop<br/>69<br/>inside for loop<br/>70<br/>inside for loop<br/>71<br/>inside for loop<br/>72<br/>inside for loop<br/>73<br/>inside for loop<br/>74<br/>inside for loop<br/>75<br/>inside for loop<br/>76<br/>inside for loop<br/>77<br/>inside for loop<br/>78<br/>inside for loop<br/>79<br/>inside for loop<br/>80<br/>inside for loop<br/>81<br/>inside for loop<br/>82<br/>inside for loop<br/>83<br/>inside for loop<br/>84<br/>inside for loop<br/>85<br/>inside for loop<br/>86<br/>inside for loop<br/>87<br/>inside for loop<br/>88<br/>inside for loop<br/>89<br/>inside for loop<br/>90<br/>inside for loop<br/>91<br/>inside for loop<br/>92<br/>inside for loop<br/>93<br/>inside for loop<br/>94<br/>inside for loop<br/>95<br/>inside for loop<br/>96<br/>inside for loop<br/>97<br/>inside for loop<br/>98<br/>inside for loop<br/>99<br/>inside for loop<br/>100<br/>inside for loop<br/>101<br/>inside for loop<br/>102<br/>inside for loop<br/>103<br/>inside for loop<br/>104<br/>inside for loop<br/>105<br/>inside for loop<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(47,0,'2013/07/05 11:03:46',4,NULL,NULL,'Bangalore_Xi3-20130705110342','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373002426365.py\", line 53<br/>    print  \" [URL ] \" +dvrObj.getURL(url);<br/>        ^<br/>IndentationError: expected an indented block<br/>',NULL,146,NULL,NULL),(48,0,'2013/07/05 11:04:58',4,NULL,NULL,'Bangalore_Xi3-20130705110454','WARNING:tftpy:Timeout waiting for traffic, retrying...<br/>ERROR:tftpy:Timed-out waiting for traffic<br/>WARNING:tftpy:resending last packet<br/>WARNING:tftpy:Resending packet RRQ packet: filename = /Newrecmod.txt mode = octet on sessions <tftpy.TftpStates.TftpStateSentRRQ object at 0xb7aed54c><br/>Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373002498941.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(49,0,'2013/07/05 11:07:42',4,NULL,NULL,'Bangalore_Xi3-20130705110736','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373002662425.py\", line 64<br/>    else:<br/>       ^<br/>IndentationError: expected an indented block<br/>',NULL,146,NULL,NULL),(50,0,'2013/07/05 11:09:21',4,NULL,NULL,'Bangalore_Xi3-20130705110918','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373002761553.py\", line 64<br/>    else:<br/>       ^<br/>SyntaxError: invalid syntax<br/>',NULL,146,NULL,NULL),(51,0,'2013/07/05 11:10:25',4,NULL,NULL,'Bangalore_Xi3-20130705111021','WARNING:tftpy:Timeout waiting for traffic, retrying...<br/>ERROR:tftpy:Timed-out waiting for traffic<br/>WARNING:tftpy:resending last packet<br/>WARNING:tftpy:Resending packet RRQ packet: filename = /Newrecmod.txt mode = octet on sessions <tftpy.TftpStates.TftpStateSentRRQ object at 0xb7a8954c><br/>Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373002825041.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(52,0,'2013/07/05 11:11:45',4,NULL,NULL,'Bangalore_Xi3-20130705111142','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373002905614.py\", line 64<br/>    else:<br/>       ^<br/>IndentationError: expected an indented block<br/>',NULL,146,NULL,NULL),(53,0,'2013/07/05 11:14:56',4,NULL,NULL,'Bangalore_Xi3-20130705111452','WARNING:tftpy:Timeout waiting for traffic, retrying...<br/>ERROR:tftpy:Timed-out waiting for traffic<br/>WARNING:tftpy:resending last packet<br/>WARNING:tftpy:Resending packet RRQ packet: filename = /Newrecmod.txt mode = octet on sessions <tftpy.TftpStates.TftpStateSentRRQ object at 0xb7b3a54c><br/>Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373003096203.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(54,0,'2013/07/05 11:17:24',4,NULL,NULL,'Bangalore_Xi3-20130705111624','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373003244370.py\", line 52<br/>    print \"Inside if\" urlList[url];<br/>                            ^<br/>SyntaxError: invalid syntax<br/>',NULL,146,NULL,NULL),(55,0,'2013/07/05 11:17:55',4,NULL,NULL,'Bangalore_Xi3-20130705111751','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/55_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>106<br/>0<br/>inside for loop<br/>Inside if<br/>1<br/>inside for loop<br/>Inside if<br/>2<br/>inside for loop<br/>Inside if<br/>3<br/>inside for loop<br/>Inside else<br/>4<br/>inside for loop<br/>Inside else<br/>5<br/>inside for loop<br/>Inside else<br/>6<br/>inside for loop<br/>Inside else<br/>7<br/>inside for loop<br/>Inside else<br/>8<br/>inside for loop<br/>Inside else<br/>9<br/>inside for loop<br/>Inside else<br/>10<br/>inside for loop<br/>Inside else<br/>11<br/>inside for loop<br/>Inside else<br/>12<br/>inside for loop<br/>Inside else<br/>13<br/>inside for loop<br/>Inside else<br/>14<br/>inside for loop<br/>Inside else<br/>15<br/>inside for loop<br/>Inside else<br/>16<br/>inside for loop<br/>Inside else<br/>17<br/>inside for loop<br/>Inside else<br/>18<br/>inside for loop<br/>Inside else<br/>19<br/>inside for loop<br/>Inside else<br/>20<br/>inside for loop<br/>Inside else<br/>21<br/>inside for loop<br/>Inside else<br/>22<br/>inside for loop<br/>Inside else<br/>23<br/>inside for loop<br/>Inside else<br/>24<br/>inside for loop<br/>Inside else<br/>25<br/>inside for loop<br/>Inside else<br/>26<br/>inside for loop<br/>Inside else<br/>27<br/>inside for loop<br/>Inside else<br/>28<br/>inside for loop<br/>Inside else<br/>29<br/>inside for loop<br/>Inside else<br/>30<br/>inside for loop<br/>Inside else<br/>31<br/>inside for loop<br/>Inside else<br/>32<br/>inside for loop<br/>Inside else<br/>33<br/>inside for loop<br/>Inside else<br/>34<br/>inside for loop<br/>Inside else<br/>35<br/>inside for loop<br/>Inside else<br/>36<br/>inside for loop<br/>Inside else<br/>37<br/>inside for loop<br/>Inside else<br/>38<br/>inside for loop<br/>Inside else<br/>39<br/>inside for loop<br/>Inside else<br/>40<br/>inside for loop<br/>Inside else<br/>41<br/>inside for loop<br/>Inside else<br/>42<br/>inside for loop<br/>Inside else<br/>43<br/>inside for loop<br/>Inside else<br/>44<br/>inside for loop<br/>Inside else<br/>45<br/>inside for loop<br/>Inside else<br/>46<br/>inside for loop<br/>Inside else<br/>47<br/>inside for loop<br/>Inside else<br/>48<br/>inside for loop<br/>Inside else<br/>49<br/>inside for loop<br/>Inside else<br/>50<br/>inside for loop<br/>Inside else<br/>51<br/>inside for loop<br/>Inside else<br/>52<br/>inside for loop<br/>Inside else<br/>53<br/>inside for loop<br/>Inside else<br/>54<br/>inside for loop<br/>Inside else<br/>55<br/>inside for loop<br/>Inside else<br/>56<br/>inside for loop<br/>Inside else<br/>57<br/>inside for loop<br/>Inside else<br/>58<br/>inside for loop<br/>Inside else<br/>59<br/>inside for loop<br/>Inside else<br/>60<br/>inside for loop<br/>Inside else<br/>61<br/>inside for loop<br/>Inside else<br/>62<br/>inside for loop<br/>Inside else<br/>63<br/>inside for loop<br/>Inside else<br/>64<br/>inside for loop<br/>Inside else<br/>65<br/>inside for loop<br/>Inside else<br/>66<br/>inside for loop<br/>Inside else<br/>67<br/>inside for loop<br/>Inside else<br/>68<br/>inside for loop<br/>Inside else<br/>69<br/>inside for loop<br/>Inside else<br/>70<br/>inside for loop<br/>Inside else<br/>71<br/>inside for loop<br/>Inside else<br/>72<br/>inside for loop<br/>Inside else<br/>73<br/>inside for loop<br/>Inside else<br/>74<br/>inside for loop<br/>Inside else<br/>75<br/>inside for loop<br/>Inside else<br/>76<br/>inside for loop<br/>Inside else<br/>77<br/>inside for loop<br/>Inside else<br/>78<br/>inside for loop<br/>Inside else<br/>79<br/>inside for loop<br/>Inside else<br/>80<br/>inside for loop<br/>Inside else<br/>81<br/>inside for loop<br/>Inside else<br/>82<br/>inside for loop<br/>Inside else<br/>83<br/>inside for loop<br/>Inside else<br/>84<br/>inside for loop<br/>Inside else<br/>85<br/>inside for loop<br/>Inside else<br/>86<br/>inside for loop<br/>Inside else<br/>87<br/>inside for loop<br/>Inside else<br/>88<br/>inside for loop<br/>Inside else<br/>89<br/>inside for loop<br/>Inside else<br/>90<br/>inside for loop<br/>Inside else<br/>91<br/>inside for loop<br/>Inside else<br/>92<br/>inside for loop<br/>Inside else<br/>93<br/>inside for loop<br/>Inside else<br/>94<br/>inside for loop<br/>Inside else<br/>95<br/>inside for loop<br/>Inside else<br/>96<br/>inside for loop<br/>Inside else<br/>97<br/>inside for loop<br/>Inside else<br/>98<br/>inside for loop<br/>Inside else<br/>99<br/>inside for loop<br/>Inside else<br/>100<br/>inside for loop<br/>Inside else<br/>101<br/>inside for loop<br/>Inside else<br/>102<br/>inside for loop<br/>Inside else<br/>103<br/>inside for loop<br/>Inside else<br/>104<br/>inside for loop<br/>Inside else<br/>105<br/>inside for loop<br/>Inside else<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(56,0,'2013/07/05 11:26:33',4,NULL,NULL,'Bangalore_Xi3-20130705112629','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373003793954.py\", line 48<br/>    for url in range(len(urlList)):<br/>      ^<br/>IndentationError: expected an indented block<br/>',NULL,146,NULL,NULL),(57,0,'2013/07/05 11:40:15',4,NULL,NULL,'Bangalore_Xi3-20130705114012','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373004615931.py\", line 53<br/>    print  \" [URL ] \" +dvrObj.getURL(url);<br/>    ^<br/>IndentationError: unexpected indent<br/>',NULL,146,NULL,NULL),(58,0,'2013/07/05 11:40:51',4,NULL,NULL,'Bangalore_Xi3-20130705114048','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373004651234.py\", line 54<br/>    tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');<br/>    ^<br/>IndentationError: unexpected indent<br/>',NULL,146,NULL,NULL),(59,0,'2013/07/05 11:43:13',4,NULL,NULL,'Bangalore_Xi3-20130705114310','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373004793522.py\", line 30, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>',NULL,146,NULL,NULL),(60,0,'2013/07/05 11:43:30',4,NULL,NULL,'Bangalore_Xi3-20130705114310','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373004810335.py\", line 30, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>',NULL,146,NULL,NULL),(61,0,'2013/07/05 11:43:38',4,NULL,NULL,'Bangalore_Xi3-20130705114310','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373004818096.py\", line 30, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>',NULL,146,NULL,NULL),(62,0,'2013/07/05 11:44:38',4,NULL,NULL,'Bangalore_Xi3-20130705114310','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373004878384.py\", line 30, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>',NULL,146,NULL,NULL),(63,0,'2013/07/05 11:44:55',4,NULL,NULL,'Bangalore_Xi3-20130705114310','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.30.62 is up and Test Agent is running...<br/>************************<br/><br/>Failed to load Qt test module<br/>',NULL,135,NULL,NULL),(64,0,'2013/07/05 11:45:03',4,NULL,NULL,'Bangalore_Xi3-20130705114310','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.30.62 is up and Test Agent is running...<br/>************************<br/><br/>Failed to load Webkit test module<br/>',NULL,54,NULL,NULL),(65,0,'2013/07/05 11:45:11',4,NULL,NULL,'Bangalore_Xi3-20130705114310','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373004911261.py\", line 30, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>',NULL,155,NULL,NULL),(66,0,'2013/07/05 11:52:36',4,NULL,NULL,'Bangalore_Xi3-20130705114310','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373005356903.py\", line 30, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>',NULL,146,NULL,NULL),(67,0,'2013/07/05 11:54:25',3,NULL,NULL,'Chennai_Xi3-20130705115319','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373005465652.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(68,0,'2013/07/05 11:55:19',3,NULL,NULL,'Chennai_Xi3-20130705115515','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373005519624.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(69,0,'2013/07/05 11:58:18',3,NULL,NULL,'Chennai_Xi3-20130705115814','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373005698629.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(70,0,'2013/07/05 12:02:23',3,NULL,NULL,'Chennai_Xi3-20130705120220','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373005943478.py\", line 57, in <module><br/>    playurl=urlList[url]+\"&play_speed=-0.500000&time_pos=8000\";<br/>NameError: name \'urlList\' is not defined<br/>',NULL,146,NULL,NULL),(71,0,'2013/07/05 12:05:23',3,NULL,NULL,'Chennai_Xi3-20130705120520','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373006123827.py\", line 58, in <module><br/>    tdkTestObj.addParameter(\"videoStreamURL\",playurl);<br/>NameError: name \'playurl\' is not defined<br/>',NULL,146,NULL,NULL),(72,0,'2013/07/05 12:06:34',3,NULL,NULL,'Chennai_Xi3-20130705120629','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373006194360.py\", line 43, in <module><br/>    urlList= dvrObj.getURLList();<br/>NameError: name \'dvrObj\' is not defined<br/>',NULL,146,NULL,NULL),(73,0,'2013/07/05 12:07:14',3,NULL,NULL,'Chennai_Xi3-20130705120711','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373006234697.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(74,0,'2013/07/05 12:09:35',3,NULL,NULL,'Chennai_Xi3-20130705120711','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Failed<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(75,0,'2013/07/05 12:09:44',3,NULL,NULL,'Chennai_Xi3-20130705120711','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373006384447.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(76,0,'2013/07/05 12:12:57',3,NULL,NULL,'Chennai_Xi3-20130705121253','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373006577670.py\", line 30, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>',NULL,146,NULL,NULL),(77,0,'2013/07/05 12:13:12',3,NULL,NULL,'Chennai_Xi3-20130705121253','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Failed<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(78,0,'2013/07/05 12:17:38',3,NULL,NULL,'Chennai_Xi3-20130705121253','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Failed<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(79,0,'2013/07/05 12:21:24',3,NULL,NULL,'Chennai_Xi3-20130705122121','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373007084924.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(80,0,'2013/07/05 12:21:55',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Failed<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(81,0,'2013/07/05 14:00:41',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(82,0,'2013/07/05 14:01:21',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(83,0,'2013/07/05 14:04:50',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(84,0,'2013/07/05 14:05:12',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(85,0,'2013/07/05 14:07:58',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(86,0,'2013/07/05 14:10:25',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(87,0,'2013/07/05 14:11:58',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Failed<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(88,0,'2013/07/05 14:12:05',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Failed<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(89,0,'2013/07/05 14:12:11',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Failed<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(90,0,'2013/07/05 14:12:24',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Failed<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(91,0,'2013/07/05 14:13:23',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(92,0,'2013/07/05 14:13:36',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=02&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1022<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Error code Response is Failed<br/>Unload module Success<br/><br/>',NULL,107,NULL,NULL),(93,0,'2013/07/05 14:15:11',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Failed<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(94,0,'2013/07/05 14:16:47',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=02&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1022<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Error code Response is Failed<br/>Unload module Success<br/><br/>',NULL,107,NULL,NULL),(95,0,'2013/07/05 14:19:40',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(96,0,'2013/07/05 14:22:00',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Failed<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(97,1,'2013/07/05 14:28:19',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : FAILURE<br/>Result.........FAILURE<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>','FAILURE',146,NULL,NULL),(98,1,'2013/07/05 14:29:25',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : FAILURE<br/>Result.........FAILURE<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>','FAILURE',146,NULL,NULL),(99,1,'2013/07/05 14:31:36',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : FAILURE<br/>Result.........FAILURE<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>','FAILURE',155,NULL,NULL),(100,1,'2013/07/05 14:34:28',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : FAILURE<br/>Result.........FAILURE<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>','FAILURE',146,NULL,NULL),(101,1,'2013/07/05 14:38:57',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : FAILURE<br/>Result.........FAILURE<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>','FAILURE',155,NULL,NULL),(102,1,'2013/07/05 14:42:17',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : FAILURE<br/>Result.........FAILURE<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>','FAILURE',155,NULL,NULL),(103,0,'2013/07/05 14:44:21',3,NULL,NULL,'Chennai_Xi3-20130705122151','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(104,0,'2013/07/05 14:48:09',3,NULL,NULL,'Chennai_Xi3-20130705144437','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(105,0,'2013/07/05 14:53:32',4,NULL,NULL,'Bangalore_Xi3-20130705145329','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(106,0,'2013/07/05 14:57:17',4,NULL,NULL,'Bangalore_Xi3-20130705145329','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(107,0,'2013/07/05 14:57:53',4,NULL,NULL,'Bangalore_Xi3-20130705145329','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(108,0,'2013/07/05 14:58:21',4,NULL,NULL,'Bangalore_Xi3-20130705145329','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=4.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=4.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,151,NULL,NULL),(109,0,'2013/07/05 15:00:18',3,NULL,NULL,'Chennai_Xi3-20130705150015','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(110,0,'2013/07/05 15:00:33',3,NULL,NULL,'Chennai_Xi3-20130705150015','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(111,1,'2013/07/05 15:02:17',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=02&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1022<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>details : :<br/>PLAY URL = :<br/>result : FAILURE<br/>Result of Json Response : FAILURE<br/>Pre condition-Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',112,NULL,NULL),(112,0,'2013/07/05 15:08:30',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"RecordURL\": \"http://\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>details : {<br/>Valid URL = {<br/>Result of Json Response : :{<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>',NULL,106,NULL,NULL),(113,0,'2013/07/05 15:35:55',6,NULL,NULL,'Bangalore_XG1-20130705151428','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing qttestsuite<br/>Connected to Server!<br/><br/>Failed to load Qt test module<br/>',NULL,135,NULL,NULL),(114,1,'2013/07/05 15:36:32',6,NULL,NULL,'Bangalore_XG1-20130705151428','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing qttestsuite<br/>Connected to Server!<br/><br/>Qt test module successfully loaded<br/>Executing Qt_Test....<br/>{\"Display_option\": \"directfb\", \"Qt_component_type\": \"qt_non_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : <br/><br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Executing Qt_Test....<br/>{\"Display_option\": \"directfb\", \"Qt_component_type\": \"qt_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : <br/><br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','FAILURE',135,NULL,NULL),(115,1,'2013/07/05 15:37:41',6,NULL,NULL,'Bangalore_XG1-20130705151428','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing qttestsuite<br/>Connected to Server!<br/><br/>Qt test module successfully loaded<br/>Executing Qt_Test....<br/>{\"Display_option\": \"directfb\", \"Qt_component_type\": \"qt_non_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : <br/><br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Executing Qt_Test....<br/>{\"Display_option\": \"directfb\", \"Qt_component_type\": \"qt_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : <br/><br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','FAILURE',135,NULL,NULL),(116,0,'2013/07/05 15:41:08',6,NULL,NULL,'Bangalore_XG1-20130705154058','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.30.162 is up and Test Agent is running...<br/>************************<br/><br/>Failed to load Qt test module<br/>',NULL,135,NULL,NULL),(117,1,'2013/07/05 15:41:20',6,NULL,NULL,'Bangalore_XG1-20130705154058','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing qttestsuite<br/>Connected to Server!<br/><br/>Qt test module successfully loaded<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_non_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : <br/><br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : <br/><br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','FAILURE',135,NULL,NULL),(118,1,'2013/07/05 15:46:59',6,NULL,NULL,'Bangalore_XG1-20130705154058','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing qttestsuite<br/>Connected to Server!<br/><br/>Qt test module successfully loaded<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_non_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/non_graphics/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/non_graphics/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/graphics/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/graphics/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','Test Suite Executed',135,NULL,NULL),(119,1,'2013/07/05 15:51:30',6,NULL,NULL,'Bangalore_XG1-20130705154931','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing qttestsuite<br/>Connected to Server!<br/><br/>Qt test module successfully loaded<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_non_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/non_graphics/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/non_graphics/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/graphics/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/graphics/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','Test Suite Executed',135,NULL,NULL),(120,0,'2013/07/05 15:59:37',4,NULL,NULL,'Bangalore_Xi3-20130705155842','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(121,0,'2013/07/05 16:03:26',4,NULL,NULL,'Bangalore_Xi3-20130705155842','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(122,1,'2013/07/05 16:07:28',6,NULL,NULL,'Bangalore_XG1-20130705160722','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing qttestsuite<br/>Connected to Server!<br/><br/>Qt test module successfully loaded<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_non_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/non_graphics/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/non_graphics/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/graphics/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/graphics/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Unload module Success<br/><br/>','Test Suite Executed',135,NULL,NULL),(123,0,'2013/07/05 16:23:42',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(124,1,'2013/07/05 16:26:21',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : FAILURE<br/>details : :<br/>Valid URL = :<br/>Result of Json Response : FAILURE<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(125,0,'2013/07/05 16:31:01',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(126,0,'2013/07/05 16:39:24',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(127,0,'2013/07/05 16:41:05',4,NULL,NULL,'Bangalore_Xi3-20130705135330','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(128,0,'2013/07/05 16:42:47',4,NULL,NULL,'Bangalore_Xi3-20130705135330',NULL,NULL,106,NULL,NULL),(129,1,'2013/07/05 16:45:46',6,NULL,NULL,'Bangalore_XG1-20130705160722','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"directfb\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(130,1,'2013/07/05 16:46:37',6,NULL,NULL,'Bangalore_XG1-20130705160722','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"directfb\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(131,1,'2013/07/05 16:47:08',6,NULL,NULL,'Bangalore_XG1-20130705164702','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"intelce\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(132,1,'2013/07/05 16:49:07',6,NULL,NULL,'Bangalore_XG1-20130705164702','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing qttestsuite<br/>Connected to Server!<br/><br/>Qt test module successfully loaded<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_non_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/non_graphics/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/non_graphics/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/graphics/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/graphics/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Unload module Success<br/><br/>','Test Suite Executed',135,NULL,NULL),(133,0,'2013/07/05 17:08:48',4,NULL,NULL,'Bangalore_Xi3-20130705155842','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(134,0,'2013/07/05 17:10:07',4,NULL,NULL,'Bangalore_Xi3-20130705155842','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(135,0,'2013/07/05 17:15:47',4,NULL,NULL,'Bangalore_Xi3-20130705171543','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(136,0,'2013/07/05 17:17:27',4,NULL,NULL,'Bangalore_Xi3-20130705171543','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(137,0,'2013/07/05 17:30:08',4,NULL,NULL,'Bangalore_Xi3-20130705171543','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/137_RecordedUrlsLog.txt<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(138,0,'2013/07/05 17:30:45',4,NULL,NULL,'Bangalore_Xi3-20130705171543','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(139,0,'2013/07/05 17:37:46',4,NULL,NULL,'Bangalore_Xi3-20130705171543','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(140,0,'2013/07/05 17:43:55',4,NULL,NULL,'Bangalore_Xi3-20130705171543','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(141,0,'2013/07/05 17:46:06',4,NULL,NULL,'Bangalore_Xi3-20130705171543','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(142,0,'2013/07/05 17:54:30',3,NULL,NULL,'Chennai_Xi3-20130705175419','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  FAILURE<br/>',NULL,31,NULL,NULL),(143,1,'2013/07/05 17:56:19',3,NULL,NULL,'Chennai_Xi3-20130705175419','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',31,NULL,NULL),(144,1,'2013/07/05 17:56:47',3,NULL,NULL,'Chennai_Xi3-20130705175419','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_BusCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_BusCall\",\"newState\":0,\"set_timeout\":1000,\"owner_name\":\"IRMgr\",\"resource_type\":0,\"method_name\":\"GetRepeatInterval\",\"data_type\":\"IR\"}<br/>result : SUCCESS<br/>details : 50<br/>SUCCESS: RPC method invoked successfully<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',104,NULL,NULL),(145,1,'2013/07/05 18:03:56',3,NULL,NULL,'Chennai_Xi3-20130705180347','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_BusCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_BusCall\",\"method_name\":\"GetRepeatInterval\",\"newState\":0,\"owner_name\":\"IRMgr\",\"data_type\":\"IR\",\"set_timeout\":1000,\"resource_type\":0}<br/>result : SUCCESS<br/>details : 50<br/>SUCCESS: RPC method invoked successfully<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',104,NULL,NULL),(146,1,'2013/07/05 18:04:08',3,NULL,NULL,'Chennai_Xi3-20130705180347','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_BusCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_BusCall\",\"owner_name\":\"IRMgr\",\"data_type\":\"IR\",\"method_name\":\"GetRepeatInterval\",\"set_timeout\":1000,\"newState\":0,\"resource_type\":0}<br/>result : SUCCESS<br/>details : 50<br/>SUCCESS: RPC method invoked successfully<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',101,NULL,NULL),(147,1,'2013/07/05 18:06:52',4,NULL,NULL,'Bangalore_Xi3-20130705171543','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : FAILURE<br/>Result.........FAILURE<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /mplayerlog.txt<br/>Log ath :/mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>','FAILURE',155,NULL,NULL),(148,1,'2013/07/05 18:10:01',3,NULL,NULL,'Chennai_Xi3-20130705180820','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_BusCall....<br/>{\"owner_name\": \"IRMgr\", \"jsonrpc\": \"2.0\", \"data_type\": \"IR\", \"newState\": 0, \"id\": \"2\", \"method_name\": \"GetRepeatInterval\", \"set_timeout\": 1000, \"method\": \"TestMgr_IARMBUS_BusCall\", \"resource_type\": 0}<br/>result : SUCCESS<br/>details : 50<br/>SUCCESS: RPC method invoked successfully<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',96,NULL,NULL),(149,1,'2013/07/05 18:12:50',3,NULL,NULL,'Chennai_Xi3-20130705181237','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',31,NULL,NULL),(150,1,'2013/07/05 18:14:20',6,NULL,NULL,'Bangalore_XG1-20130705181413','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"intelce\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(151,1,'2013/07/05 18:14:59',6,NULL,NULL,'Bangalore_XG1-20130705181413','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"intelce\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(153,1,'2013/07/05 18:16:51',6,NULL,NULL,'Bangalore_XG1-20130705181413','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"intelce\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(154,2,'2013/07/05 18:27:59',3,NULL,NULL,'Chennai_Xi3-20130705181509','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>result : <br/>details : <br/>FAILURE: IARM_Bus_RegisterCall failed with <br/>[TEST EXECUTION RESULT] : <br/>Unload module Success<br/><br/>','FAILURE',95,NULL,NULL),(156,2,'2013/07/05 18:44:55',3,NULL,NULL,'Chennai_Xi3-20130705181509','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_GetContext....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_GetContext\"}<br/>result : <br/>details : <br/>FAILURE: IARM_Bus_GetContext failed with  <br/>[TEST EXECUTION RESULT] : <br/>Unload module Success<br/><br/>','FAILURE',136,NULL,NULL),(160,0,'2013/07/05 19:03:28',4,NULL,NULL,'Bangalore_Xi3-20130705135330',NULL,NULL,106,NULL,NULL),(163,1,'2013/07/08 11:43:42',5,NULL,NULL,'TVM_Xi3_241-20130708114200','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application is initialized with IARM Bus library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application is successfully connected with IARMBUS<br/>Executing IARMBUS_IsConnected....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_IsConnected\",\"member_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: API-Is_Connected success<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARM Bus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',33,NULL,NULL),(164,0,'2013/07/08 12:22:16',4,NULL,NULL,'Bangalore_Xi3-20130708122029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(165,0,'2013/07/08 12:26:56',4,NULL,NULL,'Bangalore_Xi3-20130708122029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(166,0,'2013/07/08 12:33:06',4,NULL,NULL,'Bangalore_Xi3-20130708122029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(167,0,'2013/07/08 12:35:39',4,NULL,NULL,'Bangalore_Xi3-20130708122029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(168,0,'2013/07/08 12:37:30',4,NULL,NULL,'Bangalore_Xi3-20130708123725','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(169,0,'2013/07/08 12:38:52',4,NULL,NULL,'Bangalore_Xi3-20130708122029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(170,0,'2013/07/08 12:43:21',4,NULL,NULL,'Bangalore_Xi3-20130708124312','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(171,0,'2013/07/08 13:13:04',4,NULL,NULL,'Bangalore_Xi3-20130708122029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.30.62 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,106,NULL,NULL),(172,0,'2013/07/08 13:28:56',4,NULL,NULL,'Bangalore_Xi3-20130708122029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.30.62 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,106,NULL,NULL),(173,0,'2013/07/08 13:29:34',4,NULL,NULL,'Bangalore_Xi3-20130708122029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(174,0,'2013/07/08 13:30:57',4,NULL,NULL,'Bangalore_Xi3-20130708122029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(175,0,'2013/07/08 13:32:55',4,NULL,NULL,'Bangalore_Xi3-20130708122029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(176,0,'2013/07/08 13:38:59',4,NULL,NULL,'Bangalore_Xi3-20130708133820','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(177,0,'2013/07/08 13:40:02',4,NULL,NULL,'Bangalore_Xi3-20130708133957','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(178,0,'2013/07/08 13:43:55',4,NULL,NULL,'Bangalore_Xi3-20130708134319','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(179,0,'2013/07/08 13:46:00',4,NULL,NULL,'Bangalore_Xi3-20130708134319','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(180,0,'2013/07/08 13:47:58',4,NULL,NULL,'Bangalore_Xi3-20130708134319','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(181,0,'2013/07/08 13:53:43',4,NULL,NULL,'Bangalore_Xi3-20130708135337','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(182,0,'2013/07/08 14:01:56',4,NULL,NULL,'Bangalore_Xi3-20130708135337','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(183,0,'2013/07/08 14:05:42',4,NULL,NULL,'Bangalore_Xi3-20130708135337','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(184,0,'2013/07/08 14:08:22',4,NULL,NULL,'Bangalore_Xi3-20130708135337','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(185,0,'2013/07/08 14:09:42',4,NULL,NULL,'Bangalore_Xi3-20130708140936','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(186,0,'2013/07/08 14:20:57',4,NULL,NULL,'Bangalore_Xi3-20130708142050','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Failed<br/>Failed to load LinearTV module<br/>',NULL,167,NULL,NULL),(187,0,'2013/07/08 14:21:15',4,NULL,NULL,'Bangalore_Xi3-20130708142050','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Failed<br/>Failed to load LinearTV module<br/>',NULL,167,NULL,NULL),(188,0,'2013/07/08 14:22:47',4,NULL,NULL,'Bangalore_Xi3-20130708142242','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(189,0,'2013/07/08 14:27:29',4,NULL,NULL,'Bangalore_Xi3-20130708142050','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(190,0,'2013/07/08 14:37:42',4,NULL,NULL,'Bangalore_Xi3-20130708142050','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(191,0,'2013/07/08 14:42:14',4,NULL,NULL,'Bangalore_Xi3-20130708142050','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(192,0,'2013/07/08 14:55:08',3,NULL,NULL,'Chennai_Xi3-20130708145502','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  FAILURE<br/>Failed to load LinearTV module<br/>',NULL,167,NULL,NULL),(193,0,'2013/07/08 14:56:16',4,NULL,NULL,'Bangalore_Xi3-20130708145609','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(194,0,'2013/07/08 15:00:53',3,NULL,NULL,'Chennai_Xi3-20130708150014','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  SUCCESS<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(195,0,'2013/07/08 15:05:01',3,NULL,NULL,'Chennai_Xi3-20130708150455','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  SUCCESS<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(196,0,'2013/07/08 16:03:10',3,NULL,NULL,'Chennai_Xi3-20130708134047','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.27.157 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,167,NULL,NULL),(197,0,'2013/07/08 16:03:20',3,NULL,NULL,'Chennai_Xi3-20130708134047','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.27.157 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,167,NULL,NULL),(198,0,'2013/07/08 16:04:44',4,NULL,NULL,'Bangalore_Xi3-20130708160438','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(199,0,'2013/07/08 16:07:56',3,NULL,NULL,'Chennai_Xi3-20130708160745','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373279876642.py\", line 2, in <module><br/>    obj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");<br/>NameError: name \'tdklib\' is not defined<br/>',NULL,91,NULL,NULL),(200,2,'2013/07/08 16:08:07',3,NULL,NULL,'Chennai_Xi3-20130708160745','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully connected with IARMBUS <br/>Executing IARMBUS_RegisterCall....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_RegisterCall\",\"owner_name\":\"ReleaseOwnership\"}<br/>result : <br/>details : <br/>FAILURE: IARM_Bus_RegisterCall failed with <br/>[TEST EXECUTION RESULT] : <br/>Unload module Success<br/><br/>','FAILURE',72,NULL,NULL),(201,0,'2013/07/08 16:18:38',4,NULL,NULL,'Bangalore_Xi3-20130708160438','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(202,1,'2013/07/08 16:45:38',5,NULL,NULL,'TVM_Xi3_241-20130708164533','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373282138535.py\", line 57, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>','FAILURE',162,NULL,NULL),(203,0,'2013/07/08 16:46:01',5,NULL,NULL,'TVM_Xi3_241-20130708164548','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Load module failed<br/>',NULL,32,NULL,NULL),(204,0,'2013/07/08 16:50:02',3,NULL,NULL,'Chennai_Xi3-20130708164953','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.27.157 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,167,NULL,NULL),(205,0,'2013/07/08 16:51:08',4,NULL,NULL,'Bangalore_Xi3-20130708165059','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Valid URL = http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/tuner?ocap_locator=ocap://0x100a&recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(206,0,'2013/07/08 16:52:39',3,NULL,NULL,'Chennai_Xi3-20130708165233','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.27.157 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,167,NULL,NULL),(207,0,'2013/07/08 16:54:34',3,NULL,NULL,'Chennai_Xi3-20130708165426','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.27.157 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,167,NULL,NULL),(208,1,'2013/07/08 16:56:27',5,NULL,NULL,'TVM_Xi3_241-20130708165617','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application is initialized with IARM Bus library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application is successfully connected with IARMBUS<br/>Executing IARMBUS_IsConnected....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_IsConnected\",\"member_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: API-Is_Connected success<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARM Bus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',33,NULL,NULL),(209,1,'2013/07/08 16:58:19',4,NULL,NULL,'Bangalore_Xi3-20130708165807','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.161.56:8080/videoStreamInit?recorderId=T0100111395live=ocap://0x100a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : FAILURE<br/>details : :<br/>Valid URL = :<br/>Result of Json Response : FAILURE<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',167,NULL,NULL),(210,0,'2013/07/08 17:07:39',4,NULL,NULL,'Bangalore_Xi3-20130708170731','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/210_RecordedUrlsLog.txt<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(211,0,'2013/07/08 17:13:29',4,NULL,NULL,'Bangalore_Xi3-20130708170731','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/211_RecordedUrlsLog.txt<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(212,0,'2013/07/08 17:22:21',3,NULL,NULL,'Chennai_Xi3-20130708172213','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.27.157 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,106,NULL,NULL),(213,0,'2013/07/08 17:23:29',3,NULL,NULL,'Chennai_Xi3-20130708172324','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.27.157 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,106,NULL,NULL),(214,1,'2013/07/08 17:24:43',5,NULL,NULL,'TVM_Xi3_241-20130708172434','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application is initialized with IARM Bus library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application is successfully connected with IARMBUS<br/>Executing IARMBUS_IsConnected....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_IsConnected\",\"member_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: API-Is_Connected success<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARM Bus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',33,NULL,NULL),(215,1,'2013/07/08 17:26:09',4,NULL,NULL,'Bangalore_Xi3-20130708172604','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : FAILURE<br/>details : :<br/>Valid URL = :<br/>Result of Json Response : FAILURE<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(216,1,'2013/07/08 17:28:51',5,NULL,NULL,'TVM_Xi3_241-20130708172434','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : <br/>details : <br/>Valid URL = <br/>Result of Json Response : <br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(217,0,'2013/07/08 17:32:59',3,NULL,NULL,'Chennai_Xi3-20130708173254','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.27.157 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,106,NULL,NULL),(218,1,'2013/07/08 17:33:31',5,NULL,NULL,'TVM_Xi3_241-20130708172434','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : <br/>details : <br/>Valid URL = <br/>Result of Json Response : <br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(219,1,'2013/07/08 17:34:18',4,NULL,NULL,'Bangalore_Xi3-20130708173414','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : FAILURE<br/>details : :<br/>Valid URL = :<br/>Result of Json Response : FAILURE<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(220,0,'2013/07/08 17:43:02',3,NULL,NULL,'Chennai_Xi3-20130708174254','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.27.157 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,106,NULL,NULL),(221,0,'2013/07/08 17:43:25',4,NULL,NULL,'Bangalore_Xi3-20130708174319','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,106,NULL,NULL),(222,0,'2013/07/08 17:45:25',5,NULL,NULL,'TVM_Xi3_241-20130708174506','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373285725764.py\", line 8, in <module><br/>    obj.configureTestCase(\'http://192.168.161.200:8080/rdk-testtool-m3\',\'/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/\',222,ip,port,\'CT_IARMBUS_3\');<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 459, in configureTestCase<br/>    self.result = tcpClient.recv(1048)<br/>socket.error: [Errno 104] Connection reset by peer<br/>',NULL,33,NULL,NULL),(223,0,'2013/07/08 17:46:12',4,NULL,NULL,'Bangalore_Xi3-20130708174607','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>',NULL,106,NULL,NULL),(224,1,'2013/07/08 18:07:57',5,NULL,NULL,'TVM_Xi3_241-20130708180749','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application is initialized with IARM Bus library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application is successfully connected with IARMBUS<br/>Executing IARMBUS_IsConnected....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_IsConnected\",\"member_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: API-Is_Connected success<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARM Bus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',33,NULL,NULL),(225,1,'2013/07/08 18:08:14',5,NULL,NULL,'TVM_Xi3_241-20130708180805','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application is initialized with IARM Bus library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application is successfully connected with IARMBUS<br/>Executing IARMBUS_IsConnected....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_IsConnected\",\"member_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: API-Is_Connected success<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARM Bus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',33,NULL,NULL),(226,0,'2013/07/08 18:16:08',4,NULL,NULL,'Bangalore_Xi3-20130708181550','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(227,0,'2013/07/08 18:17:15',4,NULL,NULL,'Bangalore_Xi3-20130708181709','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(228,0,'2013/07/08 18:18:41',4,NULL,NULL,'Bangalore_Xi3-20130708181836','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x126c<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x126c\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x126c&recorderId=T0100190784live=ocap://0x126c<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x126c&recorderId=T0100190784live=ocap://0x126c<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x126c&recorderId=T0100190784live=ocap://0x126c\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(229,0,'2013/07/08 18:19:55',4,NULL,NULL,'Bangalore_Xi3-20130708181949','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x12<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x12\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x12&recorderId=T0100190784live=ocap://0x12<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x12&recorderId=T0100190784live=ocap://0x12<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x12&recorderId=T0100190784live=ocap://0x12\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>',NULL,167,NULL,NULL),(230,0,'2013/07/08 18:21:44',4,NULL,NULL,'Bangalore_Xi3-20130708182139','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>Result of Player : SUCCESS<br/>SD channel Tuned and played Successfully<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,167,NULL,NULL),(231,1,'2013/07/08 18:34:32',4,NULL,NULL,'Bangalore_Xi3-20130708183420','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>','FAILURE',167,NULL,NULL),(232,0,'2013/07/08 20:18:58',4,NULL,NULL,'Bangalore_Xi3-20130708201851','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373294938747.py\", line 72<br/>    obj.unloadModule(\"gstreamertestsuite\"\");<br/>                                           ^<br/>SyntaxError: EOL while scanning string literal<br/>',NULL,168,NULL,NULL),(233,1,'2013/07/08 20:19:53',4,NULL,NULL,'Bangalore_Xi3-20130708201946','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gstreamer\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gst-plugin-base\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gst-plugin-good\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Unload module Success<br/><br/>','Test Suite Executed',168,NULL,NULL),(234,1,'2013/07/08 20:20:29',4,NULL,NULL,'Bangalore_Xi3-20130708201946','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gstreamer\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gst-plugin-base\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gst-plugin-good\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Unload module Success<br/><br/>','Test Suite Executed',168,NULL,NULL),(235,1,'2013/07/08 21:45:23',4,NULL,NULL,'Bangalore_Xi3-20130708214515','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gstreamer\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','Test Suite Executed',168,NULL,NULL),(236,1,'2013/07/08 21:45:44',4,NULL,NULL,'Bangalore_Xi3-20130708214515','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gstreamer\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Unload module Success<br/><br/>','Test Suite Executed',168,NULL,NULL),(237,1,'2013/07/08 21:47:52',4,NULL,NULL,'Bangalore_Xi3-20130708214515','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gstreamer\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Unload module Success<br/><br/>','Test Suite Executed',168,NULL,NULL),(238,1,'2013/07/08 21:48:27',4,NULL,NULL,'Bangalore_Xi3-20130708214515','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing qttestsuite<br/>Connected to Server!<br/><br/>Qt test module successfully loaded<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_non_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Executing Qt_Test....<br/>{\"Display_option\": \"intelce\", \"Qt_component_type\": \"qt_gfx\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Qt_Test_Execute\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Unload module Success<br/><br/>','Test Suite Executed',135,NULL,NULL),(239,1,'2013/07/08 21:50:50',4,NULL,NULL,'Bangalore_Xi3-20130708214515','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"intelce\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(240,1,'2013/07/09 10:13:26',5,NULL,NULL,'TVM_Xi3_241-20130709101319','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : <br/>details : <br/>Valid URL = <br/>Result of Json Response : <br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(241,1,'2013/07/09 10:39:50',4,NULL,NULL,'Bangalore_Xi3-20130709103945','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>','FAILURE',106,NULL,NULL),(242,0,'2013/07/09 10:40:21',4,NULL,NULL,'Bangalore_Xi3-20130709104012','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.30.62 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,167,NULL,NULL),(243,1,'2013/07/09 10:40:39',4,NULL,NULL,'Bangalore_Xi3-20130709104026','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>','FAILURE',167,NULL,NULL),(244,1,'2013/07/09 10:42:03',4,NULL,NULL,'Bangalore_Xi3-20130709104156','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>','FAILURE',167,NULL,NULL),(245,1,'2013/07/09 10:44:31',4,NULL,NULL,'Bangalore_Xi3-20130709104426','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>','FAILURE',167,NULL,NULL),(246,1,'2013/07/09 10:52:35',4,NULL,NULL,'Bangalore_Xi3-20130709105230','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Valid URL = http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.61:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>','FAILURE',167,NULL,NULL),(247,1,'2013/07/09 10:52:46',5,NULL,NULL,'TVM_Xi3_241-20130709105241','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : <br/>details : <br/>Valid URL = <br/>Result of Json Response : <br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(248,1,'2013/07/09 11:04:12',5,NULL,NULL,'TVM_Xi3_241-20130709105241','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : <br/>details : <br/>Valid URL = <br/>Result of Json Response : <br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(249,1,'2013/07/09 11:04:43',5,NULL,NULL,'TVM_Xi3_241-20130709110437','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : <br/>details : <br/>Valid URL = <br/>Result of Json Response : <br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(250,1,'2013/07/09 11:08:45',4,NULL,NULL,'Bangalore_Xi3-20130709110834','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : FAILURE<br/>details : :<br/>Valid URL = :<br/>Result of Json Response : FAILURE<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(251,1,'2013/07/09 11:10:29',4,NULL,NULL,'Bangalore_Xi3-20130709111022','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : FAILURE<br/>details : :<br/>Valid URL = :<br/>Result of Json Response : FAILURE<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',167,NULL,NULL),(252,1,'2013/07/09 11:10:51',4,NULL,NULL,'Bangalore_Xi3-20130709111029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : FAILURE<br/>details : :<br/>Valid URL = :<br/>Result of Json Response : FAILURE<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',167,NULL,NULL),(253,1,'2013/07/09 11:11:24',4,NULL,NULL,'Bangalore_Xi3-20130709111029','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : FAILURE<br/>details : :<br/>Valid URL = :<br/>Result of Json Response : FAILURE<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',167,NULL,NULL),(254,1,'2013/07/09 11:15:20',5,NULL,NULL,'TVM_Xi3_241-20130709111513','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : <br/>details : <br/>Valid URL = <br/>Result of Json Response : <br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(255,1,'2013/07/09 11:26:14',5,NULL,NULL,'TVM_Xi3_241-20130709111513','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.166:8080/videoStreamInit?recorderId=nulllive=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : <br/>details : <br/>Valid URL = <br/>Result of Json Response : <br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',106,NULL,NULL),(256,0,'2013/07/09 11:44:11',3,NULL,NULL,'Chennai_Xi3-20130709114405','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373350451053.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(257,0,'2013/07/09 11:45:15',3,NULL,NULL,'Chennai_Xi3-20130709114511','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373350515365.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(258,0,'2013/07/09 11:45:25',3,NULL,NULL,'Chennai_Xi3-20130709114511','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  FAILURE<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(259,0,'2013/07/09 11:46:49',3,NULL,NULL,'Chennai_Xi3-20130709114643','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  FAILURE<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(260,0,'2013/07/09 11:47:49',3,NULL,NULL,'Chennai_Xi3-20130709114746','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  FAILURE<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(261,0,'2013/07/09 11:47:56',3,NULL,NULL,'Chennai_Xi3-20130709114746','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  FAILURE<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-30.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-30.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,157,NULL,NULL),(262,0,'2013/07/09 11:48:03',3,NULL,NULL,'Chennai_Xi3-20130709114746','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing qttestsuite<br/>Connected to Server!<br/><br/>Failed to load Qt test module<br/>',NULL,135,NULL,NULL),(263,0,'2013/07/09 11:48:09',3,NULL,NULL,'Chennai_Xi3-20130709114746','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Failed to load Webkit test module<br/>',NULL,54,NULL,NULL),(264,0,'2013/07/09 11:48:15',3,NULL,NULL,'Chennai_Xi3-20130709114746','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373350695447.py\", line 2, in <module><br/>    obj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");<br/>NameError: name \'tdklib\' is not defined<br/>',NULL,91,NULL,NULL),(265,0,'2013/07/09 11:48:22',3,NULL,NULL,'Chennai_Xi3-20130709114746','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  FAILURE<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-4.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-4.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,149,NULL,NULL),(266,0,'2013/07/09 11:49:12',3,NULL,NULL,'Chennai_Xi3-20130709114908','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  FAILURE<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>log-path : <br/>Log Path :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(267,0,'2013/07/09 11:49:52',3,NULL,NULL,'Chennai_Xi3-20130709114948','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373350792034.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(268,0,'2013/07/09 11:55:43',3,NULL,NULL,'Chennai_Xi3-20130709114948','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373351143725.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(269,1,'2013/07/09 11:57:53',4,NULL,NULL,'Bangalore_Xi3-20130709115409','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Pre condition-Json Response received successfully<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : SUCCESS<br/>Result of Player : SUCCESS<br/>Pre condition-SD channel Tuned and played successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=03&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x126c\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x126c&recorderId=T0100190784live=ocap://0x126c<br/>PLAYURL2 = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x126c&recorderId=T0100190784live=ocap://0x126c<br/>result : SUCCESS<br/>Result of Json Response : SUCCESS<br/>SD-SD channel tune response received successfully<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x126c&recorderId=T0100190784live=ocap://0x126c\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : SUCCESS<br/>Result of Player : SUCCESS<br/>SD-SD channel tuned and played successfully<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>','SUCCESS',173,NULL,NULL),(270,0,'2013/07/09 12:00:15',3,NULL,NULL,'Chennai_Xi3-20130709114948','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373351415321.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(271,0,'2013/07/09 12:00:21',3,NULL,NULL,'Chennai_Xi3-20130709114948','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  FAILURE<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : :{<br/>Result.........:{<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=30.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=30.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,156,NULL,NULL),(272,0,'2013/07/09 12:03:39',4,NULL,NULL,'Bangalore_Xi3-20130709120326','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.30.62 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,167,NULL,NULL),(273,1,'2013/07/09 12:03:56',5,NULL,NULL,'TVM_Xi3_241-20130709120348','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : FAILURE<br/>details : :<br/>Valid URL = :<br/>Result of Json Response : FAILURE<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',167,NULL,NULL),(274,0,'2013/07/09 12:09:49',5,NULL,NULL,'TVM_Xi3_241-20130709120938','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>Request URL : http://192.168.160.130:8080/videoStreamInit?recorderId=live=ocap://null<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.130:8080/videoStreamInit?recorderId=live=ocap://null\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://null&recorderId=live=ocap://null<br/>Valid URL = http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://null&recorderId=live=ocap://null<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://null&recorderId=live=ocap://null\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : :{<br/>Result of Player : :{<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,174,NULL,NULL),(275,1,'2013/07/09 12:18:26',3,NULL,NULL,'Chennai_Xi3-20130709114948','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373352506647.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>','FAILURE',146,NULL,NULL),(276,1,'2013/07/09 12:19:51',3,NULL,NULL,'Chennai_Xi3-20130709114948','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373352591284.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>','FAILURE',146,NULL,NULL),(277,1,'2013/07/09 12:22:35',3,NULL,NULL,'Chennai_Xi3-20130709114948','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373352755878.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>','FAILURE',146,NULL,NULL),(278,1,'2013/07/09 12:25:27',3,NULL,NULL,'Chennai_Xi3-20130709114948','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373352927971.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>','FAILURE',146,NULL,NULL),(279,1,'2013/07/09 12:26:40',3,NULL,NULL,'Chennai_Xi3-20130709114948','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373353000823.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>','FAILURE',146,NULL,NULL),(280,1,'2013/07/09 12:31:17',3,NULL,NULL,'Chennai_Xi3-20130709114948','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373353277966.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>','FAILURE',146,NULL,NULL),(281,1,'2013/07/09 12:31:21',3,NULL,NULL,'Chennai_Xi3-20130709114948','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : FAILURE<br/>Result.........FAILURE<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>','FAILURE',154,NULL,NULL),(282,0,'2013/07/09 12:41:43',3,NULL,NULL,'Chennai_Xi3-20130709114948','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/282_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(283,0,'2013/07/09 12:44:03',3,NULL,NULL,'Chennai_Xi3-20130709124359','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/283_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>0<br/>inside for loop<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>2<br/>inside for loop<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>3<br/>inside for loop<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>4<br/>inside for loop<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>5<br/>inside for loop<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>6<br/>inside for loop<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>7<br/>inside for loop<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>8<br/>inside for loop<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>9<br/>inside for loop<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Inside else<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(284,0,'2013/07/09 12:46:23',3,NULL,NULL,'Chennai_Xi3-20130709124359','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,154,NULL,NULL),(285,0,'2013/07/09 12:49:57',3,NULL,NULL,'Chennai_Xi3-20130709124947','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373354397915.py\", line 67<br/>    print \"-----------------------------------------------------------------------------------\"<br/>        ^<br/>IndentationError: expected an indented block<br/>',NULL,146,NULL,NULL),(286,1,'2013/07/09 12:51:28',4,NULL,NULL,'Bangalore_Xi3-20130708214515','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"intelce\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(287,1,'2013/07/09 12:52:20',4,NULL,NULL,'Bangalore_Xi3-20130708214515','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"intelce\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(288,0,'2013/07/09 12:53:05',3,NULL,NULL,'Chennai_Xi3-20130709125302','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/288_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>',NULL,146,NULL,NULL),(289,1,'2013/07/09 12:54:06',4,NULL,NULL,'Bangalore_Xi3-20130709125352','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"directfb\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : <br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(290,0,'2013/07/09 12:54:54',3,NULL,NULL,'Chennai_Xi3-20130709125447','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373354694119.py\", line 53<br/>    print \"Inside if\" urlList[url];<br/>                            ^<br/>SyntaxError: invalid syntax<br/>',NULL,146,NULL,NULL),(291,0,'2013/07/09 12:56:02',3,NULL,NULL,'Chennai_Xi3-20130709125559','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373354762485.py\", line 53<br/>    print \"Inside if\" urlList[url];<br/>                            ^<br/>SyntaxError: invalid syntax<br/>',NULL,146,NULL,NULL),(292,0,'2013/07/09 12:56:47',3,NULL,NULL,'Chennai_Xi3-20130709125644','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373354807899.py\", line 54, in <module><br/>    print  \" [URL ] \" +dvrObj.getURL(url);<br/>  File \"/usr/local/share/pythonLib/dvrlib.py\", line 97, in getURL<br/>    line =self.getLine(recordingId )<br/>  File \"/usr/local/share/pythonLib/dvrlib.py\", line 140, in getLine<br/>    result = [i for i in fh if recordingId in i]<br/>TypeError: \'in <string>\' requires string as left operand, not int<br/>',NULL,146,NULL,NULL),(293,0,'2013/07/09 12:57:50',3,NULL,NULL,'Chennai_Xi3-20130709125746','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/293_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>inside for loop<br/>inside for loop<br/>inside for loop<br/>inside for loop<br/>inside for loop<br/>inside for loop<br/>inside for loop<br/>inside for loop<br/>inside for loop<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(294,0,'2013/07/09 12:58:46',3,NULL,NULL,'Chennai_Xi3-20130709125842','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373354926158.py\", line 54, in <module><br/>    print  \" [URL ] \" +dvrObj.getURL(url);<br/>  File \"/usr/local/share/pythonLib/dvrlib.py\", line 97, in getURL<br/>    line =self.getLine(recordingId )<br/>  File \"/usr/local/share/pythonLib/dvrlib.py\", line 140, in getLine<br/>    result = [i for i in fh if recordingId in i]<br/>TypeError: \'in <string>\' requires string as left operand, not int<br/>',NULL,146,NULL,NULL),(295,0,'2013/07/09 12:59:53',3,NULL,NULL,'Chennai_Xi3-20130709125842','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-15.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,155,NULL,NULL),(296,1,'2013/07/09 13:33:05',4,NULL,NULL,'Bangalore_Xi3-20130709133209','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>','FAILURE',174,NULL,NULL),(297,0,'2013/07/09 13:37:06',3,NULL,NULL,'Chennai_Xi3-20130709125842','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373357226872.py\", line 54, in <module><br/>    print  \" [URL ] \" +dvrObj.getURL(url);<br/>  File \"/usr/local/share/pythonLib/dvrlib.py\", line 97, in getURL<br/>    line =self.getLine(recordingId )<br/>  File \"/usr/local/share/pythonLib/dvrlib.py\", line 140, in getLine<br/>    result = [i for i in fh if recordingId in i]<br/>TypeError: \'in <string>\' requires string as left operand, not int<br/>',NULL,146,NULL,NULL),(298,0,'2013/07/09 13:42:01',3,NULL,NULL,'Chennai_Xi3-20130709134151','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373357521526.py\", line 53<br/>    print \"Inside if\" urlList[url];<br/>                            ^<br/>SyntaxError: invalid syntax<br/>',NULL,146,NULL,NULL),(299,0,'2013/07/09 13:42:42',3,NULL,NULL,'Chennai_Xi3-20130709134238','  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373357562802.py\", line 53<br/>    print \"Inside if\" urlList[url];<br/>                            ^<br/>SyntaxError: invalid syntax<br/>',NULL,146,NULL,NULL),(300,0,'2013/07/09 13:43:13',3,NULL,NULL,'Chennai_Xi3-20130709134309','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/300_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(301,1,'2013/07/09 13:43:15',3,NULL,NULL,'Chennai_Xi3-20130709134300','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_BusCall....<br/>{\"owner_name\": \"MFRLib\", \"jsonrpc\": \"2.0\", \"data_type\": \"a\", \"newState\": 0, \"method\": \"TestMgr_IARMBUS_BusCall\", \"method_name\": \"GetManufacturerData\", \"mfr_param_type\": 0, \"set_timeout\": 1, \"id\": \"2\", \"resource_type\": 0}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: RPC method invoked successfully<br/>NULL<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',96,NULL,NULL),(302,0,'2013/07/09 13:44:00',3,NULL,NULL,'Chennai_Xi3-20130709134309','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/302_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(303,1,'2013/07/09 13:45:16',3,NULL,NULL,'Chennai_Xi3-20130709134300','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_BusCall....<br/>{\"owner_name\": \"MFRLib\", \"jsonrpc\": \"2.0\", \"data_type\": \"a\", \"newState\": 0, \"method\": \"TestMgr_IARMBUS_BusCall\", \"method_name\": \"GetManufacturerData\", \"mfr_param_type\": 0, \"set_timeout\": 1, \"id\": \"2\", \"resource_type\": 0}<br/>result : SUCCESS<br/>details : NULL::Pace plc<br/>SUCCESS: RPC method invoked successfully<br/>NULL::Pace plc<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',96,NULL,NULL),(304,0,'2013/07/09 13:45:26',3,NULL,NULL,'Chennai_Xi3-20130709134523','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/304_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(305,0,'2013/07/09 13:46:07',3,NULL,NULL,'Chennai_Xi3-20130709134604','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373357767612.py\", line 60, in <module><br/>    tdkTestObj.executeTestCase();<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 160, in executeTestCase<br/>    tcpClient.send(self.jsonMsgValue)<br/>socket.error: [Errno 32] Broken pipe<br/>',NULL,146,NULL,NULL),(306,0,'2013/07/09 13:47:28',3,NULL,NULL,'Chennai_Xi3-20130709134604','WARNING:tftpy:Timeout waiting for traffic, retrying...<br/>ERROR:tftpy:Timed-out waiting for traffic<br/>WARNING:tftpy:resending last packet<br/>WARNING:tftpy:Resending packet RRQ packet: filename = /Newrecmod.txt mode = octet on sessions <tftpy.TftpStates.TftpStateSentRRQ object at 0x9f7c5ec><br/>Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373357848469.py\", line 41, in <module><br/>    dvrObj = tdkTestObj.getDVRDetails(logpath);<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 324, in getDVRDetails<br/>    dvrObj = NULL<br/>NameError: global name \'NULL\' is not defined<br/>',NULL,146,NULL,NULL),(307,0,'2013/07/09 13:48:41',3,NULL,NULL,'Chennai_Xi3-20130709134836','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/307_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(308,0,'2013/07/09 13:49:33',3,NULL,NULL,'Chennai_Xi3-20130709134836','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/308_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(309,1,'2013/07/09 13:51:01',3,NULL,NULL,'Chennai_Xi3-20130709135053','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_BusCall....<br/>{\"owner_name\": \"MFRLib\", \"jsonrpc\": \"2.0\", \"data_type\": \"a\", \"newState\": 0, \"method\": \"TestMgr_IARMBUS_BusCall\", \"method_name\": \"GetManufacturerData\", \"mfr_param_type\": 0, \"set_timeout\": 1, \"id\": \"2\", \"resource_type\": 0}<br/>result : SUCCESS<br/>details : NULL::Pace plc<br/>SUCCESS: RPC method invoked successfully<br/>Manufaturer Name:<br/>NULL::Pace plc<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',96,NULL,NULL),(310,1,'2013/07/09 13:51:30',3,NULL,NULL,'Chennai_Xi3-20130709135053','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_BusCall....<br/>{\"owner_name\": \"MFRLib\", \"jsonrpc\": \"2.0\", \"data_type\": \"a\", \"newState\": 0, \"method\": \"TestMgr_IARMBUS_BusCall\", \"method_name\": \"GetManufacturerData\", \"mfr_param_type\": 0, \"set_timeout\": 1, \"id\": \"2\", \"resource_type\": 0}<br/>result : SUCCESS<br/>details : Pace plc<br/>SUCCESS: RPC method invoked successfully<br/>Manufaturer Name:<br/>Pace plc<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',96,NULL,NULL),(311,0,'2013/07/09 13:51:39',4,NULL,NULL,'Bangalore_Xi3-20130709135131',NULL,NULL,174,NULL,NULL),(312,0,'2013/07/09 14:06:35',5,NULL,NULL,'TVM_Xi3_241-20130709140622','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testm3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testm3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.160.241<br/>data = {u\'jsonrpc\': u\'2.0\', u\'ocapid\': u\'null\', u\'gatewayip\': u\'192.168.160.130\', u\'recorderid\': u\'null\', u\'audioformat\': u\'ac3\', u\'channeltype\': u\'SD\', u\'videoformat\': u\'mpeg2\'} <br/>JSON_PYTHON data[\'recorderid\']: null <br/>Request URL : http://192.168.160.130:8080/videoStreamInit?recorderId=nulllive=ocap://null<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.130:8080/videoStreamInit?recorderId=nulllive=ocap://null\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://null&recorderId=nulllive=ocap://null<br/>Valid URL = http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://null&recorderId=nulllive=ocap://null<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://null&recorderId=nulllive=ocap://null\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : :{<br/>Result of Player : :{<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testm3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,174,NULL,NULL),(313,0,'2013/07/09 14:07:39',1,NULL,NULL,'TVM_Test_Machine-20130709140734','192.168.160.166<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testm3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.160.166 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,174,NULL,NULL),(314,0,'2013/07/09 14:14:54',4,NULL,NULL,'Bangalore_Xi3-20130709141446','Traceback (most recent call last):<br/>  File \"/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/script_1373359494363.py\", line 9, in <module><br/>    obj.configureTestCase(\'http://192.168.161.200:8080/rdk-testtool-m3\',\'/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/\',314,ip,port,\'E2E_LinearTV_TuneSD_01\');<br/>  File \"/usr/local/share/pythonLib/tdklib.py\", line 459, in configureTestCase<br/>    self.result = tcpClient.recv(1048)<br/>socket.error: [Errno 104] Connection reset by peer<br/>',NULL,174,NULL,NULL),(315,0,'2013/07/09 14:15:46',3,NULL,NULL,'Chennai_Xi3-20130709141540','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.27.157 is up and Test Agent is running...<br/>************************<br/><br/>[LIB LOAD STATUS]  :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Load module failed<br/>',NULL,97,NULL,NULL),(316,1,'2013/07/09 14:16:46',3,NULL,NULL,'Chennai_Xi3-20130709141619','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_BusCall....<br/>{\"owner_name\": \"MFRLib\", \"mfr_param_type\": 1, \"data_type\": \"a\", \"newState\": 0, \"method\": \"TestMgr_IARMBUS_BusCall\", \"method_name\": \"GetManufacturerData\", \"jsonrpc\": \"2.0\", \"set_timeout\": 1, \"id\": \"2\", \"resource_type\": 0}<br/>result : SUCCESS<br/>details : E0B7B1<br/>SUCCESS: RPC method invoked successfully<br/>STB Manufature-Organizationally Unique Identifier:<br/>E0B7B1<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','SUCCESS',97,NULL,NULL),(317,0,'2013/07/09 14:22:12',5,NULL,NULL,'TVM_Xi3_241-20130709142204','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=09&stbIp=192.168.160.241<br/>data = {u\'jsonrpc\': u\'2.0\', u\'ocapid\': u\'0x126a\', u\'gatewayip\': u\'192.168.160.130\', u\'recorderid\': u\'T0100193952\', u\'audioformat\': u\'ac3\', u\'channeltype\': u\'HD\', u\'videoformat\': u\'h.264\'} <br/>JSON_PYTHON data[\'recorderid\']: T0100193952 <br/>Request URL : http://192.168.160.130:8080/videoStreamInit?recorderId=T0100193952live=ocap://0x126a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.130:8080/videoStreamInit?recorderId=T0100193952live=ocap://0x126a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://0x126a&recorderId=T0100193952live=ocap://0x126a<br/>Valid URL = http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://0x126a&recorderId=T0100193952live=ocap://0x126a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://0x126a&recorderId=T0100193952live=ocap://0x126a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : :{<br/>Result of Player : :{<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,174,NULL,NULL),(318,1,'2013/07/09 14:28:22',3,NULL,NULL,'Chennai_Xi3-20130709142811','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  SUCCESS<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS :Application successfully initialized with IARMBUS library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS :Application successfully connected with IARMBUS <br/>Executing IARMBUS_BusCall....<br/>{\"owner_name\": \"MFRLib\", \"mfr_param_type\": 0, \"data_type\": \"a\", \"newState\": 0, \"method\": \"TestMgr_IARMBUS_BusCall\", \"method_name\": \"GetManufacturerData\", \"jsonrpc\": \"2.0\", \"set_timeout\": 1, \"id\": \"2\", \"resource_type\": 0}<br/>result : SUCCESS<br/>details : Pace plc<br/>SUCCESS: RPC method invoked successfully<br/>STB Manufature name:<br/>Pace plc<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARMBus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',96,NULL,NULL),(319,1,'2013/07/09 14:32:06',5,NULL,NULL,'TVM_Xi3_241-20130709143158','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing iarmbus<br/>Connected to Server!<br/><br/>[LIB LOAD STATUS]  :  Load Module Success\\n<br/>Executing IARMBUS_Init....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Init\",\"Process_name\":\"agent\"}<br/>result : FAILURE<br/>details : INVALID_PARAM<br/>SUCCESS: Application is initialized with IARM Bus library<br/>Executing IARMBUS_Connect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Connect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application is successfully connected with IARMBUS<br/>Executing IARMBUS_IsConnected....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_IsConnected\",\"member_name\":\"agent\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: API-Is_Connected success<br/>Executing IARMBUS_DisConnect....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_IARMBUS_Disconnect\"}<br/>result : SUCCESS<br/>details : NULL<br/>SUCCESS: Application successfully disconnected from IARM Bus<br/>[TEST EXECUTION RESULT] : SUCCESS<br/>Unload module Success<br/><br/>','FAILURE',33,NULL,NULL),(320,1,'2013/07/09 14:36:55',4,NULL,NULL,'Bangalore_Xi3-20130709125352','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"directfb\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(321,1,'2013/07/09 14:37:50',4,NULL,NULL,'Bangalore_Xi3-20130709125352','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"directfb\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(322,0,'2013/07/09 14:40:50',3,NULL,NULL,'Chennai_Xi3-20130709144045','192.168.27.157<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.27.157 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  SUCCESS<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.27.157<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/322_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(323,0,'2013/07/09 14:41:42',3,NULL,NULL,'Chennai_Xi3-20130709144136',NULL,NULL,146,NULL,NULL),(324,1,'2013/07/09 14:45:06',4,NULL,NULL,'Bangalore_Xi3-20130709144459','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>data = {u\'jsonrpc\': u\'2.0\', u\'ocapid\': u\'0x1265\', u\'gatewayip\': u\'192.168.30.162\', u\'recorderid\': u\'T0100190784\', u\'audioformat\': u\'ac3\', u\'channeltype\': u\'SD\', u\'videoformat\': u\'mpeg2\'} <br/>JSON_PYTHON data[\'recorderid\']: T0100190784 <br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : <br/>Result of Player : <br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>','FAILURE',106,NULL,NULL),(325,0,'2013/07/09 14:47:05',4,NULL,NULL,'Bangalore_Xi3-20130709144655','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>************************<br/>Error while Connecting to Server ...Please ensure the Box 192.168.30.62 is up and Test Agent is running...<br/>************************<br/><br/>LinearTV module loading status :  Errot in socket.. Please check STB is up and agent is running inside it<br/>Failed to load LinearTV module<br/>',NULL,107,NULL,NULL),(326,1,'2013/07/09 14:47:24',4,NULL,NULL,'Bangalore_Xi3-20130709144719','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=02&stbIp=192.168.30.62<br/>data = {u\'jsonrpc\': u\'2.0\', u\'ocapid\': u\'0x1022\', u\'gatewayip\': u\'192.168.30.162\', u\'recorderid\': u\'T0100190784\', u\'audioformat\': u\'ac3\', u\'channeltype\': u\'HD\', u\'videoformat\': u\'mpeg4\'} <br/>JSON_PYTHON data[\'recorderid\']: T0100190784 <br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1022<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1022\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1022&recorderId=T0100190784live=ocap://0x1022<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1022&recorderId=T0100190784live=ocap://0x1022<br/>Result of Json Response : SUCCESS<br/>Json Response is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1022&recorderId=T0100190784live=ocap://0x1022\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to Tune and Play the HD channel<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>','FAILURE',107,NULL,NULL),(327,1,'2013/07/09 14:48:32',4,NULL,NULL,'Bangalore_Xi3-20130709144822','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.61:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : FAILURE<br/>details : :<br/>Valid URL = :<br/>Result of Json Response : FAILURE<br/>Json response parameter is Failed<br/>Unload module Success<br/><br/>','FAILURE',167,NULL,NULL),(328,1,'2013/07/09 14:49:45',4,NULL,NULL,'Bangalore_Xi3-20130709144931','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>','FAILURE',167,NULL,NULL),(329,1,'2013/07/09 14:52:03',4,NULL,NULL,'Bangalore_Xi3-20130709145154','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>','FAILURE',167,NULL,NULL),(330,1,'2013/07/09 15:00:09',4,NULL,NULL,'Bangalore_Xi3-20130709125352','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"directfb\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(331,1,'2013/07/09 15:01:06',4,NULL,NULL,'Bangalore_Xi3-20130709125352','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing webkittestsuite<br/>Connected to Server!<br/><br/>Webkit test module successfully loaded<br/>Executing Webkit_Test....<br/>{\"id\":\"2\",\"jsonrpc\":\"2.0\",\"method\":\"TestMgr_Webkit_Test_Execute\",\"Display_option\":\"directfb\"}<br/>result : Test Suite Executed<br/>Test Suite Executed<br/>log-path : /opensourcecomptest/logs/webkit/TestSummary.log<br/>Unload module Success<br/><br/>','Test Suite Executed',54,NULL,NULL),(332,1,'2013/07/09 15:01:21',4,NULL,NULL,'Bangalore_Xi3-20130709125352','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gstreamer\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gstreamer/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gstreamer/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','Test Suite Executed',168,NULL,NULL),(333,1,'2013/07/09 15:06:54',4,NULL,NULL,'Bangalore_Xi3-20130709150647','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gst-plugin-base\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-base/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-base/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','Test Suite Executed',170,NULL,NULL),(334,1,'2013/07/09 15:09:01',4,NULL,NULL,'Bangalore_Xi3-20130709150647','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gst-plugin-base\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-base/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-base/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','Test Suite Executed',170,NULL,NULL),(335,1,'2013/07/09 15:19:16',4,NULL,NULL,'Bangalore_Xi3-20130709151909','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gst-plugin-good\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>Gstreamer Test Results : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-good/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','Test Suite Executed',172,NULL,NULL),(336,1,'2013/07/09 15:22:05',4,NULL,NULL,'Bangalore_Xi3-20130709151909','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gst-plugin-base\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-base/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-base/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','Test Suite Executed',170,NULL,NULL),(337,0,'2013/07/09 15:34:05',4,NULL,NULL,'Bangalore_Xi3-20130709153401','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/337_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(338,0,'2013/07/09 15:39:18',4,NULL,NULL,'Bangalore_Xi3-20130709153914','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/338_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Inside else<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(339,0,'2013/07/09 15:42:16',4,NULL,NULL,'Bangalore_Xi3-20130709153914','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/339_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Inside else<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(340,0,'2013/07/09 15:52:12',4,NULL,NULL,'Bangalore_Xi3-20130709153914','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/340_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Inside else<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(341,0,'2013/07/09 15:53:47',4,NULL,NULL,'Bangalore_Xi3-20130709153914','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-30.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=-30.000000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,157,NULL,NULL),(342,0,'2013/07/09 15:56:37',4,NULL,NULL,'Bangalore_Xi3-20130709153914','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/342_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Inside else<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(343,1,'2013/07/09 16:00:46',4,NULL,NULL,'Bangalore_Xi3-20130709150508','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>data = {u\'jsonrpc\': u\'2.0\', u\'ocapid\': u\'0x1265\', u\'gatewayip\': u\'192.168.30.162\', u\'recorderid\': u\'T0100190784\', u\'audioformat\': u\'ac3\', u\'channeltype\': u\'SD\', u\'videoformat\': u\'mpeg2\'} <br/>JSON_PYTHON data[\'recorderid\']: T0100190784 <br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>','FAILURE',106,NULL,NULL),(344,1,'2013/07/09 16:02:20',4,NULL,NULL,'Bangalore_Xi3-20130709160207','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=02&stbIp=192.168.30.62<br/>data = {u\'jsonrpc\': u\'2.0\', u\'ocapid\': u\'0x1269\', u\'gatewayip\': u\'192.168.30.162\', u\'recorderid\': u\'T0100190784\', u\'audioformat\': u\'ac3\', u\'channeltype\': u\'HD\', u\'videoformat\': u\'mpeg4\'} <br/>JSON_PYTHON data[\'recorderid\']: T0100190784 <br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Result of Json Response : SUCCESS<br/>Json Response is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : <br/>Result of Player : <br/>Failed to Tune and Play the HD channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>','FAILURE',107,NULL,NULL),(345,0,'2013/07/09 16:02:38',6,NULL,NULL,'Bangalore_XG1-20130709160232','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing mediastreamer<br/>Connected to Server!<br/><br/>Mediaastreamer module loading status :Load Module Failed<br/>Failed to load mediastreamer module<br/>',NULL,171,NULL,NULL),(346,0,'2013/07/09 16:03:05',4,NULL,NULL,'Bangalore_Xi3-20130709153914','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=02&stbIp=192.168.30.62<br/>RecordURL : http://192.168.161.56:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.161.56:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>----------------------------URL List-------------------------------------------------------<br/>0<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>1<br/>inside for loop<br/>http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950<br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950&play_speed=0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,147,NULL,NULL),(347,1,'2013/07/09 16:09:16',4,NULL,NULL,'Bangalore_Xi3-20130709160348','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=02&stbIp=192.168.30.62<br/>data = {u\'jsonrpc\': u\'2.0\', u\'ocapid\': u\'0x1269\', u\'gatewayip\': u\'192.168.30.162\', u\'recorderid\': u\'T0100190784\', u\'audioformat\': u\'ac3\', u\'channeltype\': u\'HD\', u\'videoformat\': u\'mpeg4\'} <br/>JSON_PYTHON data[\'recorderid\']: T0100190784 <br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269<br/>Result of Json Response : SUCCESS<br/>Json Response is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1269&recorderId=T0100190784live=ocap://0x1269\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to Tune and Play the HD channel<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>','FAILURE',107,NULL,NULL),(348,1,'2013/07/09 16:11:12',4,NULL,NULL,'Bangalore_Xi3-20130709161108','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>data = {u\'jsonrpc\': u\'2.0\', u\'ocapid\': u\'0x1265\', u\'gatewayip\': u\'192.168.30.162\', u\'recorderid\': u\'T0100190784\', u\'audioformat\': u\'ac3\', u\'channeltype\': u\'SD\', u\'videoformat\': u\'mpeg2\'} <br/>JSON_PYTHON data[\'recorderid\']: T0100190784 <br/>Request URL : http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Valid URL = http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/tuner?ocap_locator=ocap://0x1265&recorderId=T0100190784live=ocap://0x1265\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : FAILURE<br/>Result of Player : FAILURE<br/>Failed to tune and play SD Channel<br/>log-path : /mplayerlog.txt<br/>Log path : /mplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>','FAILURE',106,NULL,NULL),(349,0,'2013/07/09 16:14:09',6,NULL,NULL,'Bangalore_XG1-20130709161400','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing mediastreamer<br/>Connected to Server!<br/><br/>Mediaastreamer module loading status :Load Module Failed<br/>Failed to load mediastreamer module<br/>',NULL,171,NULL,NULL),(350,0,'2013/07/09 16:14:15',4,NULL,NULL,'Bangalore_Xi3-20130709153914','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/350_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Inside else<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(351,0,'2013/07/09 16:17:06',4,NULL,NULL,'Bangalore_Xi3-20130709153914','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/351_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : /e2emplayerlog.txt<br/>Log ath :/e2emplayerlog.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Inside else<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(352,0,'2013/07/09 16:19:57',4,NULL,NULL,'Bangalore_Xi3-20130709153914','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing e2e<br/>Connected to Server!<br/><br/>E2E module loading status :  Load Module Success\\n<br/>E2E module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=01&stbIp=192.168.30.62<br/>RecordURL : http://192.168.30.162:8080/vldms/info/recordingurls<br/>Executing E2E_Get_Record_URLS....<br/>{\"RecordURL\": \"http://192.168.30.162:8080/vldms/info/recordingurls\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_GetRecURLS\"}<br/>result : th<br/>Result.........th<br/>log-path : /Newrecmod.txt<br/>Log Path :/Newrecmod.txt<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>Error!!! Log Transfer Failed..<br/>-----------------------------------------------------------------------------------<br/>[RECORDED_URL_LOG_PATH : ] /Newrecmod.txt<br/>[LOCAL_PATH : ] /opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/fileStore/352_RecordedUrlsLog.txt<br/>----------------------------URL List-------------------------------------------------------<br/>10<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299092490</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299126180</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299363165</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299616648</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299739767</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373299925698</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300221720</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300529213</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373300822875</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>inside for loop<br/>http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : <br/>Executing E2E_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.30.162:8080/vldms/dvr?rec_id=1373301332181</code><br />DTCP/IP URL : &play_speed=-0.500000&time_pos=8000\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2EStub_PlayURL\"}<br/>log-path : <br/>Log ath :<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>Inside else<br/>-----------------------------------------------------------------------------------<br/>-------------------------------END----------------------------------------------------<br/>',NULL,146,NULL,NULL),(353,1,'2013/07/09 16:23:20',4,NULL,NULL,'Bangalore_Xi3-20130709162311','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gst-plugin-base\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-base/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-base/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','Test Suite Executed',170,NULL,NULL),(354,0,'2013/07/09 16:53:04',5,NULL,NULL,'TVM_Xi3_241-20130709165256','192.168.160.241<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.160.241 Box for testing lineartv<br/>Connected to Server!<br/><br/>LinearTV module loading status :  Load Module Success\\n<br/>LinearTV module loaded successfully<br/>url for streaming WS :http://192.168.161.200:8080/rdk-testtool-m3/primitiveTest/getStreamDetails?idVal=09&stbIp=192.168.160.241<br/>data = {u\'jsonrpc\': u\'2.0\', u\'ocapid\': u\'0x126a\', u\'gatewayip\': u\'192.168.160.130\', u\'recorderid\': u\'T0100193952\', u\'audioformat\': u\'ac3\', u\'channeltype\': u\'HD\', u\'videoformat\': u\'h.264\'} <br/>JSON_PYTHON data[\'recorderid\']: T0100193952 <br/>Request URL : http://192.168.160.130:8080/videoStreamInit?recorderId=T0100193952live=ocap://0x126a<br/>Executing E2E_LinearTV_URL....<br/>{\"Validurl\": \"http://192.168.160.130:8080/videoStreamInit?recorderId=T0100193952live=ocap://0x126a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_GetURL\"}<br/>result : SUCCESS<br/>details : http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://0x126a&recorderId=T0100193952live=ocap://0x126a<br/>Valid URL = http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://0x126a&recorderId=T0100193952live=ocap://0x126a<br/>Result of Json Response : SUCCESS<br/>Json Response Parameter is success<br/>Executing E2E_LinearTV_Play_URL....<br/>{\"videoStreamURL\": \"http://192.168.160.130:8080/vldms/tuner?ocap_locator=ocap://0x126a&recorderId=T0100193952live=ocap://0x126a\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_E2ELinearTV_PlayURL\"}<br/>result : :{<br/>Result of Player : :{<br/>Failed to tune and play SD Channel<br/>log-path : <br/>Log path : <br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Error!!! Log Transfer Failed..<br/>',NULL,174,NULL,NULL),(355,0,'2013/07/09 16:57:23',6,NULL,NULL,'Bangalore_XG1-20130709165706','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing mediastreamer<br/>Connected to Server!<br/><br/>Mediaastreamer module loading status :Load Module Failed<br/>Failed to load mediastreamer module<br/>',NULL,171,NULL,NULL),(356,0,'2013/07/09 16:58:30',6,NULL,NULL,'Bangalore_XG1-20130709165815','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing mediastreamer<br/>Connected to Server!<br/><br/>Mediaastreamer module loading status :Load Module Failed<br/>Failed to load mediastreamer module<br/>',NULL,171,NULL,NULL),(357,1,'2013/07/09 17:03:47',4,NULL,NULL,'Bangalore_Xi3-20130709170317','192.168.30.62<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.62 Box for testing gstreamertestsuite<br/>Connected to Server!<br/><br/>Gstreamer test module successfully loaded<br/>Executing Gstreamer_Test....<br/>{\"gstreamer_component_type\": \"gstreamer\", \"jsonrpc\": \"2.0\", \"id\": \"2\", \"method\": \"TestMgr_Gstreamer_Test_Execute\"}<br/>result : Test Suite Executed<br/>[TEST EXECUTION RESULT] : Test Suite Executed<br/>log-path : /opensourcecomptest/logs/gst-plugin-base/TestSummary.log<br/>Log Path :/opensourcecomptest/logs/gst-plugin-base/TestSummary.log<br/>/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/logs/<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Connection Error!!! Log Transfer Failed..<br/>Unload module Success<br/><br/>','Test Suite Executed',168,NULL,NULL),(358,0,'2013/07/09 17:09:13',6,NULL,NULL,'Bangalore_XG1-20130709170818','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing mediastreamer<br/>Connected to Server!<br/><br/>Mediaastreamer module loading status :Load Module Failed<br/>Failed to load mediastreamer module<br/>',NULL,171,NULL,NULL),(359,0,'2013/07/09 17:10:47',6,NULL,NULL,'Bangalore_XG1-20130709170818','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing mediastreamer<br/>Connected to Server!<br/><br/>Mediaastreamer module loading status :Load Module Failed<br/>Failed to load mediastreamer module<br/>',NULL,171,NULL,NULL),(360,0,'2013/07/09 17:17:06',6,NULL,NULL,'Bangalore_XG1-20130709170818','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing mediastreamer<br/>Connected to Server!<br/><br/>Mediaastreamer module loading status :Load Module Failed<br/>Failed to load mediastreamer module<br/>',NULL,171,NULL,NULL),(361,0,'2013/07/09 17:27:03',6,NULL,NULL,'Bangalore_XG1-20130709172654','192.168.30.162<br/>8087<br/>realPath=/opt/comcast/software/tomcat/current/webapps/rdk-testtool-m3/<br/>Connected to 192.168.30.162 Box for testing mediastreamer<br/>Connected to Server!<br/><br/>Mediaastreamer module loading status :Load Module Failed<br/>Failed to load mediastreamer module<br/>',NULL,171,NULL,NULL);
/*!40000 ALTER TABLE `execution` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `execution_result`
--

DROP TABLE IF EXISTS `execution_result`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `execution_result` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `actual_result` varchar(255) DEFAULT NULL,
  `expected_result` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `execution_result`
--

LOCK TABLES `execution_result` WRITE;
/*!40000 ALTER TABLE `execution_result` DISABLE KEYS */;
/*!40000 ALTER TABLE `execution_result` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `function`
--

DROP TABLE IF EXISTS `function`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `function` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `module_id` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK524F73D86DEEED2F` (`module_id`),
  CONSTRAINT `FK524F73D86DEEED2F` FOREIGN KEY (`module_id`) REFERENCES `module` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `function`
--

LOCK TABLES `function` WRITE;
/*!40000 ALTER TABLE `function` DISABLE KEYS */;
INSERT INTO `function` VALUES (1,0,1,'play'),(2,0,1,'TuneIt'),(17,0,7,'TestMgr_E2ELinearTV_GetURL'),(18,0,8,'TestMgr_IARMBUS_Init'),(19,0,8,'TestMgr_IARMBUS_Connect'),(20,0,8,'TestMgr_IARMBUS_Disconnect'),(21,0,8,'TestMgr_IARMBUS_Term'),(22,0,8,'TestMgr_IARMBUS_BusCall'),(23,0,7,'TestMgr_E2ELinearTV_PlayURL'),(24,0,8,'TestMgr_IARMBUS_RegisterCall'),(25,0,8,'TestMgr_IARMBUS_RequestResource'),(26,0,8,'TestMgr_IARMBUS_ReleaseResource'),(27,0,3,'TestMgr_Qt_Graphics_Test_Execute'),(28,0,3,'TestMgr_Qt_Non_Graphics_Test_Execute'),(29,0,8,'TestMgr_IARMBUS_BroadcastEvent'),(30,0,8,'TestMgr_IARMBUS_InvokeSecondApplication'),(31,0,8,'TestMgr_IARMBUS_RegisterEventHandler'),(32,0,8,'TestMgr_IARMBUS_UnRegisterEventHandler'),(36,0,9,'TestMgr_Webkit_Test_Execute'),(37,0,8,'TestMgr_IARMBUS_IsConnected'),(38,0,8,'TestMgr_IARMBUS_RegisterEvent'),(39,0,3,'TestMgr_Qt_Test_Execute'),(40,0,8,'TestMgr_IARMBUS_GetContext'),(41,0,8,'TestMgr_IARMBUS_GetLastReceivedEventDetails'),(60,0,17,'TestMgr_E2EStub_GetRecURLS'),(61,0,17,'TestMgr_E2EStub_PlayURL'),(62,0,18,'TestMgr_GStreamer_Test_Execute'),(63,0,19,'TestMgr_DS_Sample'),(64,0,19,'TestMgr_DS_FP_setColor'),(65,0,19,'TestMgr_DS_managerInitialize'),(66,0,18,'TestMgr_Gstreamer_Test_Execute'),(67,0,21,'TestMgr_MediaStreamer_LiveTune');
/*!40000 ALTER TABLE `function` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `module`
--

DROP TABLE IF EXISTS `module`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `module` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `rdk_version` varchar(255) NOT NULL,
  `test_group` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `module`
--

LOCK TABLES `module` WRITE;
/*!40000 ALTER TABLE `module` DISABLE KEYS */;
INSERT INTO `module` VALUES (1,0,'Ocap','1.2','E2E'),(3,0,'Qt','1.2','OpenSource'),(7,0,'LinearTV','1.2','E2E'),(8,0,'IARMBUS ','1.2','Component'),(9,0,'webkit','1.2','OpenSource'),(16,0,'QTTEST','1.2','OpenSource'),(17,0,'End-to-end','1.2','E2E'),(18,0,'Gstreamer','1.2','OpenSource'),(19,0,'DeviceSettings','1.2','Component'),(21,0,'Mediastreamer','1.2','Component');
/*!40000 ALTER TABLE `module` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `parameter`
--

DROP TABLE IF EXISTS `parameter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameter` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `parameter_type_id` bigint(20) NOT NULL,
  `primitive_test_id` bigint(20) DEFAULT NULL,
  `value` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK747EB3A9C5F1CB98` (`parameter_type_id`),
  KEY `FK747EB3A967097214` (`primitive_test_id`),
  CONSTRAINT `FK747EB3A967097214` FOREIGN KEY (`primitive_test_id`) REFERENCES `primitive_test` (`id`),
  CONSTRAINT `FK747EB3A9C5F1CB98` FOREIGN KEY (`parameter_type_id`) REFERENCES `parameter_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=282 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameter`
--

LOCK TABLES `parameter` WRITE;
/*!40000 ALTER TABLE `parameter` DISABLE KEYS */;
INSERT INTO `parameter` VALUES (9,1,20,4,'agent'),(16,1,27,9,'ReleaseOwnership'),(96,1,35,18,'Daemon'),(97,1,34,18,'1'),(98,1,39,18,'1'),(99,1,36,18,'BUS_DAEMON'),(100,1,40,18,'0'),(101,1,38,18,'1'),(102,1,37,18,'1'),(139,1,29,11,'1'),(140,1,30,12,'1'),(147,1,44,22,'Daemon'),(148,1,43,22,'0'),(149,1,45,23,'0'),(150,1,46,23,'Daemon'),(152,1,49,25,'agent'),(154,1,32,20,'http:url'),(163,1,51,27,'2'),(172,1,42,21,'/IARMBUS_exes/tst_iarmbus'),(200,1,63,38,'http://'),(203,1,64,40,'http://'),(205,1,4,43,'5'),(206,1,3,43,'oopiu'),(207,1,5,43,'5'),(220,1,41,19,''),(247,1,4,46,'5'),(248,1,3,46,'5'),(249,1,5,46,'5'),(254,1,66,42,'text'),(255,1,67,42,'0'),(268,1,23,8,'a'),(269,1,22,8,'a'),(270,1,68,8,'0'),(271,1,25,8,'0'),(272,1,21,8,'a'),(273,1,26,8,'0'),(274,1,24,8,'1'),(276,1,69,41,'gstreamer'),(278,1,71,48,'0x1'),(279,1,48,26,'directfb'),(280,1,53,28,'eglnullws'),(281,1,52,28,'');
/*!40000 ALTER TABLE `parameter` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `parameter_type`
--

DROP TABLE IF EXISTS `parameter_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameter_type` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `function_id` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `parameter_type_enum` varchar(255) NOT NULL,
  `range_val` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK438D7610F773FC6F` (`function_id`),
  CONSTRAINT `FK438D7610F773FC6F` FOREIGN KEY (`function_id`) REFERENCES `function` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameter_type`
--

LOCK TABLES `parameter_type` WRITE;
/*!40000 ALTER TABLE `parameter_type` DISABLE KEYS */;
INSERT INTO `parameter_type` VALUES (1,0,1,'locator','INTEGER','0-5'),(2,0,1,'frequency','STRING','0-100'),(3,0,2,'frequency','STRING','0-1000'),(4,0,2,'channel','INTEGER','0-1000'),(5,0,2,'modulation','INTEGER','0-1000'),(20,0,18,'Process_name','STRING','A-Z'),(21,0,22,'owner_name','STRING','A-Z'),(22,0,22,'method_name','STRING','A-Z'),(23,0,22,'data_type','STRING','A-Z'),(24,0,22,'set_timeout','INTEGER','1-65535'),(25,0,22,'newState','INTEGER','0-2'),(26,0,22,'resource_type','INTEGER','0-7'),(27,0,24,'owner_name','STRING','A-Z'),(29,0,25,'resource_type','INTEGER','0-7'),(30,0,26,'resource_type','INTEGER','0-7'),(31,0,27,'Display_option','STRING','directfb (or) eglnullws'),(32,0,23,'videoStreamURL','STRING','A-Z'),(34,0,29,'event_id','INTEGER','0-2'),(35,0,29,'owner_name','STRING','A-Z'),(36,0,29,'data_type','STRING','A-Z'),(37,0,29,'keyType','INTEGER','1-65535'),(38,0,29,'keyCode','INTEGER','1-65535'),(39,0,29,'newState','INTEGER','0-2'),(40,0,29,'resource_type','INTEGER','0-7'),(41,0,17,'Validurl','STRING','A-Z'),(42,0,30,'appname','STRING','A-Z'),(43,0,31,'event_id','INTEGER','0-2'),(44,0,31,'owner_name','STRING','A-Z'),(45,0,32,'event_id','INTEGER','0-2'),(46,0,32,'owner_name','STRING','A-Z'),(48,0,36,'Display_option','STRING','directfb (or) eglnullws'),(49,0,37,'member_name','STRING','A-Z'),(50,0,27,'Component_choice','STRING','qt_non_gfx or qt_gfx'),(51,0,38,'max_event','INTEGER','0-2'),(52,0,39,'Qt_component_type','STRING','qt_non_gfx or qt_gfx'),(53,0,39,'Display_option','STRING','directfb (or) eglnullws'),(63,0,60,'RecordURL','STRING','A-Z'),(64,0,61,'videoStreamURL','STRING','A-Z'),(66,0,64,'indicator_name','STRING','A-Z'),(67,0,64,'color','INTEGER','0-3'),(68,0,22,'mfr_param_type','INTEGER','0-9'),(69,0,66,'gstreamer_component_type','STRING','gstreamer (or) gst-plugin-base (or) gst-plugin-good'),(71,0,67,'ocapId','STRING','A-Z');
/*!40000 ALTER TABLE `parameter_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `primitive_test`
--

DROP TABLE IF EXISTS `primitive_test`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `primitive_test` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `function_id` bigint(20) NOT NULL,
  `module_id` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FKA504E8EA6DEEED2F` (`module_id`),
  KEY `FKA504E8EAF773FC6F` (`function_id`),
  CONSTRAINT `FKA504E8EA6DEEED2F` FOREIGN KEY (`module_id`) REFERENCES `module` (`id`),
  CONSTRAINT `FKA504E8EAF773FC6F` FOREIGN KEY (`function_id`) REFERENCES `function` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `primitive_test`
--

LOCK TABLES `primitive_test` WRITE;
/*!40000 ALTER TABLE `primitive_test` DISABLE KEYS */;
INSERT INTO `primitive_test` VALUES (4,1,18,8,'IARMBUS_Init'),(5,0,21,8,'IARMBUS_Term'),(6,0,19,8,'IARMBUS_Connect'),(7,0,20,8,'IARMBUS_DisConnect'),(8,7,22,8,'IARMBUS_BusCall'),(9,1,24,8,'IARMBUS_RegisterCall'),(11,3,25,8,'IARMBUS_RequestResource'),(12,3,26,8,'IARMBUS_ReleaseResource'),(18,6,29,8,'IARMBUS_BroadcastEvent'),(19,7,17,7,'E2E_LinearTV_URL'),(20,4,23,7,'E2E_LinearTV_Play_URL'),(21,3,30,8,'IARMBUS_InvokeSecondApplication'),(22,15,31,8,'IARMBUS_RegisterEventHandler'),(23,14,32,8,'IARMBUS_UnRegisterEventHandler'),(25,1,37,8,'IARMBUS_IsConnected'),(26,5,36,9,'Webkit_Test'),(27,1,38,8,'IARMBUS_RegisterEvent'),(28,10,39,3,'Qt_Test'),(29,0,40,8,'IARMBUS_GetContext'),(31,0,41,8,'IARMBUS_GetLastReceivedEventDetails'),(38,1,60,17,'E2E_Get_Record_URLS'),(40,1,61,17,'E2E_Play_URL'),(41,3,66,18,'Gstreamer_Test'),(42,9,64,19,'DS_sample'),(43,1,2,1,'ocaptune'),(46,1,2,1,'TestPrimvTest'),(48,1,67,21,'MediaStreamer_LiveTune');
/*!40000 ALTER TABLE `primitive_test` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `report`
--

DROP TABLE IF EXISTS `report`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `report` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `report`
--

LOCK TABLES `report` WRITE;
/*!40000 ALTER TABLE `report` DISABLE KEYS */;
/*!40000 ALTER TABLE `report` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script`
--

DROP TABLE IF EXISTS `script`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `primitive_test_id` bigint(20) NOT NULL,
  `script_content` longtext NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  `synopsis` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKC9E5D0CB67097214` (`primitive_test_id`),
  CONSTRAINT `FKC9E5D0CB67097214` FOREIGN KEY (`primitive_test_id`) REFERENCES `primitive_test` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=175 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script`
--

LOCK TABLES `script` WRITE;
/*!40000 ALTER TABLE `script` DISABLE KEYS */;
INSERT INTO `script` VALUES (31,46,'IARMBUS Connect & Disconnect test',6,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address ofthe selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_1\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or(\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        #calling IARMBUS API \"IARM_Bus_Disconnect\"\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        \r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\n#else:\r\n  #      print\"Load module failed\";\r\n','FREE','This test script tests the successful joining of the Agent application with the IARM Bus.\r\nTest Case ID : CT_IARMBUS_1                 '),(32,33,'IARMBUS Init Negative test',4,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address ofthe selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_2\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: IARM Bus library is initialized\";\r\n                #calling IARMBUS API \"IARM_Bus_Init\" to initialize IARMBus library second time\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n                if \"INVALID_PARAM\" in details:\r\n                        print \"SUCCESS: IARM Bus Library is already initialized\";\r\n                        #actual test case is passed\r\n                        result = \"SUCCESS\";\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Init failed with %s\" %details;\r\n                        print \"FAILURE: IARM Bus Library initialized second time\";\r\n                        #Actual test case is failed\r\n                        result = \"FAILURE\";\r\n        elif \"INVALID_PARAM\" in details:\r\n                        print \"SUCCESS: IARM Bus Library is already initialized\";\r\n                        #actual test case is passed\r\n                        result = \"SUCCESS\";\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s\" %details;\r\n                #Actual test case is failed\r\n                result = \"FAILURE\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the error scenario of rejoining the Agent with the IARM BUS which has been already registered.     \r\nTest Case ID : CT_IARMBUS_2\r\n     '),(33,39,'IARMBUS IsConnected test',25,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_3\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if ( \"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application is initialized with IARM Bus library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application is successfully connected with IARMBUS\";\r\n                        #calling IARMBUS API \"IARM_Bus_IsConnected\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_IsConnected\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_IsConnected\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: API-Is_Connected success\";\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details = tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARM Bus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Isconnected failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script tests the registration status of the Agent with the IARM Bus\r\nTest Case ID :CT_IARMBUS_3                                '),(54,100,'WebkitTest',26,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"webkittestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nif \"SUCCESS\" in result.upper():\r\n  print \"Webkit test module successfully loaded\";\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'Webkit_Test\');\r\n\r\n\r\n  #Execute the test case in STB\r\n  tdkTestObj.executeTestCase();\r\n  #Get the result of execution\r\n  result = tdkTestObj.getResult();\r\n  print \"%s\" %result;\r\n  #Get the log path of the Webkit Test suite\r\n  logpath =tdkTestObj.getLogPath();\r\n\r\n  #Unloading the webkit test module\r\n  obj.unloadModule(\"webkittestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Webkit test module\";\r\n','FREE','This test script executes the webkit test suites'),(56,39,'IARMBUS Receving IRkey',22,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_4\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        # Registering for IR key events\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #Wait for 30 sec to receive IR events\r\n                                                time.sleep(30);\r\n                                                # Calling IARMBUS_GetLastReceivedEventDetails to get the last event details\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                # Checking event received status\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS: Event is not Received\";\r\n                                                else:\r\n                                                        print \"FAILURE: Event is Received\";\r\n\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                #deregistering IR key event handler\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script tests the successful registration of an Event Handler to handle IR events\r\nTest Case ID:CT_IARMBUS_4. \r\nNote:Script will wait for 30sec to receive IR Keys from actual remote , later remote keys will be automated by IR key simulator.'),(57,24,'IARMBUS unregisterEvt Handler test',23,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_5\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARM_Bus_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Register call success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting RESOURCE_FOCUS resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        # Register for IR Key event.\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #WAIT for 30 sec to receive IR events\r\n                                                time.sleep(30);\r\n                                                #Get the last IR key code\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Event Received\";\r\n                                                else:\r\n                                                        print \"FAILURE: Event is not received\";\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #wait for 30 sec\r\n                                                        time.sleep(30);\r\n                                                        #get last received IR key code\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        if \"FAILURE\" in result:\r\n                                                                print \"SUCCESS: Event is not Received\";\r\n                                                        else:\r\n                                                                print \"FAILURE: Event is Received\";\r\n                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script tests the successful de-registration of an Event handler\r\nTest Case ID : CT_IARMBUS_5 \r\nNote:Script will wait for 30sec to receive IR Keys from actual remote , later remote keys will be automated by IR key simulator.'),(68,26,'IARMBUS Unregister with out Register Event Handler test',22,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_6\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS :Could not unregister Event Handler before registering \";\r\n                                                #WAIT and get last receiver IR key.\r\n                                                time.sleep(10);\r\n                                                #No IR key should receive\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                #checking for event status\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS: Event is not Received\";\r\n                                                else:\r\n                                                        print \"FAILURE: Event is Received\";\r\n\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: Application can unregister event before register --> IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script tests the failure scenario when an unregister event handler is called without registering a event handler. Note:Script will wait for 10sec to receive IR Keys from actual remote, later remote keys will be automated by IR key simulator.'),(69,29,'IARMBUS Release Resource test',12,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_7\')\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Register RPC method Success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                #Requesting \"RESOURCE_FOCUS\" resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        #Register for IR key events\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Event Handler registered successfully\";\r\n                                                # Wait for 20 sec to receive IR events\r\n                                                time.sleep(20);\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                #Checking event received details\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS: Event is not Received\";\r\n                                                else:\r\n                                                        print \"FAILURE: Event is Received\";\r\n\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Allocated  resource is successfully released\";\r\n                                                        # Wait for 20 sec to receive IR events\r\n                                                        time.sleep(20);\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        #checking for event status\r\n                                                        if \"FAILURE\" in result:\r\n                                                                print \"SUCCESS: Event is not Received\";\r\n                                                        else:\r\n                                                                print \"FAILURE: Event is Received\";\r\n                                                        # Agent should not receive any key code\r\n                                                        # Try Get last received IR key code\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                        if \"FAILURE\" in result:\r\n                                                                print \"SUCCESS: Event Handler unregistered successfully\";\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script tests the successful release of an acquired resource\r\nTest Case ID : CT_IARMBUS_7. Note:Script will wait for 20sec to receive IR Keys from actual remote , later remote keys will be automated by IR key simulator.'),(70,45,'IARMBUS Request same resource in different application test',11,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_8\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application registers RPC methods\";\r\n                                #wait for 2 sec to start second application\r\n                                time.sleep(2);\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_InvokeSecondApplication\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Second application Invoked successfully\";\r\n                                else:\r\n                                        print \"FAILURE: Second application failed to execute\";\r\n                                #This agent application also tries to grabb the same resource mentioned above\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                #Requesting for RESOURCE_FOCUS resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Requested resource is allocated from another application\";\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Resource Released\";\r\n                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the release of a resource by one application when another application requests the same resource. TestCase ID:CT_IARMBUS_8				'),(71,25,'IARMBUS Request same resource from same application test',11,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_9\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application registers RPC method\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                #Requesting \"RESOURCE_FOCUS\" resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        #Application tries to acquire the same resource second time\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                        print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                        #requesting RESOURCE_FOCUS resource\r\n                                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS: Requested resource is already allocated for the application\";\r\n                                                 #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Allocated  resource is successfully released\";\r\n                                                         #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: Requesting resource second time -IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the request of a resource by a application when the same \r\n application already acquires the same resource.TestCase ID:CT_IARMBUS_9				'),(72,75,'IARMBUS Request decoder-0 test',11,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_10\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application registeres RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting decoder 0 resource\r\n                                tdkTestObj.addParameter(\"resource_type\",1);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Requested decoder-0 resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",1);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Allocated  resource is successfully released\";\r\n                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the successful obtaining of decoder-0 resource\r\nTest Case ID : CT_IARMBUS_10          				'),(73,26,'IARMBUS Request decoder-1 test',11,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_11\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Appplication register RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting decoder 1 resource\r\n                                tdkTestObj.addParameter(\"resource_type\",2);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Requested deocder-1 resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",2);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Allocated  decoder-1 resource is successfully released\";\r\n                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the successful obtaining of decoder-1 resource\r\nTest Case ID : CT_IARMBUS_11      				'),(74,30,'IARMBUS Request graphics plane-0 test',11,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_12\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Appplication register RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting graphics plan-0 resource\r\n                                tdkTestObj.addParameter(\"resource_type\",3);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Requested graphics plane-0 resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",3);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Allocated  graphics plane-0 resource is successfully released\";\r\n                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the successful obtaining of graphics plane -0 resource\r\nTest Case ID : CT_IARMBUS_12     				'),(75,18,'IARMBUS Request graphics plane-1 test',11,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_13\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connec\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Appplication register RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting graphics plan-1 resource\r\n                                tdkTestObj.addParameter(\"resource_type\",4);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Requested graphics plane-1 resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",4);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Allocated  graphics plane-1 resource is successfully released\";\r\n                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the successful obtaining of graphics plane - 1 resource\r\nTest Case ID : CT_IARMBUS_13    				'),(76,14,'IARMBUS Request display_resolution_change  test',11,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_14\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Appplication register RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting  \"display resolution change\" resource\r\n                                tdkTestObj.addParameter(\"resource_type\",5);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Requested -display resolution change- resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",5);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Allocated -display resolution change- resource is successfully released\";\r\n                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the successful obtaining of display resolution resource\r\nTest Case ID : CT_IARMBUS_14       				'),(77,14,'IARMBUS Request power  test',11,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_15\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Appplication register RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting power resource\r\n                                tdkTestObj.addParameter(\"resource_type\",6);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Requested power resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",6);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Allocated power resource is successfully released\";\r\n                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n\r\n','FREE','This test script verifies the successful obtaining of power resource\r\nTest Case ID : CT_IARMBUS_15    				'),(78,14,'IARMBUS RegisterCall test',9,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_16\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                # IARMBUS_Connect is to connect the application with IARM-BUS Daemon\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #IARMBUS_RegisterCall is to register an RPC that can be invoked by other application\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application Registeres an RPC successfully\";\r\n                                #IARMBUS_DisConnect is to disconnect application from IARM-Bus Daemon\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the successful registration of an RPC call in the app\r\nTest Case ID : CT_IARMBUS_16    				'),(79,28,'IARMBUS BusCall test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_17\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARM_Bus_Init API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARM_Bus_Connect API\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARM_Bus_RegisterCall API\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application Registeres an RPC successfully\";\r\n                                #calling IARM_Bus_Call API\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                #invoke \"GetPowerState\" RPC\r\n                                tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application invokes an RPC successfully\";\r\n                                        #caling IARM_Bus_DisConnect API\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Call failed with %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script tests the invocation of an RPC method registered in another application\r\nTest Case ID : CT_IARMBUS_17             				'),(80,30,'IARMBUS Register event handler for IR key',22,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_18\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        #Register IR event handler for receving IR key events\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        #Register for IR key  events\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Rehistered event handler to receive IR key\";\r\n                                                #Wait for 30 sec to receive IR events\r\n                                                time.sleep(30);\r\n                                                #try to get last received IR key code\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                #checking last received event details\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS: Event is not Received\";\r\n                                                else:\r\n                                                        print \"FAILURE: Event is Received\";\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                #deregistering IR events\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script tests the successful registration of Event Handler for IR Key Events\r\nTest Case ID : CT_IARMBUS_18. Note:Script will wait for 30sec to receive IR Keys from actual remote , later remote keys will be automated by IR key simulator.\r\n\r\n'),(81,24,'IARMBUS Broadcast IR event',18,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_19\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARM-Bus Daemon\";\r\n                        #Run another application to receive broadcasted events\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                        #registering event handler for IR Key events\r\n                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                        tdkTestObj.addParameter(\"event_id\",0);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Event Handler registered for IR key events\";\r\n                                #sleep for 5 sec to receive IR key event that is broadcasted from second app.\r\n                                time.sleep(5);\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_InvokeSecondApplication\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Second application Invoked successfully\";\r\n                                else:\r\n                                        print \"FAILURE: Second application failed to execute\";\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_GetLastReceivedEventDetails\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: GetLastReceivedEventDetails executed successfully\";\r\n                                else:\r\n                                        print \"FAILURE: GetLastReceivedEventDetails failed\";\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                #deregistering IR event handler\r\n                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                if \"FAILURE\" in result:\r\n                                        print \"SUCCESS: UnRegister Event Handler for IR key events\";\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE : IARM_Bus_UnRegisterEventHanlder failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE : IARM_Bus_RegisterEventHandler failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','ALLOCATED','This test script Broadcasts an IR event to all the registered apps in IARM BUS\r\nTest Case ID : CT_IARMBUS_19 \r\n'),(82,15,'IARMBUS No IR event test',22,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_20\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        #Registered for PWR events\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        #registering event handler for power events\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #Wait for 30 sec to receive IR events\r\n                                                time.sleep(30);\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS: Event is not Received\";\r\n                                                else:\r\n                                                        print \"FAILURE: Event is Received\";\r\n                                                #No IR event is received till delay completes\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                #deregistering event handler for power events\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies whether no IR key event is received for an application which has not registered to receive IR events. Test Case ID:CT_IARMBUS_20	\r\n'),(83,5,'IARMBUS HDD event test',22,'#This script valid only for  gateway boxes testing\r\n# use tdklib library,which provides a wrapper for tdk testcase script\r\n\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_21\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        #Register event handler for receving HDD events\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #wait for 30 sec to receive HDD events\r\n                                                time.sleep(30);\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the receiving of HDD Event while mounting of HDD\r\nTest Case ID : CT_IARMBUS_21     	\r\nNOTE:This test script will FAIL because IARMBUS component is not released for XG1. This is script is for XG1 only testing.				'),(84,5,'IARMBUS ExtHDD event',22,'#This script valid only for  gateway boxes testing\r\n# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_22\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        #Register event handler for receving ExtHDD mount/unmount events\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #wait for 30 sec to receive ExtHDD events\r\n                                                time.sleep(30);\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the receiving of Ext HDD Event while mounting Ext HDD\r\nTest Case ID : CT_IARMBUS_22     \r\nNOTE:This test script will FAIL because IARMBUS component is not released for XG1. This is script is for XG1 only testing.	  				'),(85,5,'IARMBUS ExtHDD paring event test',22,'#This script valid only for  gateway boxes testing\r\n# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_23\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        #Register event handler for receving ExtHDD paring events\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #wait for 30 sec to receive ExtHDD events\r\n                                                time.sleep(30);\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the receiving of Ext HDD pairing Event \r\nTest Case ID : CT_IARMBUS_23       \r\nNOTE:This test script will FAIL because IARMBUS component is not released for XG1. This is script is for XG1 only testing.	      				'),(86,5,'IARMBUS Ext HDD ON Event test',22,'#This script valid only for  gateway boxes testing\r\n# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_24\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        #Register event handler for receving ExtHDD_ON events\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #wait for 30 sec to receive ExtHDD events\r\n                                                time.sleep(30);\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the receiving of Ext HDD ON Event\r\nTest Case ID : CT_IARMBUS_24     	\r\nNOTE:This test script will FAIL because IARMBUS component is not released for XG1. This is script is for XG1 only testing.				'),(87,5,'IARMBUS Ext HDD OFF event test',22,'#This script valid only for  gateway boxes testing\r\n# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_25\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        #Register event handler for receving ExtHDD_OFF events\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #wait for 30 sec to receive ExtHDD events\r\n                                                time.sleep(30);\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script verifies the receiving of Ext HDD OFF Event\r\nTest Case ID : CT_IARMBUS_25\r\nNOTE:This test script will FAIL because IARMBUS component is not released for XG1. This is script is for XG1 only testing.	            				'),(88,12,'IARMBUS Query Key Repeat Interval test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_27\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARM_Bus_Init API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                # IARMBUS_Connect is to connect the application with IARM-BUS Daemon\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #IARMBUS_BusCall is to invoke an RPC.\r\n                        #calling IARM_Bus_Call API\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        #Passing parameters to query key repeat interval\r\n                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetRepeatInterval\");\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application invokes an RPC successfully\";\r\n                                #IARMBUS_DisConnect is to disconnect application from IARM-Bus Daemon\r\n                                #Calling IARM_Bus_Disconnect API\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the Key Repeat Interval of the STB\r\nTest Case ID : CT_IARMBUS_27          				'),(89,18,'IARMBUS Set Key Repeat Interval test',8,'#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_28\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        #passing prameter for querying key repeat interval time\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetRepeatInterval\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Query- RPC method invoked for querying key repeat interval \";\r\n                                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                #passing prameter for setting key repeat interval time\r\n                                tdkTestObj.addParameter(\"method_name\",\"SetRepeatInterval\");\r\n                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                #setting Repeat interval to 100\r\n                                tdkTestObj.addParameter(\"set_timeout\",100);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                set_interval=details;\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Set- RPC method invoked for setting key repeat interval \";\r\n                                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                        #passing prameter for querying key repeat interval time\r\n                                        tdkTestObj.addParameter(\"method_name\",\"GetRepeatInterval\");\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        get_interval=tdkTestObj.getResultDetails();\r\n                                        #Check for both Repeat Interval before and after setting it\r\n                                        if get_interval == set_interval:\r\n                                                print \"SUCCESS: Key Repeat Intervals are same\";\r\n                                        else:\r\n                                                print \"FAILURE: Both the Key Repeat Interval are not same\";\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Query- RPC method invoked for setting key repeat interval \";\r\n                                                #Need to compare both keyRepeatInterval time\r\n                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: GetRepeatInterval ---> IARM_Bus_Call failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: SetRepeatInterval ---> IARM_Bus_Call failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: GetRepeatInterval ---> IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s\" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script Sets the Key Repeat Interval of the STB to the desired value\r\nTest Case ID : CT_IARMBUS_28      				'),(90,17,'IARMBUS Query Power state',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_29\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        # Calling IARM_Bus_Init API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                # Calling IARM_Bus_Connect API\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        #passing parameter for Querying STB power state\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Query Power state invoked successfully\";\r\n                                # Calling IARM_Bus_DisConnect API\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: Query POwer state --> IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the Current Power state of the STB\r\nTest Case ID : CT_IARMBUS_29            				'),(91,19,'IARMBUS Set Power state',8,'#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_30\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"Application is successfully connected with IARM-BUS Daemon\";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method is registered\";\r\n                                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                #passing parameter for querying STB power state\r\n                                tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Querying STB power state -RPC method invoked successfully\";\r\n                                        #Setting the POWER state\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                        tdkTestObj.addParameter(\"method_name\",\"SetPowerState\");\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                        # setting state to ON\r\n                                        tdkTestObj.addParameter(\"newState\",2);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                        before_set_powerstate = details;\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Setting STB power state -RPC method invoked successfully\";   \r\n                                                #Querying the STB power state\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                                tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                                after_set_powerset=details;\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Querying STB power state -RPC method invoked successfully\";\r\n                                                        if before_set_powerstate == after_set_powerset :\r\n                                                                print \"SUCCESS: Both the Power states are equal\";\r\n                                                        else:\r\n                                                                print \"FAILURE: Both power states are different\";\r\n                                                        #comparing the Power state before and after setting the power state\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: Querying STB power state - IARM_Bus_Call failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: Set STB power state - IARM_Bus_Call failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: Querying STB power state - IARM_Bus_Call failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script sets the Power state of the STB to the desired state\r\nTest Case ID : CT_IARMBUS_30      				'),(92,9,'IARMBUS RegisterEventMax',27,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_31\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterEvent\"\r\n                        #This should be called in the IARM Manager perspective like irmgr,pwrmgr,diskmgr.\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEvent\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEvent\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully register events\";\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterEvent failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script registers for all possible events .\r\nTest Case ID : CT_IARMBUS_31                 				'),(93,36,'IARMBBUS Register for Resource Available event test',22,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_32\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",1);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        #passing parameter for receving RESOURCE_AVAILABLE event\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #Call second application to check for resource available event\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS:InvokeSecondApplication success\";\r\n                                                else:\r\n                                                        print \"FAILURE:InvokeSecondApplication fails\";\r\n                                                #wait for 10 sec\r\n                                                time.sleep(10);\r\n                                                #Get last received event details\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                #checking for event receiving status\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"FAILURE: Event is not Received\";\r\n                                                else:\r\n                                                        print \"SUCCESS: Event is Received\";\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                        tdkTestObj.addParameter(\"resource_type\",1);\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script tests the receiving of RESOURCE_AVAILABLE Event when one application releases a resource.Test Case ID:CT_IARMBUS_32				'),(94,45,'IARMBUS Broadcast ResolutionChange Event test',22,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_33\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Register Call successful\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                #passing parameter for receving Resolution change event\r\n                                tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                tdkTestObj.addParameter(\"event_id\",1);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #invoking second application to broadcast event\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        #checking for second application invokation status\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS:InvokeSecondApplication success\";\r\n                                        else:\r\n                                                print \"FAILURE:InvokeSecondApplication fails\";\r\n                                        time.sleep(10);\r\n                                        #Getting last received event details\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        #checking for event received status\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Event Received\";\r\n                                        else:\r\n                                                print \"FAILURE: Event is not received\";\r\n                                        #calling IARM_Bus_UnRegisterEventHandler API\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                        #Register for RESOLUTIONCHANGE event\r\n                                        tdkTestObj.addParameter(\"event_id\",1);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS:UnRegister Event Handler registered successfully\";\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script Broadcasts a Resolution Change event to all the registered apps in IARM BUS\r\nTest Case ID : CT_IARMBUS_33       				'),(95,23,'IARMBUS PowerModeChanged event test',22,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_34\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        #passing parameter for receving POWER_MODE_CHANGEDevent\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :IR Event Handler registered successfully\";\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                                # Registering event handler for IR events\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS : PWR Event Handler registered successfully\";\r\n                                                        #WAIT 30 sec to receive receive power mode changed\r\n                                                        time.sleep(30)\r\n                                                        #POWER IR key should receive\r\n                                                        #Receving last received key details\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        if \"FAILURE\" in result:\r\n                                                                print \"SUCCESS: Event is not Received\";\r\n                                                        else:\r\n                                                                print \"FAILURE: Event is Received\";\r\n                                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                        #Deregisteres IR event handler\r\n                                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                        if \"FAILURE\" in result:\r\n                                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                                if \"FAILURE\" in result:\r\n                                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                                        tdkTestObj.executeTestCase();\r\n                                                                        result = tdkTestObj.getResult();\r\n                                                                        details=tdkTestObj.getResultDetails();\r\n                                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                                                        if \"SUCCESS\" in result:\r\n                                                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                                tdkTestObj.executeTestCase();\r\n                                                                                result = tdkTestObj.getResult();\r\n                                                                                details=tdkTestObj.getResultDetails();\r\n                                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                                                                if \"SUCCESS\" in result:\r\n                                                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                                else:\r\n                                                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                                        else:\r\n                                                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                                else:\r\n                                                                        print \"FAILURE:PWR -> IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE:IR -> IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IR->IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: PWR->IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script tests the successful receiving of PowerModeChanged Event when Power key is pressed . TestCase ID:CT_IARMBUS_34				'),(96,22,'IARMBUS BusCall MFR-STB Manufature Name test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address ofthe selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_35\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature name (mfr)\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetManufacturerData\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",0);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature name:\";\r\n                                print details;\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the STB Manufacturer Name\r\nTest Case ID :CT_IARMBUS_35      		\r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)'),(97,14,'IARMBUS BusCall MFR-OUI test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_36\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-Organizationally Unique Identifier\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetManufacturerData\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",1);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-Organizationally Unique Identifier:\";\r\n                                print details;\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the Manufacturer Organizationally Unique Identifier\r\nTest Case ID : CT_IARMBUS_36          \r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)	'),(98,7,'IARMBUS BusCall MFR-Model Name test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_37\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-Model Name\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetManufacturerData\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",2);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-Model Name:\";\r\n                                print details;\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the MFR- Model Name\r\nTest Case ID : CT_IARMBUS_37      \r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)         				'),(99,9,'IARMBUS BusCall MFR-Board description test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_38\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n               #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-board description\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetManufacturerData\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",3);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-board description:\";\r\n                                print details;\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the MFR Board Description\r\nTest Case ID : CT_IARMBUS_38           		\r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)		'),(100,7,'IARMBUS BusCall MFR-Board Product Class test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_39\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-Product Class\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetManufacturerData\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",4);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-Product Class:\" ;\r\n                                print details;\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the MFR Board Product Class\r\nTest Case ID : CT_IARMBUS_39     \r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)'),(101,9,'IARMBUS BusCall MFR-SerialNumber test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_40\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        #parameter for getting STB Manufature-serial Number\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetManufacturerData\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",5);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-serial Number:\";\r\n                                print details;\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the MFR Serial Number\r\nTest Case ID : CT_IARMBUS_40          \r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)				'),(102,8,'IARMBUS BusCall MFR-Hardware version test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address ofthe selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_41\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-Hardware version\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetManufacturerData\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",6);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-Hardware version:\";\r\n                                print details;\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the MFR Hardware version\r\nTest Case ID : CT_IARMBUS_41    	\r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)			'),(103,7,'IARMBUS BusCall MFR-Software version test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_42\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-software version\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetManufacturerData\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",7);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-software version:\";\r\n                                print details;\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the MFR Software version\r\nTest Case ID : CT_IARMBUS_42    	\r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)			'),(104,11,'IARMBUS BusCall MFR- Provision Code test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_43\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-provision code\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetManufacturerData\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",8);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                print \"STB Manufature-provision code:\";\r\n                                print details;\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the MFR Provision Code\r\nTest Case ID : CT_IARMBUS_43          				\r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)'),(105,9,'IARMBUS BusCall MFR-First Use Date test',8,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_44\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-First Use Date\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetManufacturerData\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",9);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                print \"STB Manufature-First Use Date:\";\r\n                                print details;\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This test script queries the MFR First Use date\r\nTest Case ID : CT_IARMBUS_44     \r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)				'),(106,260,'E2E_LinearTV_TuneSD_01',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD_01\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        \r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"SD channel Tuned and played Successfully\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to tune and play SD Channel\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests tuning of a  SD service in End-to-End scenario\r\nTest Case ID: E2E_LinearTV_01  				'),(107,61,'E2E_LinearTV_TuneHD_02',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneHD_02\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response is success\";\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"HD channel Tuned and played successfully\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and Play the HD channel\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Error code Response is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests tuning of a  HD service in End-to-End scenario\r\nTest Case ID: E2E_LinearTV_02 			'),(108,35,'E2E_LinearTV_TuneSD-SD_03',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD-SD_03\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_GetURL function to send request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        \r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Pre condition-Json Response received successfully\";\r\n                #Calling LinearTV_Play_URL function to play the SD Channel\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Pre condition-SD channel Tuned and played successfully\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                        #Calling LinearTV_GetURL function to send request url\r\n                        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'03\');\r\n                        \r\n                        url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url2);\r\n                        tdkTestObj.executeTestCase();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        # Remove unwanted part from URL\r\n                        PLAYURL2 = details.split(\"[RESULTDETAILS]\");\r\n                        print \"PLAYURL2 = \"+PLAYURL2[-1];\r\n                        result = tdkTestObj.getResult();\r\n                        print \"Result of Json Response : %s\" %result;\r\n                        #Check for SUCCESS/FAILURE of Json response Parameter\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SD-SD channel tune response received successfully\";\r\n                                #Calling LinearTV_Play_URL function to play the SD Channel\r\n                                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL2[-1]);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                print \"Result of Player : %s\" %result;\r\n                                #Check for SUCCESS/FAILURE of playing video\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SD-SD channel tuned and played successfully\";\r\n                                        #Getting the Mplayer log file from DUT\r\n                                        logpath=tdkTestObj.getLogPath();\r\n                                        print \"Log path : %s\" %logpath;\r\n                                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                                else:\r\n                                        print \"Failed to tune and play SD-SD channel\";\r\n                                        #Getting the Mplayer log file from DUT\r\n                                        logpath=tdkTestObj.getLogPath();\r\n                                        print \"Log path : %s\" %logpath;\r\n                                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                        else:\r\n                                print \"Failed to receive tune response SD-SD channel\";\r\n                else:\r\n                        print \"Pre condition-Failed to Tune and Play the SD channel\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Pre condition-Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests tuning of an SD service from another SD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_03				'),(109,20,'E2E_LinearTV_TuneSD-HD_04',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD-HD_04\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_GetURL function to send request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        \r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Pre condition-Json Response received successfully\";\r\n                #Calling LinearTV_Play_URL function to play the video\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Pre condition-SD channel Tuned and played successfully\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n                        \r\n                        url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url2);\r\n                        #Execute the test case in STB\r\n                        tdkTestObj.executeTestCase();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        # Remove unwanted part from URL\r\n                        PLAYURL2 = url.split(\"[RESULTDETAILS]\");\r\n                        print \"PLAYURL2 = \"+PLAYURL2[-1];\r\n                        result = tdkTestObj.getResult();\r\n                        print \"Result of Json Response : %s\" %result;\r\n                        #Check for SUCCESS/FAILURE of Json response Parameter\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SD-HD channel tune response received successfully\";\r\n                                #Calling LinearTV_Play_URL function to play the video\r\n                                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL2[-1]);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                print \"Result of Player : %s\" %result;\r\n                                #Check for SUCCESS/FAILURE of playing video\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SD-HD channel tuned and played successfully\";\r\n                                        #Getting the Mplayer log file from DUT\r\n                                        logpath=tdkTestObj.getLogPath();\r\n                                        print \"Log path : %s\" %logpath;\r\n                                        tdkTestObj.transferLogs(logpath,\"false\");\r\n\r\n                                else:\r\n                                        print \"Failed to tune and play SD-HD channel\";\r\n                                        #Getting the Mplayer log file from DUT\r\n                                        logpath=tdkTestObj.getLogPath();\r\n                                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                        else:\r\n                                print \"Failed to receive tune response SD-HD channel\";\r\n                else:\r\n                        print \"Pre condition-Failed to Tune and Play the SD channel\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Pre condition-Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests tuning of an SD service from another HD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_04    				'),(110,23,'E2E_LinearTV_TuneHD-SD_05',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneHD-SD_05\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_GetURL function to send request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Pre condition-Json Response received successfully\";\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Pre condition-HD channel Tuned and played successfully\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                        #Calling LinearTV_GetURL function to send request url\r\n                        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n                        \r\n                        url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url2);\r\n                        tdkTestObj.executeTestCase();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        # Remove unwanted part from URL\r\n                        PLAYURL2 = url.split(\"[RESULTDETAILS]\");\r\n                        print \"PLAY URL2 = \"+PLAYURL2[-1];\r\n                        result = tdkTestObj.getResult();\r\n                        print \"Result of Json Response : %s\" %result;\r\n                        #Check for SUCCESS/FAILURE of Json response Parameter\r\n                        if \"SUCCESS\" in result:\r\n                                print \"HD-SD channel tune response received successfully\";\r\n                                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL2[-1]);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                print \"Result of Player : %s\" %result;\r\n                                #Check for SUCCESS/FAILURE of playing video\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"HD-SD channel tuned and played successfully\";\r\n                                        #Getting the Mplayer log file from DUT\r\n                                        logpath=tdkTestObj.getLogPath();\r\n                                        print \"Log path : %s\" %logpath;\r\n                                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                                else:\r\n                                        print \"Failed to tune and play HD-SD channel\";\r\n                                        #Getting the Mplayer log file from DUT\r\n                                        logpath=tdkTestObj.getLogPath();\r\n                                        print \"Log path : %s\" %logpath;\r\n                                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                        else:\r\n                                print \"Failed to receive tune response HD-SD channel\";\r\n                else:\r\n                        print \"Pre condiition-Failed to Tune and Play the HD channel\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Pre condition-Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests tuning of an HD service from another SD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_05  				'),(112,23,'E2E_LinearTV_TuneHD-HD_06',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneHD-HD_06\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Pre condition-Json Response received successfully\";\r\n                #Calling LinearTV_Play_URL function to play the HD Channel\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Execute the test case in STB\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Pre condition-SD channel Tuned and played successfully\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                        #Calling LinearTV_GetURL function to send request url\r\n                        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'03\');\r\n                        \r\n                        url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url2);\r\n                        tdkTestObj.executeTestCase();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        # Remove unwanted part from URL\r\n                        PLAYURL2 = details.split(\"[RESULTDETAILS]\");\r\n                        print \"PLAY URL2 = \"+PLAYURL2[-1];\r\n                        result = tdkTestObj.getResult();\r\n                        print \"Result of Json Response : %s\" %result;\r\n                        #Check for SUCCESS/FAILURE of Json response Parameter\r\n                        if \"SUCCESS\" in result:\r\n                                print \"HD-HD channel tune response received successfully\";\r\n                                #Calling LinearTV_Play_URL function to play the HD Channel\r\n                                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL2[-1]);\r\n                                tdkTestObj.executeTestCase();\r\n                                print \"Result of Player : %s\" %result;\r\n                                #Check for SUCCESS/FAILURE of playing video\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"HD-HD channel tuned and played successfully\";\r\n                                        #Getting the Mplayer log file from DUT\r\n                                        logpath=tdkTestObj.getLogPath();\r\n                                        print \"Log path : %s\" %logpath;\r\n                                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                                else:\r\n                                        print \"Failed to tune and play HD-HD channel\";\r\n                                        #Getting the Mplayer log file from DUT\r\n                                        logpath=tdkTestObj.getLogPath();\r\n                                        print \"Log path : %s\" %logpath;\r\n                                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                        else:\r\n                                print \"Failed to receive tune response HD-HD channel\";\r\n                else:\r\n                        print \"Pre condition-Failed to Tune and Play the HD channel\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Pre condition-Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests tuning of an HD service from another HD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_06 				'),(113,32,'E2E_LinearTV_Live_Trickplay_07',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_07\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for slow rewind Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=-0.5.000000&time_pos=8000\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of slow rewind with play speed -0.5 in End-to-End scenario Test Case ID : E2E_LinearTV_07 				'),(114,23,'E2E_LinearTV_Live_Trickplay_08',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_08\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for slow forward Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=0.5.000000&time_pos=8000\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n','FREE','This script tests the playback of slow forward with play speed 0.5 in End-to-End scenario Test Case ID : E2E_LinearTV_08 				'),(115,19,'E2E_LinearTV_Live_Trickplay_09',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_09\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Fast rewind Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=-4.000000&time_pos=8000\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json Response Parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of fast rewind with play speed -4x in End-to-End scenario Test Case ID : E2E_LinearTV_09 				'),(116,24,'E2E_LinearTV_Live_Trickplay_10',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay10\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n         tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Fast forward Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=4.000000&time_pos=8000\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of fast forward with play speed 4X in End-to-End scenario Test Case ID : E2E_LinearTV_10   				'),(117,23,'E2E_LinearTV_Live_Trickplay_11',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay11\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Fast forward of 15x Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=15.000000&time_pos=8000\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n                ','FREE','This script tests the playback of Fast forward with play speed 15x in End-to-End scenario Test Case ID : E2E_LinearTV_11  				'),(118,20,'E2E_LinearTV_Live_Trickplay_12',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay12\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Fast forward of 15x Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=30.000000&time_pos=8000\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of fast forward with play speed 30x in End-to-End scenario Test Case ID : E2E_LinearTV_12  				'),(119,17,'E2E_LinearTV_Live_Trickplay_13',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_13\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Fast forward of 60X Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=60.000000&time_pos=8000\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of fast forward with play speed 60x in End-to-End scenario Test Case ID : E2E_LinearTV_13  				'),(120,17,'E2E_LinearTV_Live_Trickplay_14',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_14\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Fast reverse of -15x Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=-15.000000&time_pos=8000\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of fast reverse with play speed -15x in End-to-End scenario Test Case ID : E2E_LinearTV_14 				'),(121,17,'E2E_LinearTV_Live_Trickplay_15',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay15\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Fasr reverse of -30x Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=-30.000000&time_pos=8000\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of fast reverse with play speed -30x in End-to-End scenario Test Case ID : E2E_LinearTV_15 '),(122,18,'E2E_LinearTV_Live_Trickplay_16',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_16\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        \r\n        #Framing URL for Fast reverse of -60X Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=-60.000000&time_pos=8000\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Json Response Received Sucessfully\";\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of fast reverse with play speed -60x in End-to-End scenario Test Case ID : E2E_LinearTV_16  				'),(123,17,'E2E_LinearTV_MPEG2_AC3_17',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_AC3_17\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG2/AC3 streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG2/AC3 streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of MPEG2 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_17 				'),(124,13,'E2E_LinearTV_MPEG4_AC3_18',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG4_AC3_18\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG2/AC3 streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG2/AC3 streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of MPEG4 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_18				'),(125,15,'E2E_LinearTV_MPEG2_AAC_19',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_AAC_19\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'03\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG2/AAC streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG2/AAC streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of MPEG2 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_19 				'),(126,15,'E2E_LinearTV_MPEG4_AAC_20',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG4_AAC_20\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'04\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Json Response Received Sucessfully\";\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG4/AAC streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG4/AAC streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of MPEG4 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_20  				'),(127,13,'E2E_LinearTV_MPEG2_MP3_21',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_MP3_21\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n       #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'05\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as PLAYURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG2/MP3 streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG2/MP3 streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of MPEG2 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_21				'),(128,14,'E2E_LinearTV_MPEG4_MP3_22',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG4_MP3_22\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'06\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = detailsl.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG4/MP3 streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG4/MP3 streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\")\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of MPEG4 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_22				'),(129,17,'E2E_LinearTV_MPEG2_WAV_23',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_WAV_23\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'07\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG2/WAV streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG2/WAV streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of MPEG2 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_23  				'),(130,17,'E2E_LinearTV_MPEG4_WAV_24',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG4_WAV_24\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'08\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG4/WAV streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG4/WAV streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of MPEG4 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_24  				'),(131,17,'E2E_LinearTV_H.264_AC3_25',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_AC3_25\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'09\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"H.264/AC3 streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play H.264/AC3 streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of H.264 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_25				'),(132,23,'E2E_LinearTV_H.264_AAC_26',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_AAC_26\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'10\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        print \"Request URL : %s\" %url;\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        validURL = url.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+validURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",validURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"H.264/AAC streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play H.264/AAC streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of H.264 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_26  				'),(133,23,'E2E_LinearTV_H.264_MP3_27',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_MP3_27\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'11\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"H.264/MP3 streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play H.264/MP3 streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of H.264 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_27				'),(134,18,'E2E_LinearTV_H.264_WAV_28',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_WAV_28\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'12\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"H.264/WAV streams Tuned and played successfully\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to Tune and  play H.264/WAV streams\";\r\n                        #Getting the mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of H.264 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_28 				'),(135,219,'QtTest',28,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"qttestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'QtTest\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nif \"Success\" in result:\r\n  print \"Qt test module successfully loaded\";\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'Qt_Test\');\r\n\r\n  # Configuring the test object for non gfx test suites execution \r\n  tdkTestObj.addParameter(\"Qt_component_type\",\"qt_non_gfx\");\r\n\r\n  #Execute the test case in STB\r\n  tdkTestObj.executeTestCase();\r\n\r\n  #Get the result of execution\r\n  result = tdkTestObj.getResult();\r\n  print \"%s\" %result;\r\n\r\n  #Get the log path of the Qt Non-Graphics Testsuite\r\n  logpath =tdkTestObj.getLogPath();\r\n  print \"Log Path :%s\"%logpath;\r\n  tdkTestObj.transferLogs( logpath, \"true\" );\r\n  \r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'Qt_Test\');\r\n\r\n  # Configuring the test object for gfx test suites execution\r\n  tdkTestObj.addParameter(\"Qt_component_type\",\"qt_gfx\");\r\n\r\n  #Execute the test case in STB\r\n  tdkTestObj.executeTestCase();\r\n\r\n  #Get the result of execution\r\n  result = tdkTestObj.getResult();\r\n  print \"%s\" %result;\r\n\r\n  #Get the log path of the Qt Non-Graphics Testsuite\r\n  logpath =tdkTestObj.getLogPath();\r\n  print \"Log Path :%s\"%logpath;\r\n  tdkTestObj.transferLogs( logpath, \"true\" );\r\n  \r\n  #Unload the qt test suite module\r\n  obj.unloadModule(\"qttestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Qt test module\";','FREE','This test script executes the Qt Graphics and non Graphics Test suites.			'),(136,9,'IARMBUS GetContext test',29,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_26\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_GetContext\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetContext\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_GetContext\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: GetContext API returns success\";\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_GetContext failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','This script queries the Context of the application which is joined with IARMBUS. \r\nTest Case ID:CT_IARMBUS_26\r\nNOTE:This test script will FAIL because \"IARM_Bus_GetContext\" API is not implemented in IARM BUS component(issue with IARM Bus RDK component)			'),(146,583,'E2E_DVRTrickPlay_01',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.30.162:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\nlogpath =tdkTestObj.getLogPath();\r\nprint \"Log Path :%s\"%logpath\r\ntdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\ndvrObj = tdkTestObj.getDVRDetails(logpath);\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\nurlList= dvrObj.getURLList();\r\nlenth=len(urlList)\r\nprint lenth\r\n#urlList=[\"http://192.168.161.56:8080/vldms/dvr?#rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?#rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n#url = 0\r\n#if (url < 3):\r\n#	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print \"Inside if\" urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=-0.500000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nelse:\r\n	print \"Inside else\"\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"','FREE','This script tests slow rewind operation sequentially on all recorded urls at the speed 0.5x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID: E2E_ DVRTrickPlay_01			'),(147,187,'E2E_DVRTrickPlay_02',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\nlogpath =tdkTestObj.getLogPath();\r\nprint \"Log Path :%s\"%logpath\r\ntdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=0.500000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"','FREE','This script tests slow forward operation sequentially on all recorded urls at the speed 0.5x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID: E2E_ DVRTrickPlay_02				'),(149,255,'E2E_DVRTrickPlay_03',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=-4.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"','FREE','This script tests fast rewind operation sequentially on all recorded urls at the speed 4x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID: E2E_ DVRTrickPlay_03 		'),(150,8,'logtest',28,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"qttestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'QtTest\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nif \"Success\" in result:\r\n  print \"Qt test module successfully loaded\";\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'Qt_Test\');\r\n\r\n  # Configuring the test object for non gfx test suites execution \r\n  tdkTestObj.addParameter(\"Qt_component_type\",\"qt_gfx\");\r\n\r\n  #Execute the test case in STB\r\n  tdkTestObj.executeTestCase();\r\n\r\n  #Get the result of execution\r\n  result = tdkTestObj.getResult();\r\n  print \"%s\" %result;\r\n\r\n  #Get the log path of the Qt Non-Graphics Testsuite\r\n  logpath =tdkTestObj.getLogPath();\r\n  print \"Log Path :%s\"%logpath;\r\n  tdkTestObj.transferLogs( logpath, \"true\" );\r\n  \r\n  #Unload the qt test suite module\r\n  obj.unloadModule(\"qttestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Qt test module\";','FREE','				'),(151,67,'E2E_DVRTrickPlay_04',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=4.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"','FREE','This script tests fast farword operation sequentially on all recorded urls at the speed 4x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID: E2E_ DVRTrickPlay_03 			'),(153,32,'sample script for DS',42,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'sample\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n        print \'1\';\r\n        #setColor and getColor APIs\r\n        tdkTestObj = obj.createTestStep(\'DS_sample\');\r\n        print \'2\';\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        print details;\r\n        if  \"SUCCESS\" in result :\r\n                print \"SUCCESS:\";\r\n        else:\r\n                print \"FAILURE:\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        #Unload the device settings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n','FREE','				'),(154,12,'E2E_DVRTrickPlay_05',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=15.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"','FREE','				'),(155,279,'E2E_DVRTrickPlay_06',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=-15.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"','FREE','				'),(156,5,'E2E_DVRTrickPlay_07',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=30.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"				','FREE','				'),(157,8,'E2E_DVRTrickPlay_08',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=-30.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"			','FREE','				'),(158,1,'E2E_DVRTrickPlay_09',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=60.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"							','FREE','				'),(159,0,'E2E_DVRTrickPlay_10',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=-60.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"			','FREE','				'),(160,0,'E2E_DVRTrickPlay_11',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=6.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"				','FREE','				'),(161,0,'E2E_DVRTrickPlay_12',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=27.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"							','FREE','				'),(162,1,'E2E_DVRTrickPlay_13',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=-130.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"							','ALLOCATED','				'),(163,2,'E2E_DVRTrickPlay_14',38,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"e2e\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"E2E module loading status :  %s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of E2E module\r\nprint \"E2E module loaded successfully\";\r\n\r\n#Calling E2E_Get_Record_URLS function to send the url\r\ntdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\nstreamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n#Framing URL for slow rewind Request\r\nurl=\"http://192.168.161.56:8080/vldms/info/recordingurls\"\r\nprint \"RecordURL : %s\" %url;\r\ntdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"Result.........%s\" %result;\r\n\r\n#Get the log path of the List of recording url file\r\n#logpath =tdkTestObj.getLogPath();\r\n#print \"Log Path :%s\"%logpath\r\n#tdkTestObj.transferLogs(logpath, \"true\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#dvrObj = tdkTestObj.getDVRDetails();\r\nprint \"----------------------------URL List-------------------------------------------------------\"\r\n#urlList= dvrObj.getURLList();\r\n#lenth=len(urlList)\r\n#print lenth\r\nurlList=[\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\",\"http://192.168.161.56:8080/vldms/dvr?rec_id=1370415120950\"]\r\nfor url in range(len(urlList)):\r\n	print url\r\n	print \"inside for loop\"\r\n	print urlList[url];\r\n	#print  \" [URL ] \" +dvrObj.getURL(url);\r\n	tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n	#Calling \'E2E_PlayURL\' function to send the url\r\n	playurl=urlList[url]+\"&play_speed=-400.000000&time_pos=8000\";\r\n	tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n	#Execute the test case in STB\r\n	tdkTestObj.executeTestCase();\r\n	#Get the log path of the List of recording url file\r\n	logpath =tdkTestObj.getLogPath();\r\n	print \"Log ath :%s\" %logpath;\r\n	tdkTestObj.transferLogs(logpath, \"false\" );\r\nprint \"-----------------------------------------------------------------------------------\"\r\n#print  \"URL for recorder #14 :  \" +dvrObj.getURL(\'#14\')\r\n#print \"-----------------------------------------------------------------------------------\"\r\n#print \"Duration for Recorder #14: \" + dvrObj.getDuration(\'#14\')\r\nprint \"-------------------------------END----------------------------------------------------\"							','FREE','				'),(164,6,'test-ocaptune',43,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"ocap\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n#Prmitive test case which associated to this Script\r\ntdkTestObj = obj.createTestStep(\'ocaptune\');\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\nobj.unloadModule(\"ocap\");','FREE','				'),(167,103,'Testing_LinearTV',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD_01\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        \r\n        #Framing URL for Request\r\n        url=\"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1269\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"SD channel Tuned and played Successfully\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to tune and play SD Channel\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','				'),(168,23,'GstreamerTest',41,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport re;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"gstreamertestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Gstreamer_execution\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nif \"Success\" in result:\r\n  print \"Gstreamer test module successfully loaded\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'Gstreamer_Test\');\r\n\r\n  # Configuring the test object for gfx test suites execution\r\n  tdkTestObj.addParameter(\"gstreamer_component_type\",\"gstreamer\");\r\n\r\n  #Execute the test case in STB\r\n  tdkTestObj.executeTestCase();\r\n\r\n  #Get the result of execution\r\n  result = tdkTestObj.getResult();\r\n  print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n	\r\n  #Get the log path of the Qt Non-Graphics Testsuite\r\n  logpath =tdkTestObj.getLogPath();\r\n  print \"Log Path :%s\"%logpath;\r\n  tdkTestObj.transferLogs( logpath, \"true\" );\r\n  \r\n  obj.unloadModule(\"gstreamertestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Gstreamer test module\";','FREE','This test involves the testing the Gstreamer component using Gst check test suite. 				'),(170,8,'GstreamerBasePluginTest',41,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"gstreamertestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Gstreamer_execution\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nif \"Success\" in result:\r\n  print \"Gstreamer test module successfully loaded\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'Gstreamer_Test\');\r\n\r\n  # Configuring the test object for gfx test suites execution\r\n  tdkTestObj.addParameter(\"gstreamer_component_type\",\"gst-plugin-base\");\r\n\r\n  #Execute the test case in STB\r\n  tdkTestObj.executeTestCase();\r\n\r\n  #Get the result of execution\r\n  result = tdkTestObj.getResult();\r\n  print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n	\r\n  #Get the log path of the Qt Non-Graphics Testsuite\r\n  logpath =tdkTestObj.getLogPath();\r\n  print \"Log Path :%s\"%logpath;\r\n  tdkTestObj.transferLogs( logpath, \"true\" );	\r\n  obj.unloadModule(\"gstreamertestsuite\");\r\nelse:\r\n  print \"Failed to load Gstreamer test module\";		','FREE','				'),(171,16,'CT_Mediastreamer_01',48,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_01\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"Mediaastreamer module loading status :%s\" %result;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'MediaStreamer_LiveTune\');\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid=streamDetails.getOCAPID()\r\n        tdkTestObj.addParameter(\"ocapId\",validid);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        print \"Live Tune Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #unloading mediastreamer module\r\n                obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n','FREE','				'),(172,3,'GstreamerGoodPluginTest',41,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"gstreamertestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Gstreamer_execution\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nif \"Success\" in result:\r\n  print \"Gstreamer test module successfully loaded\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'Gstreamer_Test\');\r\n\r\n  # Configuring the test object for gfx test suites execution\r\n  tdkTestObj.addParameter(\"gstreamer_component_type\",\"gst-plugin-good\");\r\n\r\n  #Execute the test case in STB\r\n  tdkTestObj.executeTestCase();\r\n\r\n  #Get the result of execution\r\n  result = tdkTestObj.getResult();\r\n  print \"Gstreamer Test Results : %s\" %result;\r\n	\r\n  #Get the log path of the Gstreamer Testsuite\r\n  logpath =tdkTestObj.getLogPath();\r\n  print \"Log Path :%s\"%logpath;\r\n  \r\n  #Transferring the Gstreamer Testsuite Logs\r\n  tdkTestObj.transferLogs( logpath, \"true\" );\r\n  \r\n  #Unload the Gstreamer test module\r\n  obj.unloadModule(\"gstreamertestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Gstreamer test module\";			','FREE','				'),(173,2,'Testing_LinearTV_SD-SD',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD-SD_03\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_GetURL function to send request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x1265\";\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Pre condition-Json Response received successfully\";\r\n                #Calling LinearTV_Play_URL function to play the SD Channel\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"Pre condition-SD channel Tuned and played successfully\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                        #Calling LinearTV_GetURL function to send request url\r\n                        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'03\');\r\n                        channeltype =streamDetails.getChannelType();\r\n                        url2=\"http://192.168.30.162:8080/videoStreamInit?recorderId=T0100190784live=ocap://0x126c\";\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url2);\r\n                        tdkTestObj.executeTestCase();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        # Remove unwanted part from URL\r\n                        PLAYURL2 = details.split(\"[RESULTDETAILS]\");\r\n                        print \"PLAYURL2 = \"+PLAYURL2[-1];\r\n                        result = tdkTestObj.getResult();\r\n                        print \"Result of Json Response : %s\" %result;\r\n                        #Check for SUCCESS/FAILURE of Json response Parameter\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SD-SD channel tune response received successfully\";\r\n                                #Calling LinearTV_Play_URL function to play the SD Channel\r\n                                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL2[-1]);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                print \"Result of Player : %s\" %result;\r\n                                #Check for SUCCESS/FAILURE of playing video\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SD-SD channel tuned and played successfully\";\r\n                                        #Getting the Mplayer log file from DUT\r\n                                        logpath=tdkTestObj.getLogPath();\r\n                                        print \"Log path : %s\" %logpath;\r\n                                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                                else:\r\n                                        print \"Failed to tune and play SD-SD channel\";\r\n                                        #Getting the Mplayer log file from DUT\r\n                                        logpath=tdkTestObj.getLogPath();\r\n                                        print \"Log path : %s\" %logpath;\r\n                                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                        else:\r\n                                print \"Failed to receive tune response SD-SD channel\";\r\n                else:\r\n                        print \"Pre condition-Failed to Tune and Play the SD channel\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Pre condition-Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','				'),(174,13,'TestLinearTv TVM',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD_01\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"LinearTV module loading status :  %s\" %result;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in result.upper():\r\n        print \"LinearTV module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'09\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        #url=\"http://192.168.30.61:8080/videoStreamInit?recorderId=getRecorderID()live=ocap://0x1269\";\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %result;\r\n        #Check for SUCCESS/FAILURE of Json response Parameter\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %result;\r\n                #Check for SUCCESS/FAILURE of playing video\r\n                if \"SUCCESS\" in result:\r\n                        print \"SD channel Tuned and played Successfully\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n                else:\r\n                        print \"Failed to tune and play SD Channel\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                print \"Json response parameter is Failed\";\r\n                #Unloading LinearTV module\r\n                obj.unloadModule(\"lineartv\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','				');
/*!40000 ALTER TABLE `script` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script_group`
--

DROP TABLE IF EXISTS `script_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script_group` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script_group`
--

LOCK TABLES `script_group` WRITE;
/*!40000 ALTER TABLE `script_group` DISABLE KEYS */;
INSERT INTO `script_group` VALUES (9,14,'OpenSourceSuite',NULL),(13,64,'E2ESuite',NULL),(14,1,'DVR_TrickPlay_Suite','FREE'),(15,0,'IARMBUS test suite1','FREE'),(16,0,'IARMBUS test suite 2','FREE'),(17,9,'ComponentSuite','FREE');
/*!40000 ALTER TABLE `script_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script_group_script`
--

DROP TABLE IF EXISTS `script_group_script`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script_group_script` (
  `script_group_scripts_id` bigint(20) DEFAULT NULL,
  `script_id` bigint(20) DEFAULT NULL,
  KEY `FKF6D3D57FE2F1DCCF` (`script_id`),
  KEY `FKF6D3D57F6492105` (`script_group_scripts_id`),
  CONSTRAINT `FKF6D3D57F6492105` FOREIGN KEY (`script_group_scripts_id`) REFERENCES `script_group` (`id`),
  CONSTRAINT `FKF6D3D57FE2F1DCCF` FOREIGN KEY (`script_id`) REFERENCES `script` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script_group_script`
--

LOCK TABLES `script_group_script` WRITE;
/*!40000 ALTER TABLE `script_group_script` DISABLE KEYS */;
INSERT INTO `script_group_script` VALUES (9,54),(13,106),(13,107),(13,108),(13,109),(13,110),(13,112),(13,113),(13,114),(13,115),(13,116),(13,117),(13,118),(13,119),(13,120),(13,121),(13,122),(13,123),(13,124),(13,125),(13,126),(13,127),(13,128),(13,129),(13,130),(13,131),(13,132),(13,133),(13,134),(9,135),(13,146),(13,147),(13,149),(9,150),(13,151),(15,31),(15,32),(15,33),(15,69),(15,70),(15,71),(15,72),(15,73),(15,74),(15,75),(15,76),(15,77),(15,78),(15,79),(15,81),(15,88),(15,89),(15,90),(15,91),(15,92),(16,56),(16,57),(16,68),(16,69),(16,70),(16,71),(16,80),(16,93),(16,94),(16,95),(17,153),(13,154),(13,155),(13,156),(13,157),(13,158),(13,159),(13,160),(13,161),(13,162),(13,163),(13,164),(13,167),(9,168),(9,170),(17,171),(9,172),(13,173),(13,174);
/*!40000 ALTER TABLE `script_group_script` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiro_role`
--

DROP TABLE IF EXISTS `shiro_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `shiro_role` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shiro_role`
--

LOCK TABLES `shiro_role` WRITE;
/*!40000 ALTER TABLE `shiro_role` DISABLE KEYS */;
/*!40000 ALTER TABLE `shiro_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiro_role_permissions`
--

DROP TABLE IF EXISTS `shiro_role_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `shiro_role_permissions` (
  `shiro_role_id` bigint(20) DEFAULT NULL,
  `permissions_string` varchar(255) DEFAULT NULL,
  KEY `FK389B46C98BA4B1D` (`shiro_role_id`),
  CONSTRAINT `FK389B46C98BA4B1D` FOREIGN KEY (`shiro_role_id`) REFERENCES `shiro_role` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shiro_role_permissions`
--

LOCK TABLES `shiro_role_permissions` WRITE;
/*!40000 ALTER TABLE `shiro_role_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `shiro_role_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiro_user`
--

DROP TABLE IF EXISTS `shiro_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `shiro_user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `password_hash` varchar(255) NOT NULL,
  `username` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shiro_user`
--

LOCK TABLES `shiro_user` WRITE;
/*!40000 ALTER TABLE `shiro_user` DISABLE KEYS */;
INSERT INTO `shiro_user` VALUES (1,0,'5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8','user123');
/*!40000 ALTER TABLE `shiro_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiro_user_permissions`
--

DROP TABLE IF EXISTS `shiro_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `shiro_user_permissions` (
  `shiro_user_id` bigint(20) DEFAULT NULL,
  `permissions_string` varchar(255) DEFAULT NULL,
  KEY `FK34555A9EADE50EFD` (`shiro_user_id`),
  CONSTRAINT `FK34555A9EADE50EFD` FOREIGN KEY (`shiro_user_id`) REFERENCES `shiro_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shiro_user_permissions`
--

LOCK TABLES `shiro_user_permissions` WRITE;
/*!40000 ALTER TABLE `shiro_user_permissions` DISABLE KEYS */;
INSERT INTO `shiro_user_permissions` VALUES (1,'*:*');
/*!40000 ALTER TABLE `shiro_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiro_user_roles`
--

DROP TABLE IF EXISTS `shiro_user_roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `shiro_user_roles` (
  `shiro_role_id` bigint(20) NOT NULL,
  `shiro_user_id` bigint(20) NOT NULL,
  PRIMARY KEY (`shiro_user_id`,`shiro_role_id`),
  KEY `FKBA221057ADE50EFD` (`shiro_user_id`),
  KEY `FKBA2210578BA4B1D` (`shiro_role_id`),
  CONSTRAINT `FKBA2210578BA4B1D` FOREIGN KEY (`shiro_role_id`) REFERENCES `shiro_role` (`id`),
  CONSTRAINT `FKBA221057ADE50EFD` FOREIGN KEY (`shiro_user_id`) REFERENCES `shiro_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shiro_user_roles`
--

LOCK TABLES `shiro_user_roles` WRITE;
/*!40000 ALTER TABLE `shiro_user_roles` DISABLE KEYS */;
/*!40000 ALTER TABLE `shiro_user_roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `socvendor`
--

DROP TABLE IF EXISTS `socvendor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `socvendor` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `socvendor`
--

LOCK TABLES `socvendor` WRITE;
/*!40000 ALTER TABLE `socvendor` DISABLE KEYS */;
INSERT INTO `socvendor` VALUES (1,0,'Parker'),(2,0,'Px001bn'),(3,0,'Rng150'),(4,0,'Intel'),(5,0,'Broadcom – MIPS'),(6,0,'Broadcom - ARM');
/*!40000 ALTER TABLE `socvendor` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `streaming_details`
--

DROP TABLE IF EXISTS `streaming_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `streaming_details` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `audio_format` varchar(255) NOT NULL,
  `channel_type` varchar(255) NOT NULL,
  `gateway_ip` varchar(255) NOT NULL,
  `ocap_id` varchar(255) NOT NULL,
  `recorder_id` varchar(255) NOT NULL,
  `stream_id` varchar(64) NOT NULL,
  `video_format` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `stream_id` (`stream_id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `streaming_details`
--

LOCK TABLES `streaming_details` WRITE;
/*!40000 ALTER TABLE `streaming_details` DISABLE KEYS */;
INSERT INTO `streaming_details` VALUES (4,14,'ac3','SD','192.168.30.162','0x126a','T0100190784','01','mpeg2'),(5,3,'ac3','HD','192.168.30.162','0x1022','T0100190784','02','mpeg4'),(6,4,'aac','SD','192.168.30.162','0x1268','T0100190784','03','mpeg2'),(7,4,'aac','HD','192.168.30.162','0x21fb','T0100190784','04','mpeg4'),(8,1,'mp3','HD','192.168.30.162','0x21fb','T0100190784','05','mpeg2'),(9,1,'mp3','HD','192.168.30.162','0x2500','T0100190784','06','mpeg4'),(10,1,'wav','HD','192.168.30.162','0x1269','T0100190784','07','mpeg2'),(11,1,'wav','HD','192.168.30.162','0x1265','T0100190784','08','mpeg4'),(12,1,'ac3','HD','192.168.30.162','0x2897','T0100190784','09','h264'),(13,1,'aac','HD','192.168.30.162','0x2f13','T0100190784','10','h264'),(14,1,'mp3','HD','192.168.30.162','0x2f58','T0100190784','11','h264'),(15,2,'wav','HD','192.168.30.162','0x1ca3','T0100190784','12','h264');
/*!40000 ALTER TABLE `streaming_details` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-07-09 17:49:14
