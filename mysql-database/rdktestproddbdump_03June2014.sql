-- MySQL dump 10.13  Distrib 5.5.34, for debian-linux-gnu (i686)
--
-- Host: localhost    Database: rdktesttoolproddb
-- ------------------------------------------------------
-- Server version	5.5.34-0ubuntu0.12.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `box_manufacturer`
--

DROP TABLE IF EXISTS `box_manufacturer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box_manufacturer` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `FK3D2E11C5984B586A` (`groups_id`),
  CONSTRAINT `FK3D2E11C5984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box_manufacturer`
--

LOCK TABLES `box_manufacturer` WRITE;
/*!40000 ALTER TABLE `box_manufacturer` DISABLE KEYS */;
INSERT INTO `box_manufacturer` VALUES (2,0,'Broadcom',NULL),(3,0,'Cisco',NULL),(4,0,'Entropic',NULL),(5,0,'Humax',NULL),(6,0,'Intel',NULL),(7,0,'Motorola',NULL),(8,0,'Pace',NULL),(9,0,'Samsung',NULL),(10,0,'Technicolor',NULL);
/*!40000 ALTER TABLE `box_manufacturer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `box_model`
--

DROP TABLE IF EXISTS `box_model`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box_model` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `FK411117B5984B586A` (`groups_id`),
  CONSTRAINT `FK411117B5984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box_model`
--

LOCK TABLES `box_model` WRITE;
/*!40000 ALTER TABLE `box_model` DISABLE KEYS */;
/*!40000 ALTER TABLE `box_model` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `box_type`
--

DROP TABLE IF EXISTS `box_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box_type` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `type` varchar(255) NOT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `FK863DB12E984B586A` (`groups_id`),
  CONSTRAINT `FK863DB12E984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box_type`
--

LOCK TABLES `box_type` WRITE;
/*!40000 ALTER TABLE `box_type` DISABLE KEYS */;
INSERT INTO `box_type` VALUES (1,0,'IPClient-3','Client',NULL),(2,0,'Hybrid-1','Gateway',NULL),(3,0,'Hybrid-5','Gateway',NULL);
/*!40000 ALTER TABLE `box_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `device`
--

DROP TABLE IF EXISTS `device`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `box_manufacturer_id` bigint(20) NOT NULL,
  `box_type_id` bigint(20) NOT NULL,
  `device_status` varchar(255) NOT NULL,
  `socvendor_id` bigint(20) NOT NULL,
  `stb_ip` varchar(255) NOT NULL,
  `stb_name` varchar(255) NOT NULL,
  `stb_port` varchar(255) NOT NULL,
  `gateway_ip` varchar(255) DEFAULT NULL,
  `recorder_id` varchar(255) DEFAULT NULL,
  `upload_binary_status` varchar(255) NOT NULL,
  `log_transfer_port` varchar(255) NOT NULL,
  `status_port` varchar(255) NOT NULL,
  `mac_id` varchar(255) DEFAULT NULL,
  `child_devices` varchar(255) DEFAULT NULL,
  `is_child` int(11) NOT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  `agent_monitor_port` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `stb_name` (`stb_name`),
  KEY `FKB06B1E56D70E4BBC` (`box_manufacturer_id`),
  KEY `FKB06B1E5641CE91C` (`box_type_id`),
  KEY `FKB06B1E565DC65445` (`socvendor_id`),
  KEY `FKB06B1E56984B586A` (`groups_id`),
  CONSTRAINT `FKB06B1E5641CE91C` FOREIGN KEY (`box_type_id`) REFERENCES `box_type` (`id`),
  CONSTRAINT `FKB06B1E565DC65445` FOREIGN KEY (`socvendor_id`) REFERENCES `socvendor` (`id`),
  CONSTRAINT `FKB06B1E56984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`),
  CONSTRAINT `FKB06B1E56D70E4BBC` FOREIGN KEY (`box_manufacturer_id`) REFERENCES `box_manufacturer` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1236 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `device_details`
--

DROP TABLE IF EXISTS `device_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device_details` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `device_id` bigint(20) NOT NULL,
  `device_parameter` varchar(255) NOT NULL,
  `device_value` longtext,
  PRIMARY KEY (`id`),
  KEY `FKD2D30159EC4FF12A` (`device_id`),
  CONSTRAINT `FKD2D30159EC4FF12A` FOREIGN KEY (`device_id`) REFERENCES `device` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=469 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `device_device`
--

DROP TABLE IF EXISTS `device_device`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device_device` (
  `device_child_devices_id` bigint(20) DEFAULT NULL,
  `device_id` bigint(20) DEFAULT NULL,
  `child_devices_idx` int(11) DEFAULT NULL,
  KEY `FKABF7505FBC11ECEF` (`device_id`),
  CONSTRAINT `FKABF7505FBC11ECEF` FOREIGN KEY (`device_id`) REFERENCES `device` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `device_group`
--

DROP TABLE IF EXISTS `device_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device_group` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `FKDC71DF56984B586A` (`groups_id`),
  CONSTRAINT `FKDC71DF56984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;


--
-- Table structure for table `device_group_device`
--

DROP TABLE IF EXISTS `device_group_device`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device_group_device` (
  `device_group_devices_id` bigint(20) DEFAULT NULL,
  `device_id` bigint(20) DEFAULT NULL,
  KEY `FKD0056F5FBC11ECEF` (`device_id`),
  KEY `FKD0056F5FE4F3C3A` (`device_group_devices_id`),
  CONSTRAINT `FKD0056F5FBC11ECEF` FOREIGN KEY (`device_id`) REFERENCES `device` (`id`),
  CONSTRAINT `FKD0056F5FE4F3C3A` FOREIGN KEY (`device_group_devices_id`) REFERENCES `device_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;


--
-- Table structure for table `device_stream`
--

DROP TABLE IF EXISTS `device_stream`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device_stream` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `device_id` bigint(20) NOT NULL,
  `ocap_id` varchar(255) NOT NULL,
  `stream_id` bigint(20) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FKC66181895BBC466F` (`stream_id`),
  KEY `FKC6618189BC11ECEF` (`device_id`),
  CONSTRAINT `FKC66181895BBC466F` FOREIGN KEY (`stream_id`) REFERENCES `streaming_details` (`id`),
  CONSTRAINT `FKC6618189BC11ECEF` FOREIGN KEY (`device_id`) REFERENCES `device` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=517 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `execute_method_result`
--

DROP TABLE IF EXISTS `execute_method_result`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `execute_method_result` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `actual_result` varchar(255) DEFAULT NULL,
  `execution_result_id` bigint(20) NOT NULL,
  `expected_result` varchar(255) DEFAULT NULL,
  `function_name` varchar(255) DEFAULT NULL,
  `status` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKA1287DF19FCEDC3B` (`execution_result_id`),
  CONSTRAINT `FKA1287DF19FCEDC3B` FOREIGN KEY (`execution_result_id`) REFERENCES `execution_result` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=162918 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `execution`
--

DROP TABLE IF EXISTS `execution`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `execution` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `date_of_execution` datetime DEFAULT NULL,
  `device` varchar(255) DEFAULT NULL,
  `device_group` varchar(255) DEFAULT NULL,
  `execution_time` varchar(255) DEFAULT NULL,
  `is_marked` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `output_data` longtext,
  `result` varchar(255) DEFAULT NULL,
  `script` varchar(255) DEFAULT NULL,
  `script_group` varchar(255) DEFAULT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  `is_performance_done` bit(1) NOT NULL,
  `execution_status` varchar(255) DEFAULT NULL,
  `is_aborted` bit(1) NOT NULL,
  `application_url` varchar(255) DEFAULT NULL,
  `is_bench_mark_enabled` bit(1) NOT NULL,
  `is_rerun_required` bit(1) NOT NULL,
  `is_system_diagnostics_enabled` bit(1) NOT NULL,
  `third_party_execution_details_id` bigint(20) DEFAULT NULL,
  `script_count` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `FKBEF90B18984B586A` (`groups_id`),
  KEY `FKBEF90B18D2187869` (`third_party_execution_details_id`),
  CONSTRAINT `FKBEF90B18984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`),
  CONSTRAINT `FKBEF90B18D2187869` FOREIGN KEY (`third_party_execution_details_id`) REFERENCES `third_party_execution_details` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5566 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `execution_device`
--

DROP TABLE IF EXISTS `execution_device`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `execution_device` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `date_of_execution` datetime DEFAULT NULL,
  `device` varchar(255) NOT NULL,
  `device_ip` varchar(255) NOT NULL,
  `execution_id` bigint(20) NOT NULL,
  `execution_time` varchar(255) DEFAULT NULL,
  `status` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FKE2CBE55D8358C58A` (`execution_id`),
  CONSTRAINT `FKE2CBE55D8358C58A` FOREIGN KEY (`execution_id`) REFERENCES `execution` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5559 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `execution_result`
--

DROP TABLE IF EXISTS `execution_result`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `execution_result` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `device` varchar(255) NOT NULL,
  `execution_id` bigint(20) NOT NULL,
  `execution_device_id` bigint(20) NOT NULL,
  `execution_output` longtext,
  `script` varchar(255) NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  `exec_device_id` bigint(20) DEFAULT NULL,
  `device_id_string` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKFAAE8F24F5E1059B` (`execution_device_id`),
  KEY `FKFAAE8F248358C58A` (`execution_id`),
  KEY `FKFAAE8F241B03E2FC` (`exec_device_id`),
  CONSTRAINT `FKFAAE8F241B03E2FC` FOREIGN KEY (`exec_device_id`) REFERENCES `device` (`id`),
  CONSTRAINT `FKFAAE8F248358C58A` FOREIGN KEY (`execution_id`) REFERENCES `execution` (`id`),
  CONSTRAINT `FKFAAE8F24F5E1059B` FOREIGN KEY (`execution_device_id`) REFERENCES `execution_device` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=21661 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;


--
-- Table structure for table `function`
--

DROP TABLE IF EXISTS `function`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `function` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `module_id` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK524F73D86DEEED2F` (`module_id`),
  CONSTRAINT `FK524F73D86DEEED2F` FOREIGN KEY (`module_id`) REFERENCES `module` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=422 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `function`
--

LOCK TABLES `function` WRITE;
/*!40000 ALTER TABLE `function` DISABLE KEYS */;
INSERT INTO `function` VALUES (17,0,7,'TestMgr_E2ELinearTV_GetURL'),(18,0,8,'TestMgr_IARMBUS_Init'),(19,0,8,'TestMgr_IARMBUS_Connect'),(20,0,8,'TestMgr_IARMBUS_Disconnect'),(21,0,8,'TestMgr_IARMBUS_Term'),(22,0,8,'TestMgr_IARMBUS_BusCall'),(23,0,7,'TestMgr_E2ELinearTV_PlayURL'),(24,0,8,'TestMgr_IARMBUS_RegisterCall'),(25,0,8,'TestMgr_IARMBUS_RequestResource'),(26,0,8,'TestMgr_IARMBUS_ReleaseResource'),(29,0,8,'TestMgr_IARMBUS_BroadcastEvent'),(30,0,8,'TestMgr_IARMBUS_InvokeSecondApplication'),(31,0,8,'TestMgr_IARMBUS_RegisterEventHandler'),(32,0,8,'TestMgr_IARMBUS_UnRegisterEventHandler'),(37,0,8,'TestMgr_IARMBUS_IsConnected'),(38,0,8,'TestMgr_IARMBUS_RegisterEvent'),(40,0,8,'TestMgr_IARMBUS_GetContext'),(41,0,8,'TestMgr_IARMBUS_GetLastReceivedEventDetails'),(60,0,17,'TestMgr_E2EStub_GetRecURLS'),(61,0,17,'TestMgr_E2EStub_PlayURL'),(74,0,24,'TestMgr_Opensource_Test_Execute'),(75,0,25,'TestMgr_DS_FP_setColor'),(76,0,25,'TestMgr_DS_managerInitialize'),(77,0,25,'TestMgr_DS_managerDeinitialize'),(78,0,25,'TestMgr_DS_FP_setBrightness'),(79,0,25,'TestMgr_DS_FP_setBlink'),(80,0,25,'TestMgr_DS_FP_setScroll'),(81,0,25,'TestMgr_DS_AOP_setLevel'),(82,0,25,'TestMgr_DS_AOP_setDB'),(83,0,25,'TestMgr_DS_VD_setDFC'),(84,0,25,'TestMgr_DS_AOP_setEncoding'),(85,0,25,'TestMgr_DS_AOP_setCompression'),(86,0,25,'TestMgr_DS_AOP_setStereoMode'),(87,0,25,'TestMgr_DS_HOST_setPowerMode'),(88,0,25,'TestMgr_DS_VOP_setResolution'),(89,0,25,'TestMgr_DS_FP_getIndicators'),(90,0,25,'TestMgr_DS_FP_FP_getSupportedColors'),(91,0,25,'TestMgr_DS_FP_getTextDisplays'),(92,0,25,'TestMgr_DS_FP_setText'),(93,0,25,'TestMgr_DS_FP_setTimeForamt'),(94,0,25,'TestMgr_DS_FP_setTime'),(95,0,25,'TestMgr_DS_AOP_loopThru'),(96,0,25,'TestMgr_DS_AOP_mutedStatus'),(97,0,25,'TestMgr_DS_AOP_getSupportedEncodings'),(98,0,25,'TestMgr_DS_AOP_getSupportedCompressions'),(99,0,25,'TestMgr_DS_AOP_getSupportedStereoModes'),(100,0,25,'TestMgr_DS_HOST_addPowerModeListener'),(101,0,25,'TestMgr_DS_HOST_removePowerModeListener'),(102,0,25,'TestMgr_DS_HOST_Resolutions'),(103,0,25,'TestMgr_DS_VOPTYPE_HDCPSupport'),(104,0,25,'TestMgr_DS_VOPTYPE_DTCPSupport'),(105,0,25,'TestMgr_DS_VOP_getAspectRatio'),(106,0,25,'TestMgr_DS_VOP_getDisplayDetails'),(107,0,25,'TestMgr_DS_VOPTYPE_isDynamicResolutionSupported'),(108,0,22,'TestMgr_MediaStreamer_LiveTune_Request'),(110,0,22,'TestMgr_MediaStreamer_Recorded_Urls'),(111,0,22,'TestMgr_MediaStreamer_Recorded_Metadata'),(112,0,22,'TestMgr_MediaStreamer_Live_Playback'),(113,0,22,'TestMgr_MediaStreamer_Recording_Playback'),(115,0,22,'TestMgr_MediaStreamer_DVR_Trickplay'),(117,0,25,'TestMgr_DS_VOP_isContentProtected'),(118,0,25,'TestMgr_DS_VOP_isDisplayConnected'),(122,0,25,'TestMgr_DS_HOST_addDisplayConnectionListener'),(123,0,25,'TestMgr_DS_HOST_removeDisplayConnectionListener'),(124,0,27,'TestMgr_SM_RegisterService'),(125,0,27,'TestMgr_SM_UnRegisterService'),(126,0,27,'TestMgr_SM_DoesServiceExist'),(128,0,22,'TestMgr_MediaStreamer_Recording_Request'),(129,0,27,'TestMgr_SM_GetRegisteredServices'),(142,0,39,'TestMgr_rmfapp_Test_Execute'),(149,0,27,'TestMgr_SM_GetGlobalService'),(150,0,27,'TestMgr_SM_HN_EnableMDVR'),(151,0,27,'TestMgr_SM_HN_EnableVPOP'),(152,0,27,'TestMgr_SM_HN_SetDeviceName'),(153,0,27,'TestMgr_SM_SetAPIVersion'),(154,0,27,'TestMgr_SM_RegisterForEvents'),(156,0,27,'TestMgr_SM_DisplaySetting_SetZoomSettings'),(157,0,27,'TestMgr_SM_DisplaySetting_SetCurrentResolution'),(158,0,35,'TestMgr_CC_Init'),(164,0,35,'TestMgr_CC_SetGetDigitalChannel'),(166,0,35,'TestMgr_CC_SetGetAnalogChannel'),(167,0,35,'TestMgr_CC_Show'),(168,0,35,'TestMgr_CC_Hide'),(173,0,35,'TestMgr_CC_SetGetAttribute'),(174,0,35,'TestMgr_CC_GetSupportedServiceNumberCount'),(175,0,35,'TestMgr_CC_GetSupportedServiceNumber'),(177,0,35,'TestMgr_CC_SetGetState'),(179,0,35,'TestMgr_CC_OnEasStart'),(180,0,35,'TestMgr_CC_OnEasStop'),(181,0,35,'TestMgr_CC_ResetTrickPlayStatus'),(182,0,35,'TestMgr_CC_SetTrickPlayStatus'),(189,0,7,'TestMgr_E2ELinearTV_T2pTuning'),(192,0,42,'TestMgr_newrmf_Appplay'),(194,0,7,'TestMgr_E2ELinearTV_T2pTrickMode'),(201,0,44,'TestMgr_MPSink_SetGetMute'),(202,0,44,'TestMgr_MPSink_SetGetVolume'),(207,0,44,'TestMgr_HNSrc_GetBufferedRanges'),(208,0,44,'TestMgr_HNSrc_GetState'),(211,0,44,'TestMgr_HNSrcMPSink_Video_Pause'),(212,0,44,'TestMgr_MPSink_InitTerm'),(216,0,44,'TestMgr_HNSrcMPSink_Video_Speed'),(223,0,44,'TestMgr_HNSrcMPSink_Video_Play'),(224,0,44,'TestMgr_HNSrcMPSink_Video_State'),(227,0,44,'TestMgr_HNSrcMPSink_Video_Skip_Backward'),(230,0,44,'TestMgr_HNSrcMPSink_Video_Volume'),(231,0,44,'TestMgr_HNSrcMPSink_Video_Play_Position'),(232,0,44,'TestMgr_HNSrcMPSink_Video_MuteUnmute'),(270,0,44,'TestMgr_DVRSink_init_term'),(277,0,51,'TestMgr_RDKLogger_Dbg_Enabled_Status'),(278,0,51,'TestMgr_RDKLogger_EnvGet'),(279,0,51,'TestMgr_RDKLogger_EnvGetNum'),(280,0,51,'TestMgr_RDKLogger_EnvGetValueFromNum'),(281,0,51,'TestMgr_RDKLogger_EnvGetModFromNum'),(282,0,51,'TestMgr_RDKLogger_Init'),(283,0,51,'TestMgr_RDKLogger_Log'),(285,0,44,'TestMgr_QAMSource_Play'),(292,0,44,'TestMgr_QAMSource_InitTerm'),(293,0,44,'TestMgr_QAMSource_OpenClose'),(294,0,44,'TestMgr_QAMSource_Pause'),(295,0,44,' TestMgr_QAMSource_GetTsId'),(296,0,44,'TestMgr_QAMSource_GetLtsId'),(297,0,44,'TestMgr_QAMSource_GetQAMSourceInstance'),(298,0,44,'TestMgr_QAMSource_Init_Uninit_Platform'),(299,0,44,'TestMgr_QAMSource_GetUseFactoryMethods'),(300,0,44,'TestMgr_QAMSource_Get_Free_LowLevelElement'),(301,0,44,'TestMgr_QAMSource_ChangeURI'),(302,0,44,'TestMgr_DVRManager_GetSpace'),(303,0,44,'TestMgr_DVRManager_GetRecordingCount'),(304,0,44,'TestMgr_DVRManager_GetRecordingInfoByIndex'),(305,0,44,'TestMgr_DVRManager_GetRecordingInfoById'),(306,0,44,'TestMgr_DVRManager_GetIsRecordingInProgress'),(307,0,44,'TestMgr_DVRManager_GetRecordingSize'),(308,0,44,'TestMgr_DVRManager_GetRecordingDuration'),(309,0,44,'TestMgr_DVRManager_GetRecordingStartTime'),(310,0,44,'TestMgr_DVRManager_GetDefaultTSBMaxDuration'),(311,0,44,'TestMgr_DVRManager_CreateTSB'),(312,0,44,'TestMgr_DVRManager_CreateRecording'),(313,0,44,'TestMgr_DVRManager_UpdateRecording'),(314,0,44,'TestMgr_DVRManager_DeleteRecording'),(315,0,44,'TestMgr_DVRManager_GetSegmentsCount'),(316,0,44,'TestMgr_DVRManager_ConvertTSBToRecording'),(317,0,44,'TestMgr_DVRManager_GetRecordingSegmentInfoByIndex'),(326,0,56,'TestMgr_Dvr_Play_Pause'),(328,0,56,'TestMgr_Dvr_Play_TrickPlay_FF_FR'),(329,0,56,'TestMgr_LinearTv_Dvr_Play'),(330,0,56,'TestMgr_Dvr_Play_TrickPlay_RewindFromEndPoint'),(331,0,56,'TestMgr_Dvr_Pause_Play'),(332,0,56,'TestMgr_Dvr_Play_Pause_Play'),(333,0,56,'TestMgr_Dvr_Play_Pause_Play_Repeat'),(334,0,56,'TestMgr_Dvr_Skip_Forward_Play'),(335,0,56,'TestMgr_Dvr_Skip_Forward_From_Middle'),(336,0,56,'TestMgr_Dvr_Skip_Forward_From_End'),(337,0,56,'TestMgr_Dvr_Skip_Backward_From_End'),(338,0,56,'TestMgr_Dvr_Skip_Backward_From_Middle'),(339,0,56,'TestMgr_Dvr_Skip_Backward_From_Starting'),(340,0,56,'TestMgr_Dvr_Play_Rewind_Forward'),(341,0,56,'TestMgr_Dvr_Play_Forward_Rewind'),(343,0,56,'TestMgr_Dvr_Play_FF_FR_Pause_Play'),(344,0,56,'TestMgr_Dvr_Play_Pause_FF_FR'),(345,0,56,'TestMgr_Dvr_Play_Pause_Play_SF_SB'),(346,0,56,'TestMgr_Dvr_Play_FF_FR_SF_SB'),(347,0,56,'TestMgr_Dvr_Play_Pause_Pause'),(348,0,56,'TestMgr_Dvr_Play_Play'),(349,0,56,'TestMgr_RF_Video_ChannelChange'),(350,0,22,'TestMgr_RMFStreamer_InterfaceTesting'),(351,0,22,'TestMgr_RMFStreamer_Player'),(352,0,56,'TestMgr_LiveTune_GETURL'),(353,0,44,'TestMgr_DVR_Rec_List'),(354,0,44,'TestMgr_RmfElementCreateInstance'),(355,0,44,'TestMgr_RmfElementInit'),(356,0,44,'TestMgr_RmfElementTerm'),(357,0,44,'TestMgr_RmfElementOpen'),(358,0,44,'TestMgr_RmfElementClose'),(359,0,44,'TestMgr_RmfElementRemoveInstance'),(360,0,44,'TestMgr_RmfElementPlay'),(361,0,44,'TestMgr_RmfElement_Sink_SetSource'),(362,0,44,'TestMgr_RmfElement_MpSink_SetVideoRectangle'),(363,0,44,'TestMgr_RmfElementSetSpeed'),(364,0,44,'TestMgr_RmfElementGetSpeed'),(365,0,44,'TestMgr_RmfElementGetMediaTime'),(366,0,44,'TestMgr_RmfElementGetState'),(367,0,44,'TestMgr_RmfElementPause'),(368,0,44,'TestMgr_RmfElementSetMediaTime'),(369,0,44,'TestMgr_RmfElementGetMediaInfo'),(370,0,57,'Xi4Init'),(371,0,58,'TestMgr_Recorder_ScheduleRecording'),(372,0,58,'TestMgr_Recorder_checkRecording_status'),(373,0,44,'TestMgr_DVRManager_CheckRecordingInfoById'),(374,0,44,'TestMgr_DVRManager_CheckRecordingInfoByIndex'),(375,0,59,'TestMgr_HybridE2E_T2pTuning'),(376,0,59,'TestMgr_HybridE2E_T2pTrickMode'),(378,0,59,'TestMgr_E2EStub_PlayURL'),(379,0,59,'TestMgr_E2EStub_GetRecURLS'),(380,0,59,'TestMgr_E2ELinearTV_GetURL'),(381,0,59,'TestMgr_E2ELinearTV_PlayURL'),(382,0,59,'TestMgr_Dvr_Play_Pause'),(383,0,59,'TestMgr_Dvr_Play_TrickPlay_FF_FR'),(384,0,59,'TestMgr_LinearTv_Dvr_Play'),(385,0,59,'TestMgr_Dvr_Play_TrickPlay_RewindFromEndPoint'),(386,0,59,'TestMgr_Dvr_Pause_Play'),(387,0,59,'TestMgr_Dvr_Play_Pause_Play'),(388,0,59,'TestMgr_Dvr_Play_Pause_Play_Repeat'),(389,0,59,'TestMgr_Dvr_Skip_Forward_Play'),(390,0,59,'TestMgr_Dvr_Skip_Forward_From_Middle'),(391,0,59,'TestMgr_Dvr_Skip_Forward_From_End'),(392,0,59,'TestMgr_Dvr_Skip_Backward_From_End'),(393,0,59,'TestMgr_Dvr_Skip_Backward_From_Middle'),(394,0,59,'TestMgr_Dvr_Skip_Backward_From_Starting'),(395,0,59,'TestMgr_Dvr_Play_Rewind_Forward'),(396,0,59,'TestMgr_Dvr_Play_Forward_Rewind'),(397,0,59,'TestMgr_Dvr_Play_FF_FR_Pause_Play'),(398,0,59,'TestMgr_Dvr_Play_Pause_FF_FR'),(399,0,59,'TestMgr_Dvr_Play_Pause_Play_SF_SB'),(400,0,59,'TestMgr_Dvr_Play_FF_FR_SF_SB'),(401,0,59,'TestMgr_Dvr_Play_Pause_Pause'),(402,0,59,'TestMgr_Dvr_Play_Play'),(403,0,59,'TestMgr_LiveTune_GETURL'),(404,0,59,'TestMgr_RF_Video_ChannelChange'),(405,0,44,'TestMgr_RmfElement_DVRManagerCreateRecording'),(407,0,44,'TestMgr_RmfElement_QAMSrc_RmfPlatform_Init'),(408,0,44,'TestMgr_RmfElement_QAMSrc_RmfPlatform_Uninit'),(409,0,44,'TestMgr_RmfElement_QAMSrc_InitPlatform'),(410,0,44,'TestMgr_RmfElement_QAMSrc_UninitPlatform'),(412,0,44,'TestMgr_RmfElement_QAMSrc_GetTSID'),(413,0,44,'TestMgr_RmfElement_QAMSrc_GetLTSID'),(414,0,44,'TestMgr_RmfElement_QAMSrc_GetLowLevelElement'),(415,0,44,'TestMgr_RmfElement_QAMSrc_FreeLowLevelElement'),(416,0,44,'TestMgr_RmfElement_QAMSrc_ChangeURI'),(417,0,44,'TestMgr_RmfElement_QAMSrc_UseFactoryMethods'),(418,0,44,'TestMgr_RmfElement_HNSink_InitPlatform'),(419,0,44,'TestMgr_RmfElement_HNSink_UninitPlatform'),(420,0,44,'TestMgr_RmfElement_HNSink_SetProperties'),(421,0,44,'TestMgr_RmfElement_HNSink_SetSourceType');
/*!40000 ALTER TABLE `function` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `groups`
--

DROP TABLE IF EXISTS `groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `groups` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `groups`
--

LOCK TABLES `groups` WRITE;
/*!40000 ALTER TABLE `groups` DISABLE KEYS */;
INSERT INTO `groups` VALUES (1,0,'RDK LLC'),(2,0,'Time Warner'),(3,0,'Comcast'),(4,0,'Tata Elxsi');
/*!40000 ALTER TABLE `groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `job_details`
--

DROP TABLE IF EXISTS `job_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `job_details` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `app_url` varchar(255) NOT NULL,
  `device` varchar(255) DEFAULT NULL,
  `device_group` varchar(255) DEFAULT NULL,
  `file_path` varchar(255) NOT NULL,
  `job_name` varchar(255) NOT NULL,
  `real_path` varchar(255) NOT NULL,
  `schedule_type` varchar(255) DEFAULT NULL,
  `script_group` varchar(255) DEFAULT NULL,
  `trigger_name` varchar(255) NOT NULL,
  `end_date` datetime DEFAULT NULL,
  `one_time_schedule_date` datetime DEFAULT NULL,
  `query_string` varchar(255) DEFAULT NULL,
  `start_date` datetime DEFAULT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  `is_bench_mark` varchar(255) DEFAULT NULL,
  `is_system_diagnostics` varchar(255) DEFAULT NULL,
  `repeat_count` int(11) NOT NULL,
  `rerun` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK3E2527C0984B586A` (`groups_id`),
  CONSTRAINT `FK3E2527C0984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=95 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `job_details_script`
--

DROP TABLE IF EXISTS `job_details_script`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `job_details_script` (
  `job_details_id` bigint(20) DEFAULT NULL,
  `script_string` varchar(255) DEFAULT NULL,
  `script_idx` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `module`
--

DROP TABLE IF EXISTS `module`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `module` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `rdk_version` varchar(255) NOT NULL,
  `test_group` varchar(255) NOT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  `execution_time` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `FKC04BA66C984B586A` (`groups_id`),
  CONSTRAINT `FKC04BA66C984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `module`
--

LOCK TABLES `module` WRITE;
/*!40000 ALTER TABLE `module` DISABLE KEYS */;
INSERT INTO `module` VALUES (7,1,'LinearTV','1.2','E2E',NULL,2),(8,6,'IARMBUS ','1.2','Component',NULL,3),(17,1,'End-to-end','1.2','E2E',NULL,5),(22,2,'Mediastreamer','1.2','Component',NULL,3),(24,0,'OpenSource_Components','1.2','OpenSource',NULL,0),(25,3,'DeviceSettings','1.2','Component',NULL,3),(27,1,'ServiceManager','1.3','Component',NULL,2),(35,0,'ClosedCaption','1.2','Component',NULL,0),(39,0,'rmfapp','2.0','E2E',NULL,0),(42,0,'newrmf','RDK2.0','Component',NULL,0),(44,2,'Mediaframework','2.0','Component',NULL,3),(51,0,'RDKLogger','2.0','Component',NULL,0),(56,1,'EndToEndRmf','2.0','E2E',NULL,5),(57,0,'Xi4Module1','2.1','Component',NULL,2),(58,0,'Recorder','2.0','Component',NULL,10),(59,0,'tdkintegration','1.3','E2E',NULL,5);
/*!40000 ALTER TABLE `module` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `module_log_file_names`
--

DROP TABLE IF EXISTS `module_log_file_names`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `module_log_file_names` (
  `module_id` bigint(20) DEFAULT NULL,
  `log_file_names_string` varchar(255) DEFAULT NULL,
  KEY `FKE56384D39E2CF16A` (`module_id`),
  CONSTRAINT `FKE56384D39E2CF16A` FOREIGN KEY (`module_id`) REFERENCES `module` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `module_log_file_names`
--

LOCK TABLES `module_log_file_names` WRITE;
/*!40000 ALTER TABLE `module_log_file_names` DISABLE KEYS */;
INSERT INTO `module_log_file_names` VALUES (8,'/opt/logs/uimgr_log.txt'),(22,'/opt/logs/ocapri_log.txt');
/*!40000 ALTER TABLE `module_log_file_names` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `parameter`
--

DROP TABLE IF EXISTS `parameter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameter` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `parameter_type_id` bigint(20) NOT NULL,
  `primitive_test_id` bigint(20) DEFAULT NULL,
  `value` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK747EB3A9C5F1CB98` (`parameter_type_id`),
  KEY `FK747EB3A967097214` (`primitive_test_id`),
  CONSTRAINT `FK747EB3A967097214` FOREIGN KEY (`primitive_test_id`) REFERENCES `primitive_test` (`id`),
  CONSTRAINT `FK747EB3A9C5F1CB98` FOREIGN KEY (`parameter_type_id`) REFERENCES `parameter_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1865 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameter`
--

LOCK TABLES `parameter` WRITE;
/*!40000 ALTER TABLE `parameter` DISABLE KEYS */;
INSERT INTO `parameter` VALUES (9,1,20,4,'agent'),(16,1,27,9,'ReleaseOwnership'),(96,1,35,18,'Daemon'),(97,1,34,18,'1'),(98,1,39,18,'1'),(100,1,40,18,'0'),(101,1,38,18,'1'),(102,1,37,18,'1'),(139,1,29,11,'1'),(140,1,30,12,'1'),(147,1,44,22,'Daemon'),(148,1,43,22,'0'),(149,1,45,23,'0'),(150,1,46,23,'Daemon'),(152,1,49,25,'agent'),(154,1,32,20,'http:url'),(163,1,51,27,'2'),(200,1,63,38,'http://'),(203,1,64,40,'http://'),(322,1,82,53,''),(323,1,81,53,''),(324,1,127,55,'HDMI0'),(325,1,125,56,'0'),(327,1,108,59,'Power'),(328,1,121,60,'HDMI0'),(330,1,120,62,'HDMI0'),(331,1,122,63,'HDMI0'),(332,1,124,65,'0'),(333,1,128,66,'HDMI0'),(334,1,116,67,'1'),(335,1,117,67,'HDMI0'),(338,1,123,72,'HDMI0'),(350,1,102,78,'LIGHT'),(351,1,101,78,'HDMI0'),(352,1,98,79,'Full'),(358,1,105,82,'1'),(359,1,106,83,'HDMI0'),(360,1,107,83,'1080i'),(361,1,91,84,'1'),(362,1,92,84,'2'),(363,1,93,84,'Text'),(364,1,90,84,'3'),(365,1,103,85,'HDMI0'),(366,1,104,85,'SURROUND'),(367,1,110,86,'Text'),(368,1,109,86,'hello'),(369,1,112,87,'Text'),(370,1,111,87,'1'),(375,1,88,75,'1'),(376,1,87,75,'Power'),(377,1,89,75,'2'),(384,1,126,57,'HDMI0'),(393,1,135,95,'0'),(394,1,134,95,'8000'),(401,1,99,81,'HDMI0'),(402,1,100,81,'AC3'),(416,1,118,100,'0'),(417,1,119,100,'HDMI0'),(418,1,137,101,'HDMI0'),(419,1,138,102,'HDMI0'),(423,1,86,76,'100'),(424,1,85,76,'Power'),(426,1,139,106,'homeNetworkingService'),(427,1,141,107,'homeNetworkingService'),(431,1,142,110,'2.12'),(432,1,94,110,'HDMI0'),(435,1,145,111,'validId'),(512,1,152,127,'quit'),(514,1,154,133,'homeNetworkingService'),(516,1,160,135,'homeNetworkingService'),(517,1,159,135,'deviceDiscoveryUpdate'),(518,1,156,136,'1'),(519,1,155,137,'1'),(521,1,158,134,'123'),(522,1,162,134,'homeNetworkingService'),(523,1,161,138,'DeviceName123'),(526,1,166,141,'resolution'),(527,1,164,141,'videodisplay'),(528,1,163,142,'videodisplay'),(529,1,165,142,'zoomlevel'),(530,1,152,126,'help'),(571,1,189,182,'0'),(589,1,193,192,'0'),(598,1,84,77,'1'),(599,1,83,77,'Power'),(609,1,201,195,'1'),(610,1,202,196,'1'),(619,1,143,109,'5'),(620,1,97,109,'HDMI0'),(626,1,207,204,''),(630,1,209,207,'ocap://0x1'),(631,1,210,208,''),(641,1,22,8,'GetRepeatInterval'),(642,1,68,8,'0'),(643,1,25,8,'0'),(644,1,21,8,'IRMgr'),(645,1,26,8,'0'),(646,1,24,8,'1'),(647,1,215,8,'2'),(648,1,214,8,'3'),(666,1,212,209,'/tst_iarmbus'),(929,1,114,80,'2'),(930,1,113,80,'1'),(931,1,115,80,'Text'),(953,1,284,279,'4.0000'),(1315,1,130,92,''),(1323,1,129,88,''),(1355,1,152,398,'launch -source qamsource -sink mediaplayersink ocap://0xA2'),(1360,1,386,401,''),(1361,1,385,401,''),(1443,1,267,288,'0'),(1444,1,264,288,'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa3&tsb=1'),(1445,1,268,288,'1280'),(1446,1,277,288,'0'),(1447,1,266,288,'0'),(1448,1,269,288,'720'),(1482,1,316,287,'1280'),(1483,1,318,287,'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa3&tsb=1'),(1484,1,319,287,'0'),(1485,1,317,287,'720'),(1486,1,315,287,'0'),(1487,1,314,287,'0'),(1488,1,305,289,'720'),(1489,1,302,289,'0'),(1490,1,304,289,'1280'),(1491,1,307,289,'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa3&tsb=1'),(1492,1,301,289,'4.0000'),(1493,1,303,289,'0'),(1494,1,306,289,'0'),(1495,1,140,108,'asd'),(1505,1,394,407,''),(1506,1,393,407,''),(1507,1,387,408,''),(1508,1,390,409,''),(1509,1,395,416,'0'),(1510,1,396,418,'0'),(1511,1,397,419,''),(1512,1,398,421,''),(1513,1,399,422,''),(1514,1,400,423,''),(1515,1,401,424,''),(1516,1,402,425,''),(1517,1,403,429,''),(1518,1,405,430,''),(1519,1,404,430,''),(1531,1,412,442,'0'),(1540,1,421,449,'0'),(1541,1,413,444,''),(1542,1,414,444,''),(1543,1,415,444,'0'),(1544,1,416,444,''),(1548,1,41,19,'http://192.168.161.90:8080/videoStreamInit?recorderId=T0100202151live=ocap://0x2133'),(1571,1,435,461,''),(1576,1,440,464,''),(1579,1,441,465,''),(1580,1,442,465,'-4.00'),(1582,1,444,467,''),(1583,1,445,468,''),(1584,1,446,468,'10'),(1589,1,447,469,''),(1590,1,448,469,'10'),(1591,1,449,469,'1'),(1592,1,450,470,''),(1593,1,452,470,'1'),(1594,1,451,470,'10'),(1595,1,453,471,''),(1596,1,454,471,'10'),(1597,1,455,472,''),(1598,1,457,472,'1'),(1599,1,456,472,'10'),(1600,1,458,473,''),(1601,1,459,473,'10'),(1602,1,460,474,''),(1603,1,461,474,'10'),(1628,1,438,463,''),(1629,1,439,463,'4'),(1634,1,473,480,''),(1635,1,474,480,'4'),(1636,1,475,481,''),(1637,1,478,481,'5'),(1638,1,477,481,'10'),(1639,1,476,481,'10'),(1646,1,440,483,''),(1647,1,485,484,''),(1648,1,486,485,''),(1649,1,487,486,''),(1650,0,283,NULL,'http://'),(1651,0,254,NULL,'http://'),(1652,0,313,NULL,'http://'),(1653,0,286,NULL,'http://'),(1654,0,259,NULL,'http://'),(1655,0,264,NULL,'http://'),(1656,0,307,NULL,'http://'),(1658,0,440,NULL,'http://'),(1659,0,152,NULL,'play http://localhost:8080/vldms/tuner?ocap_locator=ocap://0xa1'),(1660,2,152,492,''),(1661,1,488,491,'http://'),(1662,0,463,NULL,'-4'),(1663,0,464,NULL,'4'),(1664,0,152,NULL,''),(1665,1,490,493,'30'),(1666,1,496,493,'30'),(1667,1,489,493,'http://'),(1668,1,498,495,''),(1669,1,499,496,''),(1670,1,501,497,''),(1671,1,500,497,''),(1672,1,502,498,''),(1675,1,509,501,''),(1676,1,508,501,''),(1677,1,516,504,''),(1678,1,515,503,'1.0'),(1679,1,517,503,''),(1680,1,518,505,''),(1681,1,519,506,''),(1682,1,520,507,''),(1683,1,510,502,'0'),(1684,1,511,502,'0'),(1685,1,512,502,'0'),(1686,1,513,502,'1280'),(1687,1,514,502,'720'),(1688,1,521,508,''),(1689,1,522,508,'0'),(1690,1,523,509,''),(1691,1,504,500,''),(1692,1,505,500,'1.0'),(1693,1,506,500,'0.0'),(1694,1,507,500,'0'),(1695,1,524,510,'5'),(1699,1,152,512,''),(1703,1,462,476,''),(1704,1,463,476,'-4.0'),(1705,1,464,476,'4.0'),(1706,1,152,140,'play http://192.168.30.65:8080/vldms/tuner?ocap_locator=ocap://0xa1'),(1711,1,529,514,'0'),(1714,1,419,443,''),(1715,1,420,443,''),(1716,1,536,443,''),(1717,1,418,446,''),(1718,1,530,446,''),(1719,1,408,436,''),(1720,1,532,436,''),(1721,1,410,438,''),(1722,1,534,438,''),(1723,1,407,435,''),(1724,1,531,435,''),(1725,1,409,437,''),(1726,1,533,437,''),(1727,1,411,439,''),(1728,1,535,439,''),(1729,1,417,445,''),(1730,1,537,445,''),(1731,1,406,434,'0'),(1732,1,539,434,''),(1738,1,541,522,'0'),(1739,1,540,523,''),(1740,1,374,375,'15648613'),(1741,1,375,375,'http://169.254.17.105:8080/vldms/tuner?ocap_locator=ocap://0xa1'),(1746,1,545,528,'http://'),(1747,1,544,529,'http;//'),(1748,1,546,530,'http://'),(1749,1,547,531,'http://'),(1755,1,599,532,''),(1756,1,600,532,''),(1757,1,601,532,'3'),(1760,1,591,534,'4'),(1761,1,589,534,'http://'),(1762,1,594,534,'5'),(1763,1,590,534,'-4'),(1764,1,593,534,'10'),(1765,1,592,534,'10'),(1766,1,580,535,'4'),(1767,1,578,535,'http'),(1768,1,579,535,'-4'),(1769,1,548,536,'http://'),(1772,1,595,538,'http://'),(1773,1,556,539,''),(1774,1,597,541,'http://'),(1775,1,555,542,'http://'),(1776,1,581,543,'http://'),(1777,1,582,543,'4'),(1778,1,557,544,'htt'),(1779,1,558,544,'10'),(1780,1,585,545,'http://'),(1781,1,588,545,'5'),(1782,1,587,545,'10'),(1783,1,586,545,'10'),(1784,1,596,546,'http://'),(1785,1,577,547,'4'),(1786,1,575,547,'http://'),(1787,1,576,547,'-4'),(1788,1,549,548,'http://'),(1789,1,550,548,'4'),(1790,1,552,549,'http://'),(1791,1,554,549,'-4.00'),(1792,1,568,550,'http://'),(1793,1,570,550,'1'),(1794,1,569,550,'10'),(1795,1,571,551,'http://'),(1796,1,572,551,'10'),(1797,1,573,552,'http://'),(1798,1,574,552,'10'),(1799,1,566,553,'http://'),(1800,1,567,553,'10'),(1801,1,562,554,'http://'),(1802,1,564,554,'1'),(1803,1,565,554,'10'),(1804,1,559,555,'http://'),(1805,1,561,555,'1'),(1806,1,560,555,'10'),(1807,1,551,556,'http://'),(1808,1,602,540,''),(1809,1,603,540,''),(1810,1,604,540,''),(1811,1,605,540,''),(1812,1,606,540,''),(1813,1,607,557,'http://'),(1814,1,551,558,'http://'),(1815,1,583,537,'http://'),(1816,1,584,537,'4'),(1817,1,608,568,''),(1818,1,497,494,'HNSrc'),(1819,1,553,494,'00000'),(1820,1,609,494,'true'),(1821,1,610,494,'ocap://0xa1'),(1822,1,503,499,''),(1823,1,611,499,'true'),(1839,1,195,194,'color'),(1840,1,196,194,'2'),(1841,1,197,194,'1'),(1842,1,198,194,'0'),(1843,1,199,194,''),(1855,1,617,573,''),(1856,1,620,574,'0.5'),(1857,1,619,574,'http://'),(1858,1,621,575,'0x1234'),(1859,1,612,572,'ocap://0x'),(1860,1,614,572,'0'),(1861,1,615,572,''),(1862,1,616,572,'0'),(1863,1,618,572,'false'),(1864,1,622,572,'true');
/*!40000 ALTER TABLE `parameter` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `parameter_type`
--

DROP TABLE IF EXISTS `parameter_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameter_type` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `function_id` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `parameter_type_enum` varchar(255) NOT NULL,
  `range_val` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK438D7610F773FC6F` (`function_id`),
  CONSTRAINT `FK438D7610F773FC6F` FOREIGN KEY (`function_id`) REFERENCES `function` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=623 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameter_type`
--

LOCK TABLES `parameter_type` WRITE;
/*!40000 ALTER TABLE `parameter_type` DISABLE KEYS */;
INSERT INTO `parameter_type` VALUES (20,0,18,'Process_name','STRING','A-Z'),(21,0,22,'owner_name','STRING','A-Z'),(22,0,22,'method_name','STRING','A-Z'),(24,0,22,'set_timeout','INTEGER','1-65535'),(25,0,22,'newState','INTEGER','0-2'),(26,0,22,'resource_type','INTEGER','0-7'),(27,0,24,'owner_name','STRING','A-Z'),(29,0,25,'resource_type','INTEGER','0-7'),(30,0,26,'resource_type','INTEGER','0-7'),(32,0,23,'videoStreamURL','STRING','A-Z'),(34,0,29,'event_id','INTEGER','0-2'),(35,0,29,'owner_name','STRING','A-Z'),(37,0,29,'keyType','INTEGER','1-65535'),(38,0,29,'keyCode','INTEGER','1-65535'),(39,0,29,'newState','INTEGER','0-2'),(40,0,29,'resource_type','INTEGER','0-7'),(41,0,17,'Validurl','STRING','A-Z'),(43,0,31,'event_id','INTEGER','0-2'),(44,0,31,'owner_name','STRING','A-Z'),(45,0,32,'event_id','INTEGER','0-2'),(46,0,32,'owner_name','STRING','A-Z'),(49,0,37,'member_name','STRING','A-Z'),(51,0,38,'max_event','INTEGER','0-2'),(63,0,60,'RecordURL','STRING','A-Z'),(64,0,61,'videoStreamURL','STRING','A-Z'),(68,0,22,'mfr_param_type','INTEGER','0-9'),(81,0,74,'Opensource_component_type','STRING','qt_non_gfx (or) qt_gfx (or) webkit (or) gstreamer (or) gst_plugin_base (or) gst_plugin_good'),(82,0,74,'Display_option','STRING','directfb (or) eglnullws (or) intelce'),(83,0,75,'indicator_name','STRING','A-Z'),(84,0,75,'color','INTEGER','0-4'),(85,0,78,'indicator_name','STRING','A-Z'),(86,0,78,'brightness','INTEGER','1-100'),(87,0,79,'indicator_name','STRING','A-Z'),(88,0,79,'blink_interval','INTEGER','1-10'),(89,0,79,'blink_iteration','STRING','1-10'),(90,0,80,'viteration','INTEGER','1-10'),(91,0,80,'hiteration','INTEGER','1-10'),(92,0,80,'hold_duration','INTEGER','1-10'),(93,0,80,'text','STRING','A-Z'),(94,0,81,'port_name','STRING','A-Z'),(97,0,82,'port_name','STRING','A-Z'),(98,0,83,'zoom_setting','STRING','A-Z'),(99,0,84,'port_name','STRING','A-Z'),(100,0,84,'encoding_format','STRING','A-Z'),(101,0,85,'port_name','STRING','A-Z'),(102,0,85,'compression_format','STRING','A-Z'),(103,0,86,'port_name','STRING','A-Z'),(104,0,86,'stereo_mode','STRING','A-Z'),(105,0,87,'new_power_state','INTEGER','0-1'),(106,0,88,'port_name','STRING','A-Z'),(107,0,88,'resolution','STRING','A-Z & 0-9'),(108,0,90,'indicator_name','STRING','A-Z'),(109,0,92,'text_display','STRING','A-Z'),(110,0,92,'text','STRING','A-Z'),(111,0,93,'time_format','INTEGER','0-2'),(112,0,93,'text','STRING','A-Z'),(113,0,94,'time_hrs','INTEGER','1-24'),(114,0,94,'time_mins','INTEGER','1-60'),(115,0,94,'text','STRING','A-Z'),(116,0,95,'loop_thru','INTEGER','0-1'),(117,0,95,'port_name','STRING','A-Z'),(118,0,96,'mute_status','INTEGER','0-1'),(119,0,96,'port_name','STRING','A-Z'),(120,0,97,'port_name','STRING','A-Z'),(121,0,98,'port_name','STRING','A-Z'),(122,0,99,'port_name','STRING','A-Z'),(123,0,102,'port_name','STRING','A-Z'),(124,0,103,'port_id','INTEGER','0'),(125,0,104,'port_id','INTEGER','0'),(126,0,105,'port_name','STRING','A-Z'),(127,0,106,'port_name','STRING','A-Z'),(128,0,107,'port_name','STRING','A-Z'),(129,0,108,'ocapId','STRING','A-Z'),(130,0,112,'ocapId','STRING','A-Z'),(134,0,115,'timePosition','STRING','A-Z'),(135,0,115,'PlaySpeed','STRING','A-Z'),(137,0,117,'port_name','STRING','A-Z'),(138,0,118,'port_name','STRING','A-Z'),(139,0,124,'service_name','STRING','A-Z'),(140,0,125,'service_name','STRING','A-Z'),(141,0,126,'service_name','STRING','A-Z'),(142,0,81,'audio_level','FLOAT','1-10'),(143,0,82,'db_level','FLOAT','1-100'),(145,0,128,'recordingId','STRING','A-Z'),(152,0,142,'rmfapp_command','STRING','any alphanumeric sequence'),(154,0,149,'service_name','STRING','A-Z'),(155,0,150,'enable','INTEGER','0,1'),(156,0,151,'enable','INTEGER','0,1'),(158,0,153,'apiVersion','INTEGER','1-1000'),(159,0,154,'service_name','STRING','A-Z'),(160,0,154,'event_name','STRING','A-Z'),(161,0,152,'device_name','STRING','A-Z & 1-1000'),(162,0,153,'service_name','STRING','A-Z'),(163,0,156,'videoDisplay','STRING','A-Z'),(164,0,157,'videoDisplay','STRING','A-Z'),(165,0,156,'zoomLevel','STRING','A-Z'),(166,0,157,'resolution','STRING','A-Z'),(189,0,177,'status','INTEGER','0-1'),(193,0,182,'trickPlayStatus','INTEGER','0-1'),(195,0,173,'Categories','STRING','A-Z'),(196,0,173,'ccAttribute','INTEGER','1 - 14'),(197,0,173,'value','INTEGER','1-8'),(198,0,173,'ccType','INTEGER','0-1'),(199,0,173,'stylevalue','STRING','A-Z'),(201,0,164,'channel_num','INTEGER','1-63'),(202,0,166,'analog_channel_num','INTEGER','1-8'),(207,0,189,'ValidocapId','STRING','A-Z'),(209,0,192,'ocapid','STRING','A-Z'),(210,0,194,'trickPlayRate','STRING','A-Z'),(212,0,30,'appname','STRING','A-Z'),(214,0,22,'testapp_API1_data','INTEGER','1-1000'),(215,0,22,'testapp_API0_data','INTEGER','1-1000'),(254,0,211,'pauseuri','STRING','A-Z'),(259,0,216,'playuri','STRING','A-Z'),(264,0,224,'playuri','STRING','A-Z'),(266,0,224,'Y','INTEGER','0-1'),(267,0,224,'X','INTEGER','0-1'),(268,0,224,'H','INTEGER','0-10000'),(269,0,224,'W','INTEGER','0-10000'),(277,0,224,'apply','INTEGER','0,1'),(283,0,223,'playuri','STRING','A-Z'),(284,0,202,'Volume','FLOAT','0-100'),(286,0,227,'playuri','STRING','A-Z'),(301,0,230,'Volume','FLOAT','0-100'),(302,0,230,'X','INTEGER','0-1'),(303,0,230,'Y','INTEGER','0-1'),(304,0,230,'H','INTEGER','0-10000'),(305,0,230,'W','INTEGER','0-1000'),(306,0,230,'apply','INTEGER','0,1'),(307,0,230,'playuri','STRING','A-Z'),(313,0,231,'playuri','STRING','A-Z'),(314,0,232,'X','INTEGER','0-1'),(315,0,232,'Y','INTEGER','0-1'),(316,0,232,'H','INTEGER','0-10000'),(317,0,232,'W','INTEGER','0-1000'),(318,0,232,'playuri','STRING','A-Z'),(319,0,232,'apply','INTEGER','0,1'),(374,0,270,'recordingId','INTEGER','usually 5 digit nos '),(375,0,270,'playUrl','STRING','play url'),(385,0,277,'module','STRING','A-Z'),(386,0,277,'level','STRING','A-Z'),(387,0,278,'module','STRING','A-Z'),(390,0,279,'module','STRING','A-Z'),(393,0,283,'module','STRING','A-Z'),(394,0,283,'level','STRING','A-Z'),(395,0,280,'number','INTEGER','0-100'),(396,0,281,'number','INTEGER','0-100'),(397,0,285,'ocaplocator','STRING','A-Z'),(398,0,293,'ocaplocator','STRING','A-Z'),(399,0,294,'ocaplocator','STRING','A-Z'),(400,0,295,'ocaplocator','STRING','A-Z'),(401,0,296,'ocaplocator','STRING','A-Z'),(402,0,297,'ocaplocator','STRING','A-Z'),(403,0,300,'ocaplocator','STRING','A-Z'),(404,0,301,'ocaplocator','STRING','A-Z'),(405,0,301,'newocaplocator','STRING','A-Z'),(406,0,304,'index','INTEGER','0-100'),(407,0,305,'recordingId','STRING','A-Z'),(408,0,306,'recordingId','STRING','A-Z'),(409,0,307,'recordingId','STRING','A-Z'),(410,0,308,'recordingId','STRING','A-Z'),(411,0,309,'recordingId','STRING','A-Z'),(412,0,311,'duration','INTEGER','long long (+positive no)'),(413,0,312,'recordingTitle','STRING','A-Z'),(414,0,312,'recordingId','STRING','A-Z'),(415,0,312,'recordDuration','DOUBLE','+ postive no'),(416,0,312,'qamLocator','STRING','qam locator string'),(417,0,313,'recordingId','STRING','A-Z'),(418,0,314,'recordingId','STRING','A-Z'),(419,0,316,'tsbId','STRING','negative long long'),(420,0,316,'recordingId','STRING','A-Z'),(421,0,317,'index','INTEGER','0-100'),(435,0,326,'playUrl','STRING','A-Z'),(438,0,328,'playUrl','STRING','A-Z'),(439,0,328,'speed','FLOAT','1-100'),(440,0,329,'playUrl','STRING','A-Z'),(441,0,330,'playUrl','STRING','A-Z'),(442,0,330,'rewindSpeed','FLOAT','1-100'),(443,0,331,'playUrl','STRING','A-Z'),(444,0,332,'playUrl','STRING','A-Z'),(445,0,333,'playUrl','STRING','A-Z'),(446,0,333,'rCount','INTEGER','1-100'),(447,0,334,'playUrl','STRING','A-Z'),(448,0,334,'seconds','DOUBLE','1-100'),(449,0,334,'rCount','INTEGER','1-100'),(450,0,335,'playUrl','STRING','A-Z'),(451,0,335,'seconds','DOUBLE','1-100'),(452,0,335,'rCount','INTEGER','1-100'),(453,0,336,'playUrl','STRING','A-Z'),(454,0,336,'seconds','DOUBLE','1-100'),(455,0,337,'playUrl','STRING','A-Z'),(456,0,337,'seconds','DOUBLE','1-100'),(457,0,337,'rCount','INTEGER','1-100'),(458,0,338,'playUrl','STRING','A-Z'),(459,0,338,'seconds','DOUBLE','1-100'),(460,0,339,'playUrl','STRING','A-Z'),(461,0,339,'seconds','DOUBLE','1-100'),(462,0,340,'playUrl','STRING','A-Z'),(463,0,340,'rewindSpeed','FLOAT','1-100'),(464,0,340,'forwardSpeed','FLOAT','1-100'),(466,0,341,'playUrl','STRING','A-Z'),(467,0,341,'rewindSpeed','FLOAT','1-100'),(468,0,341,'forwardSpeed','FLOAT','1-100'),(471,0,343,'playUrl','STRING','A-Z'),(472,0,343,'trickPlayRate','FLOAT','1-100'),(473,0,344,'playUrl','STRING','A-Z'),(474,0,344,'trickPlayRate','FLOAT','1-100'),(475,0,345,'playUrl','STRING','A-Z'),(476,0,345,'sfSeconds','DOUBLE','1-100'),(477,0,345,'sbSeconds','DOUBLE','1-100'),(478,0,345,'rCount','INTEGER','1-100'),(479,0,346,'playUrl','STRING','A-Z'),(480,0,346,'rewindSpeed','FLOAT','1-100'),(481,0,346,'forwardSpeed','FLOAT','1-100'),(482,0,346,'sfSeconds','DOUBLE','1-100'),(483,0,346,'sbSeconds','STRING','1-100'),(484,0,346,'rCount','INTEGER','1-100'),(485,0,347,'playUrl','STRING','A-Z'),(486,0,348,'playUrl','STRING','A-Z'),(487,0,349,'playUrl','STRING','A-Z'),(488,0,350,'URL','STRING','A-Z'),(489,0,351,'VideostreamURL','STRING','A-Z'),(490,0,351,'play_time','INTEGER','0-50'),(491,0,352,'Validurl','STRING','A-Z'),(492,0,353,'recordingTitle','STRING','A-Z'),(493,0,353,'recordingId','STRING','A-Z'),(494,0,353,'recordDuration','DOUBLE','1-1000'),(495,0,353,'qamLocator','STRING','A-Z'),(496,0,351,'SkipTime','INTEGER','0-100'),(497,0,354,'rmfElement','STRING','A-Z'),(498,0,355,'rmfElement','STRING','A-Z'),(499,0,356,'rmfElement','STRING','A-Z'),(500,0,357,'url','STRING','A-Z'),(501,0,357,'rmfElement','STRING','A-Z'),(502,0,358,'rmfElement','STRING','A-Z'),(503,0,359,'rmfElement','STRING','A-Z'),(504,0,360,'rmfElement','STRING','A-Z'),(505,0,360,'playSpeed','FLOAT','1-100'),(506,0,360,'playTime','DOUBLE','0-100'),(507,0,360,'defaultPlay','INTEGER','0-1'),(508,0,361,'rmfSourceElement','STRING','A-Z'),(509,0,361,'rmfSinkElement','STRING','A-Z'),(510,0,362,'apply','INTEGER','0-1'),(511,0,362,'X','INTEGER','0-100'),(512,0,362,'Y','INTEGER','0-100'),(513,0,362,'height','INTEGER','1-10000'),(514,0,362,'width','INTEGER','1-10000'),(515,0,363,'playSpeed','FLOAT','1-100'),(516,0,364,'rmfElement','STRING','A-Z'),(517,0,363,'rmfElement','STRING','A-Z'),(518,0,365,'rmfElement','STRING','A-Z'),(519,0,366,'rmfElement','STRING','A-Z'),(520,0,367,'rmfElement','STRING','A-Z'),(521,0,368,'rmfElement','STRING','A-Z'),(522,0,368,'mediaTime','DOUBLE','0-10000'),(523,0,369,'rmfElement','STRING','A-Z'),(524,0,370,'Input1','INTEGER','1-100'),(529,0,372,'Recording_Id','STRING','0-100000'),(530,0,314,'playUrl','STRING','A-Z'),(531,0,305,'playUrl','STRING','A-Z'),(532,0,306,'playUrl','STRING','A-Z'),(533,0,307,'playUrl','STRING','A-Z'),(534,0,308,'playUrl','STRING','A-Z'),(535,0,309,'playUrl','STRING','A-Z'),(536,0,316,'playUrl','STRING','A-Z'),(537,0,313,'playUrl','STRING','A-Z'),(539,0,304,'playUrl','STRING','A-Z'),(540,0,373,'recordingId','STRING','A-Z'),(541,0,374,'index','INTEGER','0-100'),(544,0,380,'Validurl','STRING','A-Z'),(545,0,381,'videoStreamURL','STRING','A-Z'),(546,0,379,'RecordURL','STRING','A-Z'),(547,0,378,'videoStreamURL','STRING','A-Z'),(548,0,382,'playUrl','STRING','A-Z'),(549,0,383,'playUrl','STRING','A-Z'),(550,0,383,'speed','FLOAT','1-100'),(551,0,384,'playUrl','STRING','A-Z'),(552,0,385,'playUrl','STRING','A-Z'),(553,0,354,'dvrSinkRecordId','STRING','A-Z'),(554,0,385,'rewindSpeed','FLOAT','1-100'),(555,0,386,'playUrl','STRING','A-Z'),(556,0,387,'playUrl','STRING','A-Z'),(557,0,388,'playUrl','STRING','A-Z'),(558,0,388,'rCount','INTEGER','1-100'),(559,0,389,'playUrl','STRING','A-Z'),(560,0,389,'seconds','DOUBLE','1-100'),(561,0,389,'rCount','INTEGER','1-100'),(562,0,390,'playUrl','STRING','A-Z'),(564,0,390,'rCount','INTEGER','1-100'),(565,0,390,'seconds','DOUBLE','1-100'),(566,0,391,'playUrl','STRING','A-Z'),(567,0,391,'seconds','DOUBLE','1-100'),(568,0,392,'playUrl','STRING','A-Z'),(569,0,392,'seconds','DOUBLE','1-100'),(570,0,392,'rCount','INTEGER','1-100'),(571,0,393,'playUrl','STRING','A-Z'),(572,0,393,'seconds','DOUBLE','1-100'),(573,0,394,'playUrl','STRING','A-Z'),(574,0,394,'seconds','DOUBLE','1-100'),(575,0,395,'playUrl','STRING','A-Z'),(576,0,395,'rewindSpeed','FLOAT','1-100'),(577,0,395,'forwardSpeed','FLOAT','1-100'),(578,0,396,'playUrl','STRING','A-Z'),(579,0,396,'rewindSpeed','FLOAT','1-100'),(580,0,396,'forwardSpeed','FLOAT','1-100'),(581,0,397,'playUrl','STRING','A-Z'),(582,0,397,'trickPlayRate','FLOAT','1-100'),(583,0,398,'playUrl','STRING','A-Z'),(584,0,398,'trickPlayRate','FLOAT','1-100'),(585,0,399,'playUrl','STRING','A-Z'),(586,0,399,'sfSeconds','DOUBLE','1-100'),(587,0,399,'sbSeconds','DOUBLE','1-100'),(588,0,399,'rCount','INTEGER','1-100'),(589,0,400,'playUrl','STRING','A-Z'),(590,0,400,'rewindSpeed','FLOAT','1-100'),(591,0,400,'forwardSpeed','FLOAT','1-100'),(592,0,400,'sfSeconds','DOUBLE','1-100'),(593,0,400,'sbSeconds','DOUBLE','1-100'),(594,0,400,'rCount','INTEGER','1-100'),(595,0,401,'playUrl','STRING','A-Z'),(596,0,402,'playUrl','STRING','1-100'),(597,0,403,'Validurl','STRING','A-Z'),(599,0,405,'recordingId','STRING','A-Z'),(600,0,405,'url','STRING','A-Z'),(601,0,405,'recDuration','DOUBLE','1-100'),(602,0,371,'Duration','STRING','Inmillsec'),(603,0,371,'Start_time','STRING','In-MilliSec'),(604,0,371,'Recording_Id','STRING','0-10000'),(605,0,371,'Source_id','STRING','A-Z'),(606,0,371,'UTCTime','STRING','mmddHHMMyyyy'),(607,0,404,'playUrl','STRING','A-Z'),(608,0,416,'url','STRING','A-Z'),(609,0,354,'factoryEnable','STRING','A-Z'),(610,0,354,'qamSrcUrl','STRING','A-Z'),(611,0,359,'factoryEnable','STRING','A-Z'),(612,0,420,'url','STRING','A-Z'),(614,0,420,'socketId','INTEGER','0-100'),(615,0,420,'streamIp','STRING','A-Z'),(616,0,420,'typeFlag','INTEGER','0-1'),(617,0,421,'rmfElement','STRING','A-Z'),(618,0,420,'dctpEnable','STRING','A-Z'),(619,0,376,'VideostreamURL','STRING','A-Z'),(620,0,376,'trickPlayRate','FLOAT','0-100'),(621,0,375,'ValidocapId','STRING','A-Z'),(622,0,420,'useChunkTransfer','STRING','A-Z');
/*!40000 ALTER TABLE `parameter_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `performance`
--

DROP TABLE IF EXISTS `performance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `performance` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `execution_result_id` bigint(20) DEFAULT NULL,
  `performance_type` varchar(255) DEFAULT NULL,
  `process_name` varchar(255) DEFAULT NULL,
  `process_value` varchar(255) DEFAULT NULL,
  `process_value1` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKA7C310309FCEDC3B` (`execution_result_id`),
  CONSTRAINT `FKA7C310309FCEDC3B` FOREIGN KEY (`execution_result_id`) REFERENCES `execution_result` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=707 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;


--
-- Table structure for table `primitive_test`
--

DROP TABLE IF EXISTS `primitive_test`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `primitive_test` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `function_id` bigint(20) NOT NULL,
  `module_id` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKA504E8EA6DEEED2F` (`module_id`),
  KEY `FKA504E8EAF773FC6F` (`function_id`),
  KEY `FKA504E8EA984B586A` (`groups_id`),
  CONSTRAINT `FKA504E8EA6DEEED2F` FOREIGN KEY (`module_id`) REFERENCES `module` (`id`),
  CONSTRAINT `FKA504E8EA984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`),
  CONSTRAINT `FKA504E8EAF773FC6F` FOREIGN KEY (`function_id`) REFERENCES `function` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=576 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `primitive_test`
--

LOCK TABLES `primitive_test` WRITE;
/*!40000 ALTER TABLE `primitive_test` DISABLE KEYS */;
INSERT INTO `primitive_test` VALUES (4,1,18,8,'IARMBUS_Init',NULL),(5,0,21,8,'IARMBUS_Term',NULL),(6,0,19,8,'IARMBUS_Connect',NULL),(7,0,20,8,'IARMBUS_DisConnect',NULL),(8,8,22,8,'IARMBUS_BusCall',NULL),(9,1,24,8,'IARMBUS_RegisterCall',NULL),(11,3,25,8,'IARMBUS_RequestResource',NULL),(12,3,26,8,'IARMBUS_ReleaseResource',NULL),(18,6,29,8,'IARMBUS_BroadcastEvent',NULL),(19,8,17,7,'E2E_LinearTV_URL',NULL),(20,4,23,7,'E2E_LinearTV_Play_URL',NULL),(22,15,31,8,'IARMBUS_RegisterEventHandler',NULL),(23,14,32,8,'IARMBUS_UnRegisterEventHandler',NULL),(25,1,37,8,'IARMBUS_IsConnected',NULL),(27,1,38,8,'IARMBUS_RegisterEvent',NULL),(29,0,40,8,'IARMBUS_GetContext',NULL),(31,0,41,8,'IARMBUS_GetLastReceivedEventDetails',NULL),(38,1,60,17,'E2E_Get_Record_URLS',NULL),(40,1,61,17,'E2E_Play_URL',NULL),(53,1,74,24,'OpenSource_Comp_Test',NULL),(54,0,100,25,'DS_AddPowerModeListener',NULL),(55,1,106,25,'DS_DisplayDetails',NULL),(56,1,104,25,'DS_DTCPSupport',NULL),(57,2,105,25,'DS_GetAspectRatio',NULL),(58,0,89,25,'DS_GetIndicators',NULL),(59,1,90,25,'DS_GetSupportedColors',NULL),(60,1,98,25,'DS_GetSupportedCompressions',NULL),(62,1,97,25,'DS_GetSupportedEncodings',NULL),(63,1,99,25,'DS_GetSupportedStereoModes',NULL),(64,0,91,25,'DS_GetTextDisplays',NULL),(65,1,103,25,'DS_HDCPSupport',NULL),(66,1,107,25,'DS_IsDynamicResolutionSupport',NULL),(67,1,95,25,'DS_LoopThru',NULL),(68,1,77,25,'DS_ManagerDeInitialize',NULL),(69,0,76,25,'DS_ManagerInitialize',NULL),(71,0,101,25,'DS_RemovePowerModeListener',NULL),(72,1,102,25,'DS_Resolution',NULL),(75,2,79,25,'DS_SetBlink',NULL),(76,3,78,25,'DS_SetBrightness',NULL),(77,6,75,25,'DS_setColor',NULL),(78,1,85,25,'DS_SetCompression',NULL),(79,1,83,25,'DS_SetDFC',NULL),(80,3,94,25,'DS_SetTime',NULL),(81,2,84,25,'DS_SetEncoding',NULL),(82,1,87,25,'DS_SetPowerMode',NULL),(83,1,88,25,'DS_SetResolution',NULL),(84,1,80,25,'DS_SetScroll',NULL),(85,1,86,25,'DS_SetStereoMode',NULL),(86,1,92,25,'DS_SetText',NULL),(87,1,93,25,'DS_SetTimeFormat',NULL),(88,2,108,22,'MediaStreamer_LiveTune_Request',NULL),(90,0,110,22,'MediaStreamer_Recorded_Urls',NULL),(91,0,111,22,'MediaStreamer_Recorded_Metadata',NULL),(92,2,112,22,'MediaStreamer_Live_Playback',NULL),(93,0,113,22,'MediaStreamer_Recording_Playback',NULL),(95,1,115,22,'MediaStreamer_DVR_Trickplay',NULL),(100,1,96,25,'DS_MuteStatus',NULL),(101,1,117,25,'DS_IsContentProtected',NULL),(102,1,118,25,'DS_IsDisplayConnectedStatus',NULL),(104,1,122,25,'DS_AddDisplayConnectionListener',NULL),(105,0,123,25,'DS_RemoveDisplayConnectionListener',NULL),(106,1,124,27,'SM_RegisterService',NULL),(107,1,126,27,'SM_DoesServiceExist',NULL),(108,1,125,27,'SM_UnRegisterService',NULL),(109,1,82,25,'DS_SetAudioDB',NULL),(110,1,81,25,'DS_SetAudioLevel',NULL),(111,3,128,22,'MediaStreamer_Recording_Request',NULL),(114,0,129,27,'SM_GetRegisteredServices',NULL),(126,5,142,39,'E2E_rmfapp_help',NULL),(127,4,142,39,'E2E_rmfapp_quit',NULL),(133,1,149,27,'SM_GetGlobalService',NULL),(134,2,153,27,'SM_SetAPIVersion',NULL),(135,1,154,27,'SM_RegisterForEvents',NULL),(136,1,151,27,'SM_HN_EnableVPOP',NULL),(137,1,150,27,'SM_HN_EnableMDVR',NULL),(138,2,152,27,'SM_HN_SetDeviceName',NULL),(140,2,142,39,'E2E_rmfApp_play_url',NULL),(141,1,157,27,'SM_DisplaySetting_SetCurrentResolution',NULL),(142,1,156,27,'SM_DisplaySetting_SetZoomSettings',NULL),(146,1,158,35,'CCInit',NULL),(148,1,158,35,'CC_Initialization',NULL),(155,0,167,35,'CC_Show',NULL),(157,0,168,35,'CC_Hide',NULL),(165,0,158,35,'IARMBUS Test',NULL),(178,0,174,35,'CC_Get_SupportedServiceNumberCount',NULL),(179,0,175,35,'CC_Get_SupportedServiceNumber',NULL),(182,1,177,35,'CC_SetGet_State',NULL),(189,0,179,35,'CC_OnEasStart',NULL),(190,0,180,35,'CC_OnEasStop',NULL),(191,0,181,35,'CC_ResetTrickPlayStatus',NULL),(192,1,182,35,'CC_SetTrickPlayStatus',NULL),(194,1,173,35,'CC_SetGetAttribute',NULL),(195,1,164,35,'CC_SetGet_DigitalChannel',NULL),(196,1,166,35,'CC_SetGet_AnalogChannel',NULL),(204,1,189,7,'E2E_LinearTV_T2p_Tuning',NULL),(207,1,192,42,'Test_newrmf_play',NULL),(208,1,194,7,'E2E_LinearTV_T2p_TrickMode',NULL),(209,1,30,8,'IARMBUS_InvokeSecondApplication',NULL),(241,0,201,44,'RMF_MPSink_SetGetMute',NULL),(247,0,207,44,'RMF_HNSrc_GetBufferedRanges',NULL),(279,1,202,44,'RMF_MPSink_SetGetVolume',NULL),(287,1,232,44,'RMF_HNSrcMPSink_Video_MuteUnmute',NULL),(288,1,224,44,'RMF_HNSrcMPSink_Video_State',NULL),(289,1,230,44,'RMF_HNSrcMPSink_Video_Volume',NULL),(375,1,270,44,'RMF_DVRSink_Init_Term',NULL),(398,1,142,39,'Emulator_rmfapp_qamplay',NULL),(401,1,277,51,'RDKLogger_Dbg_Enabled_Status',NULL),(405,0,282,51,'RDKLogger_Init',NULL),(407,1,283,51,'RDKLogger_Log',NULL),(408,1,278,51,'RDKLogger_EnvGet',NULL),(409,1,279,51,'RDKLogger_EnvGetNum',NULL),(416,1,280,51,'RDKLogger_EnvGetValueFromNum',NULL),(418,1,281,51,'RDKLogger_EnvGetModFromNum',NULL),(419,1,285,44,'RMF_QAMSource_Play',NULL),(420,0,292,44,'RMF_QAMSource_InitTerm',NULL),(421,1,293,44,'RMF_QAMSource_OpenClose',NULL),(422,1,294,44,'RMF_QAMSource_Pause',NULL),(423,1,295,44,'RMF_QAMSource_GetTsId',NULL),(424,1,296,44,'RMF_QAMSource_GetLtsId',NULL),(425,1,297,44,'RMF_QAMSource_GetQAMSourceInstance',NULL),(426,0,298,44,'RMF_QAMSource_Init_Uninit_Platform',NULL),(427,0,299,44,'RMF_QAMSource_GetUseFactoryMethods',NULL),(429,1,300,44,'RMF_QAMSource_Get_Free_LowLevelElement',NULL),(430,1,301,44,'RMF_QAMSource_ChangeURI',NULL),(431,0,302,44,'RMF_DVRManager_GetSpace',NULL),(432,0,303,44,'RMF_DVRManager_GetRecordingCount',NULL),(434,1,304,44,'RMF_DVRManager_GetRecordingInfoByIndex',NULL),(435,1,305,44,'RMF_DVRManager_GetRecordingInfoById',NULL),(436,1,306,44,'RMF_DVRManager_GetIsRecordingInProgress',NULL),(437,1,307,44,'RMF_DVRManager_GetRecordingSize',NULL),(438,1,308,44,'RMF_DVRManager_GetRecordingDuration',NULL),(439,1,309,44,'RMF_DVRManager_GetRecordingStartTime',NULL),(440,0,310,44,'RMF_DVRManager_GetDefaultTSBMaxDuration',NULL),(442,1,311,44,'RMF_DVRManager_CreateTSB',NULL),(443,1,316,44,'RMF_DVRManager_ConvertTSBToRecording',NULL),(444,1,312,44,'RMF_DVRManager_CreateRecording',NULL),(445,1,313,44,'RMF_DVRManager_UpdateRecording',NULL),(446,1,314,44,'RMF_DVRManager_DeleteRecording',NULL),(447,0,315,44,'RMF_DVRManager_GetSegmentsCount',NULL),(449,1,317,44,'RMF_DVRManager_GetRecordingSegmentInfoByIndex',NULL),(461,1,326,56,'E2E_Rmf_Dvr_Play_Pause',NULL),(463,1,328,56,'E2E_Rmf_Dvr_Play_TrickPlay_FF_FR',NULL),(464,1,329,56,'E2E_Rmf_LinearTv_Dvr_Play',NULL),(465,1,330,56,'E2E_Rmf_Dvr_Play_TrickPlay_RewindFromEndPoint',NULL),(467,1,332,56,'E2E_Rmf_Dvr_Play_Pause_Play',NULL),(468,1,333,56,'E2E_Rmf_Dvr_Play_Pause_Play_Repeat',NULL),(469,1,334,56,'E2E_Rmf_Dvr_Skip_Forward_Play',NULL),(470,1,335,56,'E2E_Rmf_Dvr_Skip_Forward_From_Middle',NULL),(471,1,336,56,'E2E_Rmf_Dvr_Skip_Forward_From_End',NULL),(472,1,337,56,'E2E_Rmf_Dvr_Skip_Backward_From_End',NULL),(473,1,338,56,'E2E_Rmf_Dvr_Skip_Backward_From_Middle',NULL),(474,1,339,56,'E2E_Rmf_Dvr_Skip_Backward_From_Starting',NULL),(476,1,340,56,'E2E_Rmf_Dvr_Play_Rewind_Forward',NULL),(480,1,344,56,'E2E_Rmf_Dvr_Play_Pause_FF_FR',NULL),(481,1,345,56,'E2E_Rmf_Dvr_Play_Pause_Play_SF_SB',NULL),(483,1,329,56,'E2E_RMF_Linear_simultuning',NULL),(484,1,347,56,'E2E_Rmf_Dvr_Play_Pause_Pause',NULL),(485,1,348,56,'E2E_Rmf_Dvr_Play_Play',NULL),(486,1,349,56,'E2E_RMF_Linear_Simultaneous_ChannelChange',NULL),(488,0,353,44,'RMF_GetDvr_Recording_List',NULL),(490,0,158,35,'Test11',NULL),(491,1,350,22,'MS_RMFStreamer_InterfaceTesting',NULL),(492,1,142,39,'E2E_rmfApp_ls',NULL),(493,3,351,22,'MS_RMFStreamer_Player',NULL),(494,1,354,44,'RMF_Element_Create_Instance',NULL),(495,1,355,44,'RMF_Element_Init',NULL),(496,1,356,44,'RMF_Element_Term',NULL),(497,2,357,44,'RMF_Element_Open',NULL),(498,1,358,44,'RMF_Element_Close',NULL),(499,1,359,44,'RMF_Element_Remove_Instance',NULL),(500,4,360,44,'RMF_Element_Play',NULL),(501,2,361,44,'RMF_Element_Sink_SetSource',NULL),(502,5,362,44,'RMF_Element_MpSink_SetVideoRectangle',NULL),(503,2,363,44,'RMF_Element_Setspeed',NULL),(504,1,364,44,'RMF_Element_Getspeed',NULL),(505,1,365,44,'RMF_Element_Getmediatime',NULL),(506,1,366,44,'RMF_Element_GetState',NULL),(507,1,367,44,'RMF_Element_Pause',NULL),(508,2,368,44,'RMF_Element_Setmediatime',NULL),(509,1,369,44,'RMF_Element_GetMediaInfo',NULL),(510,1,370,57,'Xi4InitTest1',NULL),(512,1,142,39,'E2E_rmfapp_record_url',NULL),(514,1,372,58,'Recorder_checkRecording_status',NULL),(522,1,374,44,'RMF_DVRManager_CheckRecordingInfoByIndex',NULL),(523,1,373,44,'RMF_DVRManager_CheckRecordingInfoById',NULL),(528,1,381,59,'TDKE2E_LinearTV_Play_URL',NULL),(529,1,380,59,'TDKE2E_LinearTV_URL',NULL),(530,1,379,59,'TDKE2E_Get_Record_URLS',NULL),(531,1,378,59,'TDKE2E_Play_URL',NULL),(532,1,405,44,'RMF_Element_DVRManager_CreateRecording',NULL),(534,1,400,59,'TDKE2E_Rmf_Dvr_Play_FF_FR_SF_SB',NULL),(535,1,396,59,'TDKE2E_Rmf_Dvr_Play_Forward_Rewind',NULL),(536,1,382,59,'TDKE2E_Rmf_Dvr_Play_Pause',NULL),(537,1,398,59,'TDKE2E_Rmf_Dvr_Play_Pause_FF_FR',NULL),(538,1,401,59,'TDKE2E_Rmf_Dvr_Play_Pause_Pause',NULL),(539,1,387,59,'TDKE2E_Rmf_Dvr_Play_Pause_Play',NULL),(540,0,371,58,'Recorder_ScheduleRecording',NULL),(541,1,403,59,'TDKE2E_RMFLinearTV_GetURL',NULL),(542,1,386,59,'TDKE2E_Rmf_Dvr_Pause_Play',NULL),(543,1,397,59,'TDKE2E_Rmf_Dvr_Play_FF_FR_Pause_Play',NULL),(544,1,388,59,'TDKE2E_Rmf_Dvr_Play_Pause_Play_Repeat',NULL),(545,1,399,59,'TDKE2E_Rmf_Dvr_Play_Pause_Play_SF_SB',NULL),(546,1,402,59,'TDKE2E_Rmf_Dvr_Play_Play',NULL),(547,1,395,59,'TDKE2E_Rmf_Dvr_Play_Rewind_Forward',NULL),(548,1,383,59,'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR',NULL),(549,1,385,59,'TDKE2E_Rmf_Dvr_Play_TrickPlay_RewindFromEndPoint',NULL),(550,1,392,59,'TDKE2E_Rmf_Dvr_Skip_Backward_From_End',NULL),(551,1,393,59,'TDKE2E_Rmf_Dvr_Skip_Backward_From_Middle',NULL),(552,1,394,59,'TDKE2E_Rmf_Dvr_Skip_Backward_From_Starting',NULL),(553,1,391,59,'TDKE2E_Rmf_Dvr_Skip_Forward_From_End',NULL),(554,1,390,59,'TDKE2E_Rmf_Dvr_Skip_Forward_From_Middle',NULL),(555,1,389,59,'TDKE2E_Rmf_Dvr_Skip_Forward_Play',NULL),(556,1,384,59,'TDKE2E_Rmf_LinearTv_Dvr_Play',NULL),(557,1,404,59,'TDKE2E_RMF_Linear_simultuning',NULL),(558,1,384,59,'TDKE2E_RMF_Linear_Simultaneous_ChannelChange',NULL),(559,0,407,44,'RmfElement_QAMSrc_RmfPlatform_Init',NULL),(560,0,408,44,'RmfElement_QAMSrc_RmfPlatform_Uninit',NULL),(561,0,409,44,'RmfElement_QAMSrc_InitPlatform',NULL),(562,0,410,44,'RmfElement_QAMSrc_UninitPlatform',NULL),(563,0,417,44,'RmfElement_QAMSrc_UseFactoryMethods',NULL),(564,0,412,44,'RmfElement_QAMSrc_GetTSID',NULL),(565,0,413,44,'RmfElement_QAMSrc_GetLTSID',NULL),(566,0,414,44,'RmfElement_QAMSrc_GetLowLevelElement',NULL),(567,0,415,44,'RmfElement_QAMSrc_FreeLowLevelElement',NULL),(568,1,416,44,'RmfElement_QAMSrc_ChangeURI',NULL),(569,0,418,44,'RmfElement_HNSink_InitPlatform',NULL),(570,0,419,44,'RmfElement_HNSink_UninitPlatform',NULL),(572,1,420,44,'RmfElement_HNSink_SetProperties',NULL),(573,1,421,44,'RmfElement_HNSink_SetSourceType',NULL),(574,1,376,59,'TDKE2E_LinearTV_T2p_TrickMode',NULL),(575,1,375,59,'TDKE2E_LinearTV_T2p_Tuning',NULL);
/*!40000 ALTER TABLE `primitive_test` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `rdkversions`
--

DROP TABLE IF EXISTS `rdkversions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `rdkversions` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `build_version` varchar(255) NOT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `build_version` (`build_version`),
  KEY `FK3CD0AE14984B586A` (`groups_id`),
  CONSTRAINT `FK3CD0AE14984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `rdkversions`
--

LOCK TABLES `rdkversions` WRITE;
/*!40000 ALTER TABLE `rdkversions` DISABLE KEYS */;
INSERT INTO `rdkversions` VALUES (1,0,'RDK1.2',NULL),(2,0,'RDK1.3',NULL),(3,0,'RDK2.0',NULL);
/*!40000 ALTER TABLE `rdkversions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `repeat_pending_execution`
--

DROP TABLE IF EXISTS `repeat_pending_execution`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `repeat_pending_execution` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `complete_execution_pending` int(11) NOT NULL,
  `current_execution_count` int(11) NOT NULL,
  `device_name` varchar(255) NOT NULL,
  `execution_name` varchar(255) NOT NULL,
  `status` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `role`
--

DROP TABLE IF EXISTS `role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role`
--

LOCK TABLES `role` WRITE;
/*!40000 ALTER TABLE `role` DISABLE KEYS */;
INSERT INTO `role` VALUES (1,2,'ADMIN'),(2,1,'TESTER');
/*!40000 ALTER TABLE `role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role_permissions`
--

DROP TABLE IF EXISTS `role_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role_permissions` (
  `role_id` bigint(20) DEFAULT NULL,
  `permissions_string` varchar(255) DEFAULT NULL,
  KEY `FKEAD9D23BA4EB492A` (`role_id`),
  CONSTRAINT `FKEAD9D23BA4EB492A` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role_permissions`
--

LOCK TABLES `role_permissions` WRITE;
/*!40000 ALTER TABLE `role_permissions` DISABLE KEYS */;
INSERT INTO `role_permissions` VALUES (1,'*:*'),(2,'Execution:*:*'),(2,'Module:*:*'),(2,'StreamingDetails:*:*'),(2,'ScriptGroup:*:*'),(2,'DeviceGroup:*:*'),(2,'Recorder:*:*'),(2,'PrimitiveTest:*:*');
/*!40000 ALTER TABLE `role_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script`
--

DROP TABLE IF EXISTS `script`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `primitive_test_id` bigint(20) NOT NULL,
  `script_content` longtext NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  `synopsis` varchar(255) DEFAULT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  `execution_time` int(11) NOT NULL,
  `remarks` varchar(255) NOT NULL,
  `skip` bit(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FKC9E5D0CB67097214` (`primitive_test_id`),
  KEY `FKC9E5D0CB984B586A` (`groups_id`),
  CONSTRAINT `FKC9E5D0CB67097214` FOREIGN KEY (`primitive_test_id`) REFERENCES `primitive_test` (`id`),
  CONSTRAINT `FKC9E5D0CB984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1168 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script`
--

LOCK TABLES `script` WRITE;
/*!40000 ALTER TABLE `script` DISABLE KEYS */;
INSERT INTO `script` VALUES (31,300,'IARMBUS Connect & Disconnect test',6,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_1\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or(\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_Disconnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script tests the successful joining of the Agent application with the IARM Bus.\r\nTest Case ID : CT_IARMBUS_1                 ',NULL,3,'				','\0'),(32,250,'IARMBUS Init Negative test',4,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_2\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if \"SUCCESS\" in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: IARM Bus library is initialized\";\r\n                #calling IARMBUS API \"IARM_Bus_Init\" to initialize IARMBus library second time\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n                #if \"INVALID_PARAM\" in details:\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: IARM Bus Library is already initialized\";\r\n                        #actual test case is passed\r\n                        result = \"SUCCESS\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Init failed. %s\" %details;\r\n                        print \"FAILURE: IARM Bus Library initialized second time\";\r\n                        #Actual test case is failed\r\n                        result = \"FAILURE\";\r\n        elif \"INVALID_PARAM\" in details:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: IARM Bus Library is already initialized\";\r\n                        #actual test case is passed\r\n                        result = \"SUCCESS\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s\" %details;\r\n                #Actual test case is failed\r\n                result = \"FAILURE\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script verifies the error scenario of rejoining the Agent with the IARM BUS which has been already registered.Test Case ID : CT_IARMBUS_2   ',NULL,3,'				','\0'),(33,442,'IARMBUS IsConnected test',25,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_3\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application is initialized with IARM Bus library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application is successfully connected with IARMBUS\";\r\n                        #calling IARMBUS API \"IARM_Bus_IsConnected\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_IsConnected\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_IsConnected\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: API-Is_Connected success\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Isconnected failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARM Bus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script tests the registration status of the Agent with the IARM Bus\r\nTest Case ID :CT_IARMBUS_3 ',NULL,3,'				','\0'),(57,126,'IARMBUS unregisterEvt Handler test',23,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_4\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARM_Bus_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS :Register call success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting RESOURCE_FOCUS resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        # Register for IR Key event.\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                expectedresult=\"SUCCESS\"\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed. %s\" %details;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler failed. %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests the successful de-registration of an Event handler\r\nTest Case ID : CT_IARMBUS_4',NULL,3,'				','\0'),(68,115,'IARMBUS Unregister with out Register Event Handler test',22,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_5\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\"); \r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        expectedresult=\"FAILURE\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        print \"UnReg:%s\" %actualresult;\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS :Could not unregister Event Handler before registering \";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: Application can unregister event before register --> IARM_Bus_UnRegisterEventHandler failed. %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests the failure scenario when an unregister event handler is called without registering a event handler. Test case ID:CT_IARMBUS_5',NULL,3,'				','\0'),(69,112,'IARMBUS Release Resource test',12,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_6\')\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Register RPC method Success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                #Requesting \"RESOURCE_FOCUS\" resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        #Register for IR key events\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Event Handler registered successfully\";\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                expectedresult=\"SUCCESS\"\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS: Event Handler unregistered successfully\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed. %s\" %details;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler failed. %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script tests the successful release of an acquired resource\r\nTest Case ID : CT_IARMBUS_6.',NULL,3,'				','\0'),(70,154,'IARMBUS Request same resource in different application test',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_7\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application registers RPC methods\";\r\n                                #wait for 2 sec to start second application\r\n                                time.sleep(2);\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                #details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_InvokeSecondApplication\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Second application Invoked successfully\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Second application failed to execute\";\r\n                                #This agent application also tries to grabb the same resource mentioned above\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                #Requesting for RESOURCE_FOCUS resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Requested resource is allocated from another application\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Resource Released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script verifies the release of a resource by one application when another application requests the same resource. TestCase ID:CT_IARMBUS_7',NULL,3,'				','\0'),(71,115,'IARMBUS Request same resource from same application test',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_8\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application registers RPC method\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                #Requesting \"RESOURCE_FOCUS\" resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        #Application tries to acquire the same resource second time\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                        print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                        #requesting RESOURCE_FOCUS resource\r\n                                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                                        expectedresult=\"FAILURE\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                        if expectedresult in actualresult:\r\n                                                print \"SUCCESS: Requested resource is already allocated for the application\";\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Requesting resource second time -IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script verifies the request of a resource by a application when the same \r\n application already acquires the same resource.TestCase ID:CT_IARMBUS_8				',NULL,3,'				','\0'),(72,187,'IARMBUS Request decoder-0 test',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_9\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application registeres RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting decoder 0 resource\r\n                                tdkTestObj.addParameter(\"resource_type\",1);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Requested decoder-0 resource is allocated successfully for the application\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",1);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script verifies the successful obtaining of decoder-0 resource\r\nTest Case ID : CT_IARMBUS_9          				',NULL,3,'				','\0'),(73,112,'IARMBUS Request decoder-1 test',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_10\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Appplication register RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting decoder 1 resource\r\n                                tdkTestObj.addParameter(\"resource_type\",2);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Requested deocder-1 resource is allocated successfully for the application\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",2);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Allocated  decoder-1 resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script verifies the successful obtaining of decoder-1 resource\r\nTest Case ID : CT_IARMBUS_10   				',NULL,3,'				','\0'),(74,107,'IARMBUS Request graphics plane-0 test',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_11\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Appplication register RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting graphics plan-0 resource\r\n                                tdkTestObj.addParameter(\"resource_type\",3);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Requested graphics plane-0 resource is allocated successfully for the application\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",3);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Allocated  graphics plane-0 resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script verifies the successful obtaining of graphics plane -0 resource\r\nTest Case ID : CT_IARMBUS_11     				',NULL,3,'				','\0'),(75,100,'IARMBUS Request graphics plane-1 test',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_12\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connec\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Appplication register RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting graphics plan-1 resource\r\n                                tdkTestObj.addParameter(\"resource_type\",4);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Requested graphics plane-1 resource is allocated successfully for the application\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",4);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Allocated  graphics plane-1 resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script verifies the successful obtaining of graphics plane - 1 resource\r\nTest Case ID : CT_IARMBUS_12    				',NULL,3,'				','\0'),(76,88,'IARMBUS Request display_resolution_change  test',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_13\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Appplication register RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting  \"display resolution change\" resource\r\n                                tdkTestObj.addParameter(\"resource_type\",5);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Requested -display resolution change- resource is allocated successfully for the application\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",5);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Allocated -display resolution change- resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script verifies the successful obtaining of display resolution resource\r\nTest Case ID : CT_IARMBUS_13       				',NULL,3,'				','\0'),(77,95,'IARMBUS Request power  test',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_14\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Appplication register RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting power resource\r\n                                tdkTestObj.addParameter(\"resource_type\",6);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Requested power resource is allocated successfully for the application\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",6);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Allocated power resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script verifies the successful obtaining of power resource\r\nTest Case ID : CT_IARMBUS_14   				',NULL,3,'				','\0'),(78,97,'IARMBUS RegisterCall test',9,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_15\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n       #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                # IARMBUS_Connect is to connect the application with IARM-BUS Daemon\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #IARMBUS_RegisterCall is to register an RPC that can be invoked by other application\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application Registeres an RPC successfully\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #IARMBUS_DisConnect is to disconnect application from IARM-Bus Daemon\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script verifies the successful registration of an RPC call in the app\r\nTest Case ID : CT_IARMBUS_15    				',NULL,3,'				','\0'),(79,134,'IARMBUS BusCall test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_16\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARM_Bus_Init API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARM_Bus_Connect API\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARM_Bus_RegisterCall API\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application Registeres an RPC successfully\";\r\n                                #calling IARM_Bus_Call API\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                #invoke \"GetPowerState\" RPC\r\n                                tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                print \"power state: %s\" %details;\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Application invokes an RPC successfully\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_Bus_Call failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #caling IARM_Bus_DisConnect API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script tests the invocation of an RPC method registered in another application\r\nTest Case ID : CT_IARMBUS_16            				',NULL,3,'				','\0'),(81,183,'IARMBUS Broadcast IR event',18,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_17\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\"); \r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARM-Bus Daemon\";\r\n                        #Run another application to receive broadcasted events\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                        #registering event handler for IR Key events\r\n                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                        tdkTestObj.addParameter(\"event_id\",0);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Event Handler registered for IR key events\";\r\n                                #sleep for 5 sec to receive IR key event that is broadcasted from second app.\r\n                                time.sleep(5);\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                #details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_InvokeSecondApplication\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Second application Invoked successfully\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Second application failed to execute\";\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                print details;\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_GetLastReceivedEventDetails\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: GetLastReceivedEventDetails executed successfully\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: GetLastReceivedEventDetails failed\";\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                #deregistering IR event handler\r\n                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: UnRegister Event Handler for IR key events\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE : IARM_Bus_UnRegisterEventHanlder failed. %s \" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE : IARM_Bus_RegisterEventHandler failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script Broadcasts an IR event to all the registered apps in IARM BUS\r\nTest Case ID : CT_IARMBUS_17',NULL,5,'				','\0'),(88,114,'IARMBUS Query Key Repeat Interval test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_24\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARM_Bus_Init API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                # IARMBUS_Connect is to connect the application with IARM-BUS Daemon\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #IARMBUS_BusCall is to invoke an RPC.\r\n                        #calling IARM_Bus_Call API\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        #Passing parameters to query key repeat interval\r\n                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetRepeatInterval\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        print \"Key Repeat Interval %s\" %details;\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application invokes an RPC successfully\";\r\n                                #IARMBUS_DisConnect is to disconnect application from IARM-Bus Daemon\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #Calling IARM_Bus_Disconnect API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script queries the Key Repeat Interval of the STB\r\nTest Case ID : CT_IARMBUS_24          				',NULL,3,'				','\0'),(89,104,'IARMBUS Set Key Repeat Interval test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_25\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        #passing prameter for querying key repeat interval time\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetRepeatInterval\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        print \"Query- Key Repeat Interval: %s\" %details;\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Query- RPC method invoked for querying key repeat interval \";\r\n                                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                #passing prameter for setting key repeat interval time\r\n                                tdkTestObj.addParameter(\"method_name\",\"SetRepeatInterval\");\r\n                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                #setting Repeat interval to 100\r\n                                tdkTestObj.addParameter(\"set_timeout\",100);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                print \"Set- Key Repeat Interval: %s\" %details;\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                set_interval=details;\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Set- RPC method invoked for setting key repeat interval \";\r\n                                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                        #passing prameter for querying key repeat interval time\r\n                                        tdkTestObj.addParameter(\"method_name\",\"GetRepeatInterval\");\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        print \"Query- Key Repeat Interval: %s\" %details;\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        get_interval=tdkTestObj.getResultDetails();\r\n                                        #Check for both Repeat Interval before and after setting it\r\n                                        if get_interval == set_interval:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Key Repeat Intervals are same\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: Both the Key Repeat Interval are not same\";\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Query- RPC method invoked for setting key repeat interval \";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: GetRepeatInterval ---> IARM_Bus_Call failed. %s \" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: SetRepeatInterval ---> IARM_Bus_Call failed. %s \" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: GetRepeatInterval ---> IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets the Key Repeat Interval of the STB to the desired value\r\nTest Case ID : CT_IARMBUS_25      				',NULL,3,'				','\0'),(90,113,'IARMBUS Query Power state',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_26\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        # Calling IARM_Bus_Init API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                # Calling IARM_Bus_Connect API\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        #passing parameter for Querying STB power state\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        print \"Power State: %s\" %details;\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Query Power state invoked successfully\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Query POwer state --> IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        # Calling IARM_Bus_DisConnect API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script queries the Current Power state of the STB\r\nTest Case ID : CT_IARMBUS_26            				',NULL,3,'				','\0'),(91,146,'IARMBUS Set Power state',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_27\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Application is successfully connected with IARM-BUS Daemon\";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method is registered\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                #passing parameter for receving POWER_MODE_CHANGEDevent\r\n                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS :PWR Event Handler registered successfully\";\r\n                                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                        #passing parameter for querying STB power state\r\n                                        tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        print \"current power state: %s\" %details;\r\n                                        curstate=details;\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Querying STB power state -RPC method invoked successfully\";\r\n                                                #Setting the POWER state\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                                tdkTestObj.addParameter(\"method_name\",\"SetPowerState\");\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                                # setting state to ON\r\n                                                if curstate == \"POWERSTATE_ON\" :\r\n                                                        #change to STANDBY\r\n                                                        tdkTestObj.addParameter(\"newState\",1);\r\n                                                elif curstate == \"POWERSTATE_OFF\":\r\n                                                        #change to ON\r\n                                                        tdkTestObj.addParameter(\"newState\",2);\r\n                                                else:\r\n                                                        #change to ON\r\n                                                        tdkTestObj.addParameter(\"newState\",2);\r\n\r\n                                                expectedresult=\"SUCCESS\"\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                print \"set power state: %s\" %details;\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                                before_set_powerstate = details;\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS: Setting STB power state -RPC method invoked successfully\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                        expectedresult=\"SUCCESS\"\r\n                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                        actualresult = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #checking for event received status\r\n                                                        if expectedresult in actualresult:\r\n                                                                print details;\r\n                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                print \"SUCCESS: Event Received\";\r\n                                                        else:\r\n                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                print \"FAILURE: Event is not received\";\r\n                                                        #Querying the STB power state\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                                        tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                                                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                                        expectedresult=\"SUCCESS\"\r\n                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                        actualresult = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        print \"current power state: %s\" %details;\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                                        after_set_powerset=details;\r\n                                                        if expectedresult in actualresult:\r\n                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                print \"SUCCESS: Querying STB power state -RPC method invoked successfully\";\r\n                                                                if before_set_powerstate == after_set_powerset :\r\n                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                        print \"SUCCESS: Both the Power states are equal\";\r\n                                                                else:\r\n                                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                        print \"FAILURE: Both power states are different\";\r\n                                                                #comparing the Power state before and after setting the power state\r\n                                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                                expectedresult=\"SUCCESS\"\r\n                                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                                actualresult = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                                if expectedresult in actualresult:\r\n                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                                else:\r\n                                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                        print \"unregister event handler failed. %s\" %details;\r\n                                                        else:\r\n                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                print \"FAILURE: Querying STB power state - IARM_Bus_Call failed. %s \" %details;\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: Set STB power state - IARM_Bus_Call failed. %s \" %details;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: Querying STB power state - IARM_Bus_Call failed. %s \" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Register Event Handler failed. %s \" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script sets the Power state of the STB to the desired state\r\nTest Case ID : CT_IARMBUS_27 \r\nNote: Once power mode is changed, we should receive POWERMODE_CHANGED event.But we are not getting the event.This is an issue with IARMBus component.   ',NULL,3,'				','\0'),(92,86,'IARMBUS RegisterEventMax',27,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_28\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterEvent\"\r\n                        #This should be called in the IARM Manager perspective like irmgr,pwrmgr,diskmgr.\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEvent\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEvent\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application successfully register events\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterEvent failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script registers for all possible events .\r\nTest Case ID : CT_IARMBUS_28                 				',NULL,3,'				','\0'),(93,132,'IARMBUS Register for Resource Available event test',22,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_29\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Register RPC calls success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",1);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        #passing parameter for receving RESOURCE_AVAILABLE event\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #Call second application to check for resource available event\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                                expectedresult=\"SUCCESS\"\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS:InvokeSecondApplication success\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE:InvokeSecondApplication fails\";\r\n                                                #wait for 10 sec\r\n                                                time.sleep(10);\r\n                                                #Get last received event details\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                expectedresult=\"SUCCESS\"\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #checking for event receiving status\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print details;\r\n                                                        print \"SUCCESS: Event is Received\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: Event is not Received\";\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                expectedresult=\"SUCCESS\"\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if expectedresult in actualresult:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed. %s\" %details;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler failed. %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",1);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: IARM_BusDaemon_ReleaseOwnership success\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        print \"SUCCESS :Allocated  resource is successfully released\";\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests the receiving of RESOURCE_AVAILABLE Event when one application releases a resource.Test Case ID:CT_IARMBUS_29				',NULL,3,'				','\0'),(94,141,'IARMBUS Broadcast ResolutionChange Event test',22,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_30\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\"); \r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS :Register Call successful\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                #passing parameter for receving Resolution change event\r\n                                tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                tdkTestObj.addParameter(\"event_id\",1);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #invoking second application to broadcast event\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        #checking for second application invokation status\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS:InvokeSecondApplication success\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE:InvokeSecondApplication fails\";\r\n                                        time.sleep(10);\r\n                                        #Getting last received event details\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #checking for event received status\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print details;\r\n                                                print \"SUCCESS: Event Received\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: Event is not received\";\r\n                                        #calling IARM_Bus_UnRegisterEventHandler API\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                        #Register for RESOLUTIONCHANGE event\r\n                                        tdkTestObj.addParameter(\"event_id\",1);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS:UnRegister Event Handler registered successfully\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Broadcasts a Resolution Change event to all the registered apps in IARM BUS\r\nTest Case ID : CT_IARMBUS_30      				',NULL,5,'				','\0'),(96,93,'IARMBUS BusCall MFR-STB Manufature Name test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_31\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature name (mfr)\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",0);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature name:\";\r\n                                print details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");  ','ALLOCATED','This test script queries the STB Manufacturer Name\r\nTest Case ID :CT_IARMBUS_31     		\r\n',NULL,3,'				','\0'),(97,107,'IARMBUS BusCall MFR-OUI test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_32\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-Organizationally Unique Identifier\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",1);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-Organizationally Unique Identifier:\";\r\n                                print details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");  ','ALLOCATED','This test script queries the Manufacturer Organizationally Unique Identifier\r\nTest Case ID : CT_IARMBUS_32    ',NULL,3,'				','\0'),(98,72,'IARMBUS BusCall MFR-Model Name test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_33\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-Model Name\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",2);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-Model Name:\";\r\n                                print details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script queries the MFR- Model Name\r\nTest Case ID : CT_IARMBUS_33',NULL,3,'				','\0'),(99,76,'IARMBUS BusCall MFR-Board description test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_34\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");   \r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n               #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-board description\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",3);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-board description:\";\r\n                                print details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script queries the MFR Board Description\r\nTest Case ID : CT_IARMBUS_34 ',NULL,3,'				','\0'),(100,65,'IARMBUS BusCall MFR-Board Product Class test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_35\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-Product Class\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",4);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-Product Class:\" ;\r\n                                print details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");  ','ALLOCATED','This test script queries the MFR Board Product Class\r\nTest Case ID : CT_IARMBUS_35 ',NULL,3,'				','\0'),(101,75,'IARMBUS BusCall MFR-SerialNumber test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_36\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        #parameter for getting STB Manufature-serial Number\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",5);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-serial Number:\";\r\n                                print details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");    ','ALLOCATED','This test script queries the MFR Serial Number\r\nTest Case ID : CT_IARMBUS_36   ',NULL,3,'				','\0'),(102,69,'IARMBUS BusCall MFR-Hardware version test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_37\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-Hardware version\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",6);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-Hardware version:\";\r\n                                print details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");  ','ALLOCATED','This test script queries the MFR Hardware version\r\nTest Case ID : CT_IARMBUS_37',NULL,3,'				','\0'),(103,65,'IARMBUS BusCall MFR-Software version test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_38\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-software version\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",7);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                print \"STB Manufature-software version:\";\r\n                                print details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script queries the MFR Software version\r\nTest Case ID : CT_IARMBUS_38    	\r\n',NULL,3,'				','\0'),(104,94,'IARMBUS BusCall MFR- Provision Code test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_39\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-provision code\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",8);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                print \"STB Manufature-provision code:\";\r\n                                print details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script queries the MFR Provision Code\r\nTest Case ID : CT_IARMBUS_39     ',NULL,3,'				','\0'),(105,77,'IARMBUS BusCall MFR-First Use Date test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_40\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        # parameter for getting STB Manufature-First Use Date\r\n                        tdkTestObj.addParameter(\"owner_name\",\"MFRLib\");\r\n                        tdkTestObj.addParameter(\"mfr_param_type\",9);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: RPC method invoked successfully\";\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                print \"STB Manufature-First Use Date:\";\r\n                                print details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Call failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This test script queries the MFR First Use date\r\nTest Case ID : CT_IARMBUS_40',NULL,3,'				','\0'),(184,106,'WebkitTest_Intelce',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'WebkitTest\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"SUCCESS\" in result.upper():\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for webkit test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"webkit\");\r\n  tdkTestObj.addParameter(\"Display_option\",\"intelce\");\r\n\r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n  #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Webkit Test Results : %s\" %actualresult;\r\n\r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details:\r\n    print \"Webkit Test status details : %s\" %details;\r\n    details=dict(item.split(\":\") for item in details.split(\" \"))\r\n    Resultvalue=details.values();\r\n    if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and expectedresult in actualresult :\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n       tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n    #Get the log path of the Webkit Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Webkit Test Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Webkit Test status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution\";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will execute webkit test suite.\r\nThis test script will be applicable to XG1 with RDK version 1.2 running boxes. And display option used as intelce.		',NULL,30,'				','\0'),(185,64,'WebkitTest_DirectFB',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'WebkitTest\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for webkit test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"webkit\");\r\n  tdkTestObj.addParameter(\"Display_option\",\"directfb\");\r\n\r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n  #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Webkit Test Results : %s\" %actualresult;\r\n\r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details:\r\n    print \"Webkit status details : %s\" %details;\r\n    details=dict(item.split(\":\") for item in details.split(\" \"))\r\n    Resultvalue=details.values();\r\n    if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and expectedresult in actualresult :\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n       tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n    #Get the log path of the webkit Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the webkit Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Webkit status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution \";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will execute webkit test suite.\r\nThis test script will be applicable to XI3 with RDK version 1.2 running boxes. And display option used as directfb.					',NULL,30,'				','\0'),(186,109,'QtTest_Intelce',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'QtTest\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for non gfx qt test suites execution \r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"qt_non_gfx\");\r\n\r\n  #Execute the test case in STB\r\n  NonGfx_Expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(NonGfx_Expectedresult);\r\n\r\n  #Get the result of execution\r\n  NonGfx_result = tdkTestObj.getResult();\r\n  print \"%s\" %NonGfx_result;\r\n    \r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details:\r\n    print \"Qt Non-Graphics Execution status details : %s\" %details;\r\n    details=dict(item.split(\":\") for item in details.split(\" \"))\r\n    Resultvalue=details.values();\r\n         \r\n    #Get the log path of the Qt Non-Graphics Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Qt Non-Graphics Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Qt Non-Graphics status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution\";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n  \r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for gfx test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"qt_gfx\");\r\n  tdkTestObj.addParameter(\"Display_option\",\"intelce\");\r\n  \r\n  #Execute the test case in STB\r\n  GFX_Expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(GFX_Expectedresult);\r\n\r\n  #Get the result of execution\r\n  GFX_result = tdkTestObj.getResult();\r\n  \r\n  #To Validate the Execution of Test Suites \r\n  details_Graphics = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details_Graphics:\r\n    print \"Qt Graphics Execution status details : %s\" %details_Graphics;\r\n    details_Graphics=dict(item.split(\":\") for item in details_Graphics.split(\" \"))\r\n    Resultvalue_Graphics=details_Graphics.values();\r\n         \r\n    #Get the log path of the Qt Graphics Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Qt Graphics Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Qt Graphics status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution\";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Printing the results of both Graphics and Non-Graphics\r\n  print \"gfx actual%s\" %GFX_result;\r\n  print \"gfx expected:%s\" %GFX_Expectedresult;\r\n  print \"non gfx exp:%s\" %NonGfx_Expectedresult;\r\n  print \"non gfx actual%s\" %NonGfx_result;\r\n  \r\n  if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and int(Resultvalue_Graphics[0])==(int(Resultvalue_Graphics[1])+int(Resultvalue_Graphics[2])) and int(Resultvalue_Graphics[2])==0 and NonGfx_Expectedresult in NonGfx_result and GFX_Expectedresult in GFX_result :\r\n     tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  else:\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will execute qt non-graphics and qt graphics test suite.\r\nThis test script will be applicable to XG1 with RDK version 1.2 running boxes. And display option used as intelce.',NULL,90,'				','\0'),(187,79,'QtTest_DirectFB',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'QtTest\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for non gfx qt test suites execution \r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"qt_non_gfx\");\r\n\r\n  #Execute the test case in STB\r\n  NonGfx_Expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(NonGfx_Expectedresult);\r\n\r\n  #Get the result of execution\r\n  NonGfx_result = tdkTestObj.getResult();\r\n    \r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details:\r\n    print \" Qt Non Graphics Execution status details : %s\" %details;\r\n    details=dict(item.split(\":\") for item in details.split(\" \"))\r\n    Resultvalue=details.values();\r\n         \r\n    #Get the log path of the Qt Non-Graphics Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Qt Non-Graphics Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Qt Non-Graphics status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution\";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n  \r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for gfx test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"qt_gfx\");\r\n  tdkTestObj.addParameter(\"Display_option\",\"directfb\");\r\n  \r\n  #Execute the test case in STB\r\n  GFX_Expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(GFX_Expectedresult);\r\n\r\n  #Get the result of execution\r\n  GFX_result = tdkTestObj.getResult();\r\n  \r\n  #To Validate the Execution of Test Suites \r\n  details_Graphics = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details_Graphics:\r\n    print \"Qt Graphics Execution status details : %s\" %details_Graphics;\r\n    details_Graphics=dict(item.split(\":\") for item in details_Graphics.split(\" \"))\r\n    Resultvalue_Graphics=details_Graphics.values();\r\n         \r\n    #Get the log path of the Qt Graphics Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Qt Graphics Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Qt Graphics status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution\";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Printing the results of both Graphics and Non-Graphics\r\n  print \"gfx actual%s\" %GFX_result;\r\n  print \"gfx expected:%s\" %GFX_Expectedresult;\r\n  print \"non gfx exp:%s\" %NonGfx_Expectedresult;\r\n  print \"non gfx actual%s\" %NonGfx_result;\r\n  \r\n  if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and int(Resultvalue_Graphics[0])==(int(Resultvalue_Graphics[1])+int(Resultvalue_Graphics[2])) and int(Resultvalue_Graphics[2])==0 and NonGfx_Expectedresult in NonGfx_result and GFX_Expectedresult in GFX_result :\r\n     tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  else:\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n  \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will execute qt non-graphics and qt graphics test suites.\r\nThis test script will be applicable to XI3 boxes and only for RDK version 1.2 running boxes. And display option given as directfb.',NULL,90,'				','\0'),(188,881,'GstreamerTest',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Gstreamer_execution\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for gstreamer test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"gstreamer\");\r\n\r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Gstreamer Test Result : %s\" %actualresult;\r\n  \r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details:\r\n    print \"Gstreamer Test status details : %s\" %details;\r\n    details=dict(item.split(\":\") for item in details.split(\" \"))\r\n    Resultvalue=details.values();\r\n    if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and expectedresult in actualresult :\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n       tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n    #Get the log path of the Gstreamer Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Gstreamer Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Gstreamer Test status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution\";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will execute gstreamer test suite.\r\nThis test script will be applicable to XG1 & XI3 with RDK version 1.2  & 1.3 running boxes.',NULL,30,'				','\0'),(190,115,'GstreamerBasePluginTest',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Gst-plugin-base_execution\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for gst-plugin-base test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"gst-plugin-base\");\r\n\r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n  #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Gst plugin base Test Results : %s\" %actualresult;\r\n  \r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details:\r\n    print \"Gst plugin base status details : %s\" %details;\r\n    details=dict(item.split(\":\") for item in details.split(\" \"))\r\n    Resultvalue=details.values();\r\n    if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and expectedresult in actualresult :\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n       tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n    #Get the log path of the Gst plugin base Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Gst plugin base Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Gst plugin base status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution \";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will execute gst-plugin-base test suite.\r\nThis test script will be applicable to XG1 & XI3 with RDK version 1.2  & 1.3 running boxes.		',NULL,30,'				','\0'),(191,112,'GstreamerGoodPluginTest',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Gst-plugin-good_Execution\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for gst-plugin-good test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"gst-plugin-good\");\r\n\r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n  #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Gst plugin good Test Result : %s\" %actualresult;\r\n  \r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details:\r\n    print \"Gst plugin good status details : %s\" %details;\r\n    details=dict(item.split(\":\") for item in details.split(\" \"))\r\n    Resultvalue=details.values();\r\n    if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and expectedresult in actualresult :\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n       tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n    #Get the log path of the Gst plugin good Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Gst plugin good Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Gst plugin good status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution\";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will execute gst-plugin-good test suite.\r\nThis test script will be applicable to XG1 & XI3 with RDK version 1.2  & 1.3 running boxes.						',NULL,30,'				','\0'),(192,221,'DS_SetColor test_02',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_02\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Message\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value\r\n                color = 0;\r\n                indicator = \"Power\";\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the color\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set color for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the COLOR of given Front panel Indicator\r\nTest Case ID : CT_DS_02				',NULL,3,'				','\0'),(193,114,'DS_SetBrightness test_01',76,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_01\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_GetIndicators\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                indicatordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetIndicators \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of Indicators\";\r\n                        print \"Indicators:%s\" %indicatordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the Indicators list\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetBrightness\');\r\n                #setting brightness parameter value\r\n                brightness = 5;\r\n                indicator_name = \"Power\";\r\n                tdkTestObj.addParameter(\"brightness\",brightness);\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator_name);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                getBrightness = tdkTestObj.getResultDetails();\r\n                setBrightness = \"%s\" %brightness;\r\n                print \"getBrightness:%s\" %getBrightness;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetBrightness\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the Brightness\";\r\n                        #comparing the brightness value before and after setting\r\n                        if setBrightness in getBrightness :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the Brightness are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the Brightness are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set Brightness for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Brightness of the given Front panel Indicator\r\nTest Case ID : CT_DS_01				',NULL,3,'				','\0'),(194,115,'DS_SetBlink test_03',75,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_03\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setBlink and getBlink APIs\r\n                tdkTestObj = obj.createTestStep(\'DS_SetBlink\');\r\n                # setting scroll class parameters values\r\n                blink_interval = 1;\r\n                blink_iteration = 2;\r\n                tdkTestObj.addParameter(\"blink_interval\",blink_interval);\r\n                tdkTestObj.addParameter(\"blink_iteration\",blink_iteration);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                blinkdetails = tdkTestObj.getResultDetails();\r\n                blinkinterval=\"%s\" %blink_interval;\r\n                blinkiteration=\"%s\" %blink_iteration;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetBlink\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the blink rate\";\r\n                        print \"getblink %s\" %blinkdetails;\r\n                        #comparing the blink paramaters before and after setting\r\n                        if ((blinkinterval in blinkdetails)and(blinkiteration in blinkdetails)):\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the blink rates are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the blink rates are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set blink rate for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the blink feature of given Front panel Indicator\r\nTest Case ID : CT_DS_03				',NULL,3,'				','\0'),(195,114,'DS_SetTimeFormat_and_Time test_04',87,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_04\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetText to set the TEXT in the FP \r\n                tdkTestObj = obj.createTestStep(\'DS_SetText\');\r\n                tdkTestObj.addParameter(\"text_display\",\"Hello world\");\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetText \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully Sets the Text in text panel\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set the text in FP\";\r\n                #calling DS_SetTime to set the time in the FP \r\n                tdkTestObj = obj.createTestStep(\'DS_SetTime\');\r\n                #setting values for time parameter\r\n                tdkTestObj.addParameter(\"time_hrs\",10);\r\n                tdkTestObj.addParameter(\"time_mins\",37);\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetTime\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully Sets the Time in text panel\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set the time in FP\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetTimeFormat\');\r\n                #setting time format\r\n                timeformat = 0;\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                tdkTestObj.addParameter(\"time_format\",timeformat);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                time_format=\"%s\" %timeformat;\r\n                actualresult = tdkTestObj.getResult();\r\n                textdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetTimeFormat \r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the timeformat\";\r\n                        print \"getTimeFormat %s\" %textdetails;\r\n                        #comparing the time format before and after setting\r\n                        if time_format in textdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the time formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the time formats are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                #calling DS_GetTextDisplays get list of Text Panel\r\n                tdkTestObj = obj.createTestStep(\'DS_GetTextDisplays\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                textdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetTextDisplays \r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list of Text panel supported\";\r\n                        print \"%s\" %textdetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the text panel list\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the Time Format and text in the text display of given Front panel Indicator\r\nTest Case ID : CT_DS_04				',NULL,3,'				','\0'),(196,77,'DS_SetScroll test_05',84,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_5\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setScroll and getScroll APIs\r\n                tdkTestObj = obj.createTestStep(\'DS_SetScroll\');\r\n                #setting scroll class parameters\r\n                viteration=2;\r\n                hiteration=4;\r\n                hold_duration=6;\r\n                tdkTestObj.addParameter(\"viteration\",viteration);\r\n                tdkTestObj.addParameter(\"hiteration\",hiteration);\r\n                tdkTestObj.addParameter(\"hold_duration\",hold_duration);\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                scrolldetails = tdkTestObj.getResultDetails();\r\n                str_viteration=\"%s\" %viteration;\r\n                str_hiteration=\"%s\" %hiteration;\r\n                str_hold_duration=\"%s\" %hold_duration;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetScroll\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the blink rate\";\r\n                        print \"getScroll %s\" %scrolldetails;\r\n                        #comparing the scroll parameters before and after setting\r\n                        if ((str_viteration in scrolldetails)and(str_hiteration in scrolldetails)and(str_hold_duration in scrolldetails)):\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the scroll details are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the scroll details are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set scroll details\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the scroll information of given Front panel Indicator\r\nTest Case ID : CT_DS_05				',NULL,3,'				','\0'),(199,108,'DS_LoopThru test_08',67,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_08\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_LoopThru to check audio loop thru for a port.\r\n                loop_thru=1;\r\n                tdkTestObj = obj.createTestStep(\'DS_LoopThru\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                tdkTestObj.addParameter(\"loop_thru\",loop_thru);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                loopthrudetails = tdkTestObj.getResultDetails();\r\n                setloopthru = \"%s\" %loop_thru;\r\n                #Check for SUCCESS/FAILURE return value of DS_LoopThru\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully calls setLoopThru\";\r\n                        print \"1:set 0:not set\";\r\n                        print \"getloopthru %s\" %loopthrudetails;\r\n                        #comparing loopthru status before and after setting\r\n                        if setloopthru in loopthrudetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS : setLoopThru and isLoopThru executed successfully\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE : setLoopThru and isLoopThru failed to execute\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed execute setLoopThru \";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Loop Thro Configuration of Audio Output Port\r\nTest Case ID : CT_DS_08				',NULL,3,'				','\0'),(201,158,'DS_SetEncoding test_10',81,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_10\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedEncodings get list of encoding.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedEncodings\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedEncodings\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list encoding supported\";\r\n                        print \"%s\" %encodingdetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported encoding list\";\r\n                #calling DS_SetEncoding to get and set the encoding  \r\n                tdkTestObj = obj.createTestStep(\'DS_SetEncoding\');\r\n                encoding=\"AC3\";\r\n                tdkTestObj.addParameter(\"encoding_format\",encoding);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetEncoding \r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the encoding\";\r\n                        print \"getencoding: %s\" %encodingdetails;\r\n                        # comparing the encoding detail before and after setting \r\n                        if encoding in encodingdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the encoding formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the encoding formats are not same\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                #tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE :Application failed to set and get the encoding formats\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Encoding Format of Audio.Test Case ID : CT_DS_10.  Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.',NULL,3,'				','\0'),(202,135,'DS_SetCompression test_11',78,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_11\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedCompression get list of compressions.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedCompressions\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedCompression\r\n                if expectedresult in actualresult:\r\n                       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                       print \"SUCCESS :Application successfully gets the list compression supported\";\r\n                       print \"%s\" %compressiondetails\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"FAILURE :Failed to get supported compression list\";\r\n                #calling DS_SetCompression to get and set the compression\r\n                tdkTestObj = obj.createTestStep(\'DS_SetCompression\');\r\n                compression=\"MEDIUM\";\r\n                tdkTestObj.addParameter(\"compression_format\",compression);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                setcompression = \"Compression format:%s\" %compression;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetCompression\r\n                print \"compression:%s\" %compressiondetails;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the compression\";\r\n                        print \"setcompression: %s\" %setcompression;\r\n                        print \"getcompression: %s\" %compressiondetails;\r\n                        #comparing compression before and after setting\r\n                        if compression in compressiondetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the compression formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the compression formats are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get the compression formats\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the Compression Format of Audio Test Case ID : CT_DS_11.Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.',NULL,3,'				','\0'),(203,104,'DS_SetStereoModes test_12',85,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_12\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                #calling DS_GetSupportedStereoModes get list of StereoModes.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedStereoModes\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedStereoModes\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list of supported StereoModes\";\r\n                        print \"%s\" %stereomodedetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported streoe modes\";\r\n                #calling DS_SetStereoMode to get and set the stereo modes\r\n                tdkTestObj = obj.createTestStep(\'DS_SetStereoMode\');\r\n                stereomode=\"SURROUND\";\r\n                tdkTestObj.addParameter(\"stereo_mode\",stereomode);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetStereoMode\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the stereo modes\";\r\n                        print \"getstereomode: %s\" %stereomodedetails;\r\n                        #comparing stereo modes before and after setting\r\n                        if stereomode in stereomodedetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the stereo modes are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"SUCCESS: Both the stereo modes are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get the stereo modes\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Stereo Mode of Audio.Test Case ID:CT_DS_12.Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.',NULL,3,'				','\0'),(204,112,'DS_SetDFC test_15',79,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_15\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDFC to get and set the zoom settings \r\n                tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                #zoom=\"Full\";\r\n                zoom=\"Platform\";\r\n                tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dfcdetails = tdkTestObj.getResultDetails();\r\n                setdfc=\"%s\" %zoom;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the zoom settings for the video device\";\r\n                        print \"getdfc %s\" %dfcdetails;\r\n                        #comparing the DFC (zoomSettings) before and after setting\r\n                        if setdfc in dfcdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the zoomsettings values are equal\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Get and Set APi\'s are Success But the zoomsettings values are not equal\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get and set the zoom settings\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Zoom Settings of Video Device\r\nTest Case ID : CT_DS_15				',NULL,3,'				','\0'),(205,108,'DS_Resolution test_16',72,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_16\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolutions\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"720p\";\r\n                tdkTestObj.addParameter(\"resolution\",resolution);\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS:set and get resolution Success\";\r\n                        print \"getresolution %s\" %resolutiondetails;\r\n                        #comparing the resolution before and after setting\r\n                        if resolution in resolutiondetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the resolutions are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the resolutions are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:set and get resolution fails\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Resolution of Video Output Port Test Case ID : CT_DS_16.Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.',NULL,3,'				','\0'),(206,93,'DS_HDCP Support test_18',65,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_18\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_HDCPSupport to check the HDCP content protection support fo the given port \r\n                tdkTestObj = obj.createTestStep(\'DS_HDCPSupport\');\r\n                portid=0;\r\n                tdkTestObj.addParameter(\"port_id\",portid);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                hdcpdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_HDCPSupport\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS: Application checks the support of HDCP\";\r\n                        print \"getHDCPsupport:%s\" %hdcpdetails;\r\n                        #Checking for the HDCP support\r\n                        if \"TRUE\" in hdcpdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: HDCP support is enabled\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: HDCP support is not enabled\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Application fails to check HDCP support\";\r\n                                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Checks the HDCP support of Video Output Port\r\nTest Case ID : CT_DS_18				',NULL,3,'				','\0'),(207,92,'DS_DTCP support test_19',56,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_19\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_DTCPSupport to check the DTCP content protection support fo the given port \r\n                tdkTestObj = obj.createTestStep(\'DS_DTCPSupport\');\r\n                portid=0;\r\n                tdkTestObj.addParameter(\"port_id\",portid);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dtcpdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_DTCPSupport\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS: Application checks the support of DTCP\";\r\n                        print \"getDTCPsupport:%s\" %dtcpdetails;\r\n                        #checking for DTCP suuport\r\n                        if \"TRUE\" in dtcpdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: DTCP support is enabled\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: DTCP support is not enabled\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Application fails to check DTCP support\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script checks the DTCP support of Video Output Port\r\nTest Case ID : CT_DS_19				',NULL,3,'				','\0'),(208,81,'DS_IsDynamicResolutionsSupport test_20',66,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_20\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_IsDynamicResolutionSupport to check the Dynamic resolution support\r\n                tdkTestObj = obj.createTestStep(\'DS_IsDynamicResolutionSupport\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dynamicResSupportdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_IsDynamicResolutionSupport\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application checks the support of Dynamic resolution\";\r\n                        #just printing the DynamicResolution suuport\r\n                        print dynamicResSupportdetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Application fails to check Dynamic resolution support\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script check the Dynamic Resolution Support of Video Output Port\r\nTest Case ID : CT_DS_20				',NULL,3,'				','\0'),(209,184,'DS_GetAspect Ratio test_21',57,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_21\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_IsDisplayConnectedStatus function to check for display connection status\r\n                tdkTestObj = obj.createTestStep(\'DS_IsDisplayConnectedStatus\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                displaydetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_IsDisplayConnectedStatus\r\n                if (expectedresult in actualresult) and (\"TRUE\" in displaydetails):\r\n                        print \"Display= %s\" %displaydetails;\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS:Display connection status verified\";\r\n                        #calling DS_GetAspectRatio to get the aspect ratio\r\n                        tdkTestObj = obj.createTestStep(\'DS_GetAspectRatio\');\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        aspectRatiodetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_GetAspectRatio\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application gets the Aspect ratio\";\r\n                                #just printing the AspectRatio\r\n                                print aspectRatiodetails;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:Application fails to get the Aspect Ratio of display device\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:\'vPort.isDisplayConnected\' API returns success but the display device is not connected with STB hence this test scenario fails.\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Checks the aspect ratio supported of Video Output Port\r\nTest Case ID : CT_DS_21.Note: This script will through exception when calling second time without restarting agent.This is an issue with DS.',NULL,3,'				','\0'),(210,119,'DS_GetDisplayDetails test_22',55,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_22\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_IsDisplayConnectedStatus function to check for display connection status\r\n                tdkTestObj = obj.createTestStep(\'DS_IsDisplayConnectedStatus\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                displaydetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_IsDisplayConnectedStatus\r\n                if (expectedresult in actualresult) and (\"TRUE\" in displaydetails):\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS:Display connection status verified\";\r\n                        #calling DS_GetDisplayDetails to get the\r\n                        tdkTestObj = obj.createTestStep(\'DS_DisplayDetails\');\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        displaydetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_GetDisplayDetails\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application list the details of display device\";\r\n                                #printing list of device details\r\n                                print displaydetails;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:Application fails to display the details of display device\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:\'vPort.isDisplayConnected\' API returns success but the display device is not connected with STB hence this test scenario fails.\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Lists the display details of Video Output Port\r\nTest Case ID : CT_DS_22				',NULL,3,'				','\0'),(231,235,'MS_LiveTune_Valid_Request_01',88,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_01\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\"); \r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the MediaStreamer_LiveTune_Request function\r\n        tdkTestObj = obj.createTestStep(\'MediaStreamer_LiveTune_Request\');\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid=streamDetails.getOCAPID();\r\n        Id = re.search(r\"(\\w\\w\\w\\w)\", validid);\r\n        if Id:\r\n                print \"ocapid : %s\" %validid;\r\n                tdkTestObj.addParameter(\"ocapId\",\"ocap://\"+validid);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"0\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                details = tdkTestObj.getResultDetails();\r\n                print \"Live Tune Response of Json parameter : %s\" %actualresult;\r\n                #compare the actual result with expected result of Json response Parameter\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Json Response Parameter is success\";\r\n                        print \"Live Tune description:Success\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Json response parameter is Failed\";\r\n                        print \"Failure scenarios : %s\" %details;\r\n        else:\r\n                print \"getOcapId is failed\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting Live Tune response of Mediastreamer.\r\nTest Case ID:CT_Mediastreamer_01  				',NULL,3,'				','\0'),(254,106,'DS_mute_test_09',100,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_09\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_MuteStatus to check audio mute for a port.\r\n                mute=0;\r\n                tdkTestObj = obj.createTestStep(\'DS_MuteStatus\');\r\n                portname=\"HDMI0\"\r\n                tdkTestObj.addParameter(\"port_name\",portname);\r\n                tdkTestObj.addParameter(\"mute_status\",mute);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                mutedetails = tdkTestObj.getResultDetails();\r\n                setmute = \"%s\" %mute;\r\n                #Check for SUCCESS/FAILURE return value of DS_MuteStatus\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully calls DS_MuteStatus\";\r\n                        print \"1:set 0:not set\";\r\n                        print \"getmute %s\" %mutedetails;\r\n                        #comparing the mute status before and after setting\r\n                        if setmute in mutedetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS : setMuted and isMuted executed successfully\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE : setMuted and isMuted failed to execute\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed execute setLoopThru \";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Mute status of Audio Output Port\r\nTest Case ID : CT_DS_09				',NULL,3,'				','\0'),(255,74,'DS_IsContentProtection test_17',101,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_17\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_DisplayConnectionStatus to check the status of display connection\r\n                tdkTestObj = obj.createTestStep(\'DS_IsContentProtected\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                displaydetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_DisplayConnectionStatus\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print displaydetails;\r\n                        print \"SUCCESS:checking Content protection status is done\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:checking Content protection status is failed\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script checks for Content Protection support of Video Output Port\r\nTest Case ID : CT_DS_17				',NULL,3,'				','\0'),(256,64,'DS_PowerMode Listener test_13',82,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_13\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_AddPowerModeListener for adding listener for power mode change\r\n                tdkTestObj = obj.createTestStep(\'DS_AddPowerModeListener\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_AddPowerModeListener \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully power mode change listener is added\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to add listener for power mode change\";\r\n                #calling DS_SetPowerMode to set the power mode of STB \r\n                tdkTestObj = obj.createTestStep(\'DS_SetPowerMode\');\r\n                powermode=1;\r\n                tdkTestObj.addParameter(\"new_power_state\",powermode);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                powerdetails = tdkTestObj.getResultDetails();\r\n                setpower = \"%d\" %powermode;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetPowerMode\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully changed the state of STB\";\r\n                        print \"getpower: %s\"%powerdetails;\r\n                        #comparing power state before and after setting \r\n                        if setpower in powerdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS:Both power states are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:Both power states are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to change the power mode\";\r\n                #calling DS_RemovePowerModeListener for removing listener for power mode change\r\n                tdkTestObj = obj.createTestStep(\'DS_RemovePowerModeListener\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_RemovePowerModeListener \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully power mode change listener is removed\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to remove listener for power mode change\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check for adding and removing powermode change listener.\r\nTestCase ID:13\r\nNote:This script will not work becaus \"setPowerMode\" API is not yet implemented in devicesettings component',NULL,3,'				','\0'),(258,67,'DS_AddDisplayconnection Listener test_14',104,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip= <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_14\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_AddDisplayConnectionListener for adding listener for display connection change\r\n                tdkTestObj = obj.createTestStep(\'DS_AddDisplayConnectionListener\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_AddDisplayConnectionListener \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully display connection state change listener is added\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to add listener for display connection state change\";\r\n                #calling DS_RemoveDisplayConnectionListener for removing listener for display connection state change\r\n                tdkTestObj = obj.createTestStep(\'DS_RemoveDisplayConnectionListener\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_RemoveDisplayConnectionListener \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully display connection state change listener is removed\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to remove listener for display connection state change\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully display connection state change listener is removed\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to remove listener for display connection state change\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:   \r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:           \r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script checks for adding and removing display connection listener.\r\nTestCase ID:CT_DS_14				',NULL,2,'				','\0'),(259,314,'Glib_Test',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.3\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Glib_execution\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for gstreamer test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"glib\");\r\n\r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Glib Test Result : %s\" %actualresult;\r\n  \r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  print \"Glib status details : %s\" %details;\r\n  if \"TotalSuite\" in details:\r\n    \r\n    details=dict(item.split(\":\") for item in details.split(\" \"))\r\n    Resultvalue=details.values();\r\n    if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and expectedresult in actualresult :\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n       tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n    #Get the log path of the glib Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Glib Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Glib status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution\";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will launch glib test suite.\r\nThis test script will be applicable to XG1 & XI3 with RDK version 1.2  & 1.3 running boxes.						',NULL,20,'				','\0'),(262,148,'SM_RegisterService test',106,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_1\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        service_name = \"deviceSettingService\"\r\n        tdkTestObj.addParameter(\"service_name\",service_name);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                print \"Registered Service:%s\" %service_name;\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                service_name = \"deviceSettingService\";\r\n                tdkTestObj.addParameter(\"service_name\",service_name);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegistered a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will register for a service and un-register the same.\r\nTest Case ID:CT_SM_1				',NULL,2,'				','\0'),(263,108,'SM_UnRegisterService test',108,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_2\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - unregisterService API\r\n        tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n        expectedresult=\"FAILURE\"\r\n        serviceName=\"deviceSettingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS:No services registered to unRegister it\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application unRegisteres a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script verifies the error scenario when un-registering a service is done without being registered\r\nTest Case ID: CT_SM_2				',NULL,2,'				','\0'),(265,96,'DS_SetAudioLevel test_06',110,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_06\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");    \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setLevel and getLevel APIs\r\n                tdkTestObj = obj.createTestStep(\'DS_SetAudioLevel\');\r\n                #setting audio level parameter\r\n                audiolevel=4.32;\r\n                tdkTestObj.addParameter(\"audio_level\",audiolevel);\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                leveldetails = tdkTestObj.getResultDetails();\r\n                setlevel = \"%s\" %audiolevel;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetLevel\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the audio level\";\r\n                        #print \"setlevel %s\" %setlevel;\r\n                        print \"getlevel %s\" %leveldetails;\r\n                        #comparing audio level before and after setting\r\n                        if setlevel in leveldetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the audio levels are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the audio levels are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set audio level\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check for setting and getting the audio level\r\nTestCase ID:06				',NULL,3,'				','\0'),(266,78,'DS_SetDB test_07',109,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_07\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDB to set the audio DB level for the given audio port \r\n                dblevel=1.120000;\r\n                tdkTestObj = obj.createTestStep(\'DS_SetAudioDB\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                tdkTestObj.addParameter(\"db_level\",dblevel);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dbdetails = tdkTestObj.getResultDetails();\r\n                setdb=\"%s\" %dblevel;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDB\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully sets and gets DB level\";\r\n                        print \"getdb %s\" %dbdetails.upper();\r\n                        #comparing audio DB before anf after setting \r\n                        if setdb in dbdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Both the audio dbs are same \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Both the audio dbs are not same \";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get DB level \";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check for setting and getting the audio DB level \r\nTestCase ID:07				',NULL,3,'				','\0'),(270,133,'Openssl_Test',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Openssl_execution\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for openssl test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"openssl\");\r\n\r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Actual Result :%s\"%actualresult;\r\n  details = tdkTestObj.getResultDetails();\r\n  print \"Openssl Test Details :%s\"%details;  \r\n  #To Validate the Execution of Test Suites \r\n  if expectedresult in actualresult:\r\n    tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n  #Get the log path of the openssl Testsuite\r\n  logpath =tdkTestObj.getLogPath();\r\n  if \"TestSummary.log\" in logpath:\r\n     print \"Log Path :%s\"%logpath;\r\n     #Transferring the openssl Testsuite Logs\r\n     tdkTestObj.transferLogs( logpath, \"true\" );\r\n  else:\r\n     print \"Log path is not available and transfer of logs will not be initialised\";\r\n  \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will launch all Openssl test applications.\r\nThis test script will be applicable to XG1 & XI3 with RDK version 1.2  & 1.3 running boxes.										',NULL,30,'				','\0'),(271,141,'SM_GetRegisteredService test',114,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_5\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        serviceName=\"deviceSettingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                print \"Registered Service:%s\" %serviceName;\r\n                tdkTestObj = obj.createTestStep(\'SM_GetRegisteredServices\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult= tdkTestObj.getResult();\r\n                servicelist =tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of SM_GetRegisteredServices\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS: Application succesfully executes getRegisteredServices API\";\r\n                        print servicelist;\r\n                        if serviceName in servicelist:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: service present in Registered services\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: service not present  in Registered services\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Application Failed to execute getRegisteredService API\";\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script gets the list of registered services\r\nTest Case ID: CT_SM_5			',NULL,2,'				','\0'),(274,70,'libsoup_Test',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Libsoup_execution\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for Libsoup test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"libsoup\");\r\n\r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Libsoup Test Result : %s\" %actualresult;\r\n  \r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details:\r\n    print \"Libsoup status details : %s\" %details;\r\n    details=dict(item.split(\":\") for item in details.split(\" \"))\r\n    Resultvalue=details.values();\r\n    if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and expectedresult in actualresult :\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n       tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n    #Get the log path of the Libsoup Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Libsoup Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Libsoup status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution \";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will launch all libsoup test applications.\r\nThis test script will be applicable to XG1 & XI3 with RDK version 1.2  & 1.3 running boxes.										',NULL,30,'				','\0'),(289,306,'E2E_rmfapp_help_and_quit',126,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rmfapp\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_rmfapp_help_and_quit\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nif \"SUCCESS\" in result.upper():\r\n    print \"rmf app module loaded successfully\"\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'E2E_rmfapp_help\');\r\n\r\n    expectedresult = \"Test Suite Executed\"\r\n\r\n    print \"Sending command to CLI interface of application...\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n\r\n    if expectedresult in result:\r\n	tdkTestObj.setResultStatus(\"SUCCESS\");\r\n	print \"SUCCESS: command was processed by rmfApp application.\"\r\n    else:\r\n	tdkTestObj.setResultStatus(\"FAILURE\");\r\n	details=tdkTestObj.getResultDetails();\r\n	print \"FAILURE: rmfApp failed. Details: %s\" %details;\r\n\r\n\r\n    logpath = tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n    if \".log\" in logpath:\r\n       #Transferring the application logs\r\n       tdkTestObj.transferLogs( logpath, \"false\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n\r\n    obj.unloadModule(\"rmfapp\");\r\n	\r\nelse:\r\n    print \"Failed to load rmfapp module\"\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','				',NULL,5,'','\0'),(296,131,'SM_GetGlobal Service test',133,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_6\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");       \r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        serviceName=\"deviceSettingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                print \"Registered Service:%s\" %serviceName;\r\n                tdkTestObj = obj.createTestStep(\'SM_GetGlobalService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult= tdkTestObj.getResult();\r\n                #serviceDetail =tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of SM_GetGlobalService\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS: Application succesfully executes getGlobalService API\";\r\n                        serviceDetail =tdkTestObj.getResultDetails();\r\n                        if serviceName in serviceDetail:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Service instance got successfully\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Failed to get service instance\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Application Failed to execute getGloalService API\";\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\"); ','ALLOCATED','This script gets the handler to a registered service\r\nTest Case ID: CT_SM_6				',NULL,2,'				','\0'),(298,30,'E2E_rmfApp_play_and_quit',140,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rmfapp\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_rmfapp_play_and_quit\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nif \"SUCCESS\" in result.upper():\r\n    print \"rmf app module loaded successfully\"\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n    #Prmitive test case which associated to this Script\r\n    #tdkTestObj = obj.createTestStep(\'E2E_rmfapp_help\');\r\n    tdkTestObj = obj.createTestStep(\'E2E_rmfapp_play_url\');\r\n\r\n    expectedresult=\"Test Suite Executed\"\r\n\r\n    print \"Sending command to CLI interface of application...\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n\r\n    if expectedresult in result:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"SUCCESS: command was processed by rmfApp application.\"\r\n    else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        details=tdkTestObj.getResultDetails();\r\n        print \"FAILURE: rmfApp failed. Details: %s\" %details;\r\n\r\n    time.sleep(60) #delay so that playback can be observed.\r\n\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    if \".log\" in logpath:\r\n       #Transferring the application logs\r\n       tdkTestObj.transferLogs( logpath, \"false\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n\r\n    obj.unloadModule(\"rmfapp\");\r\n\r\nelse:\r\n    print \"Failed to load rmfapp module\"\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','				',NULL,5,'','\0'),(300,95,'SM_SetApiVersion test',134,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_8\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        serviceName=\"deviceSettingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                print \"Registered Service:%s\" %serviceName;\r\n                tdkTestObj = obj.createTestStep(\'SM_SetAPIVersion\');\r\n                expectedresult=\"SUCCESS\"\r\n                apiVersion=random.randint(1,10000);\r\n                tdkTestObj.addParameter(\"apiVersion\",apiVersion);\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult= tdkTestObj.getResult();\r\n                \r\n                apiVersion =\"%s\"%apiVersion;\r\n                #Check for SUCCESS/FAILURE return value of SM_SetAPIVersion\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS: Application succesfully executes SM_SetAPIVersion API\";\r\n                        apiversiondetail =tdkTestObj.getResultDetails();\r\n                        print apiversiondetail;\r\n                        if \"SAME_DATA_ALREADY_ENTERED\" in apiversiondetail:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Existing API version value is same as the entered value\";\r\n                        elif apiVersion in apiversiondetail:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both API versions are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: API versions are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Application Failed to execute SM_SetAPIVersion API\";\r\n                # calling SM_UnRegisterService to unregister service\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script gets and sets the API version of the requested service\r\nTest Case ID: CT_SM_8\r\n				',NULL,2,'				','\0'),(301,64,'SM_RegisterForEvents test',135,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_9\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        serviceName=\"deviceSettingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                print \"Registered Service:%s\" %serviceName;\r\n                tdkTestObj = obj.createTestStep(\'SM_RegisterForEvents\');\r\n                expectedresult=\"SUCCESS\"\r\n                event_name=\"deviceDiscoveryUpdate\";\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.addParameter(\"event_name\",event_name);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult= tdkTestObj.getResult();\r\n                #eventregisterdetail =tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of SM_RegisterForEvents\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        eventregisterdetail =tdkTestObj.getResultDetails(); \r\n                        print eventregisterdetail;\r\n                        print \"SUCCESS: Application succesfully executes SM_RegisterForEvents API\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Application Failed to execute SM_RegisterForEvents API\";\r\n                # calling SM_UnRegisterService to unregister service\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script Registers for events for a given service\r\nTest Case ID: CT_SM_9\r\n				',NULL,2,'				','\0'),(305,73,'SM_SetDeviceName test',138,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_14\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        serviceName=\"homeNetworkingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                print \"Registered Service:%s\" %serviceName;\r\n                tdkTestObj = obj.createTestStep(\'SM_HN_SetDeviceName\');\r\n                expectedresult=\"SUCCESS\"\r\n                device_name=\"DeviceName123\";\r\n                tdkTestObj.addParameter(\"device_name\",device_name);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult= tdkTestObj.getResult();\r\n                devicenamedetails= tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of SM_HN_SetDeviceName\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS:Application succesfully executes SM_HN_SetDeviceName API\";\r\n                        print devicenamedetails;\r\n                        if device_name in devicenamedetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS:Both the names are same \";\r\n                        else:\r\n                                print \"FAILURE:Both the name are different\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Application Failed to execute SM_HN_SetDeviceName API\";\r\n                # calling SM_UnRegisterService to unregister service\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This script gets and sets the device name using Home Networking service\r\nTest Case ID: CT_SM_14			',NULL,0,'This scripting has not developed as this functionality has not been implemented by Service Manager module.				',''),(306,128,'Jansson_Test',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.3\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Jansson_execution\');\r\n\r\n#Get the result of connection with test component and DUT\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for jansson test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"jansson\");\r\n\r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Jansson Test Result : %s\" %actualresult;\r\n  \r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"test suites\" in details:\r\n    print \"Jansson status details : %s\" %details;\r\n    if \"4 test suites passed\" in details and expectedresult in actualresult :\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n	tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n    #Get the log path of the Jansson Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"log_jansson\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Jansson Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"false\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Jansson status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution\";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will launch all jansson test suites.\r\nThis test script will be applicable to XG1 & XI3 with RDK version 1.2  & 1.3 running boxes.														',NULL,30,'				','\0'),(312,205,'CC_Initialization_01',148,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_Initialization_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n  #calling Closed Caption API CC_Initialization\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\";\r\n\r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \"cc_Init_actualresult  :%s\" %cc_Init_actualresult; \r\n\r\n  #Check for SUCCESS return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Initializes the closed caption manager.\r\nTest Case ID : CT_ClosedCaption_01				',NULL,1,'				','\0'),(332,57,'CC_Show_21',155,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_Show_21\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n    #calling closed caption API to show all closed caption displays\r\n    tdkTestObj = obj.createTestStep(\'CC_Show\');\r\n		\r\n    #Execute the test case in STB\r\n    cc_show_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_show_expectedresult);\r\n    cc_show_actualresult = tdkTestObj.getResult();\r\n    details=tdkTestObj.getResultDetails();\r\n    print \"cc_show_actualresult :%s\" %cc_show_actualresult;\r\n	  \r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_show_expectedresult in cc_show_actualresult:\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n      print \"SUCCESS\";\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: In showing Closed Caption display %s\" %details;\r\n	      \r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to show all closed caption displays.\r\nTest Case ID : CT_ClosedCaption_21					',NULL,1,'				','\0'),(333,83,'CC_Hide_22',157,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_Hide_22\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n    #calling closed caption API to hide all closed caption displays\r\n    tdkTestObj = obj.createTestStep(\'CC_Hide\');\r\n		\r\n    #Execute the test case in STB\r\n    cc_hide_expectedresult=\"SUCCESS\"			\r\n    tdkTestObj.executeTestCase(cc_hide_expectedresult);\r\n    cc_hide_actualresult = tdkTestObj.getResult();\r\n    details=tdkTestObj.getResultDetails();\r\n	  \r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_hide_expectedresult in cc_hide_actualresult:\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n      print \"SUCCESS : In hiding closed capton display\";\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: In hiding Closed Caption display %s\" %details;\r\n	      \r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script hides all the closed caption displays \r\nTest Case ID : CT_ClosedCaption_22				',NULL,1,'				','\0'),(336,85,'Qt5_Test',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.3\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Qt5Test\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for qt5 test suites execution \r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"qt5\");\r\n\r\n  #Execute the test case in STB\r\n  Qt5_Expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(Qt5_Expectedresult);\r\n\r\n  #Get the result of execution\r\n  Qt5_result = tdkTestObj.getResult();\r\n  print \"%s\" %Qt5_result;\r\n    \r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details:\r\n     print \"Qt5  Execution status details : %s\" %details;\r\n     details=dict(item.split(\":\") for item in details.split(\" \"))\r\n     Resultvalue=details.values();\r\n     #Printing the results of Qt5 Test suite\r\n     print \"Expected result:%s\" %Qt5_Expectedresult;\r\n     print \"Actual result:%s\" %Qt5_result;\r\n     if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and Qt5_Expectedresult in Qt5_result:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n     else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n          \r\n     #Get the log path of the Qt Graphics Testsuite\r\n     logpath =tdkTestObj.getLogPath();\r\n     if \"TestSummary.log\" in logpath:\r\n        print \"Log Path :%s\"%logpath;\r\n        #Transferring the Qt 5 Testsuite Logs\r\n        tdkTestObj.transferLogs( logpath, \"true\" );\r\n     else:\r\n        print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Qt5 status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution \";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	   \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";				\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will execute qt5 non-graphics and graphics test suite.\r\nThis test script will be applicable to XG1 with RDK version 1.3 running boxes with qt5 used. 		',NULL,90,'				','\0'),(351,85,'CC_Get_SupportedServiceNumberCount_ServiceNumber_23',178,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_Get_SupportedServiceNumberCount_ServiceNumber_23\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n    #calling closed caption API CC_SetGetAnalogChannel to set the analog channel number of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_Get_SupportedServiceNumberCount\');\r\n	\r\n    #Execute the test case in STB\r\n    cc_Get_SupportedServiceNumberCount_expectedresult=\"SUCCESS\";\r\n				\r\n    tdkTestObj.executeTestCase(cc_Get_SupportedServiceNumberCount_expectedresult);\r\n    cc_Get_SupportedServiceNumberCount_actualresult = tdkTestObj.getResult();\r\n    details=tdkTestObj.getResultDetails();\r\n    print \"details :%s\" %details;\r\n	  \r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Get_SupportedServiceNumberCount_expectedresult in cc_Get_SupportedServiceNumberCount_actualresult:\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n      print \"Total service number count :%s\" %details;\r\n      print \"SUCCESS: Application successfully started with Closed Caption \";\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: In starting Closed Caption %s\" %details;\r\n	  \r\n   #calling closed caption API CC_SetGetAnalogChannel to set the analog channel number of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_Get_SupportedServiceNumber\');\r\n	\r\n    #Execute the test case in STB\r\n    cc_Get_SupportedServiceNumber_expectedresult=\"SUCCESS\"		\r\n    tdkTestObj.executeTestCase(cc_Get_SupportedServiceNumber_expectedresult);\r\n    cc_Get_SupportedServiceNumber_actualresult = tdkTestObj.getResult();\r\n    details=tdkTestObj.getResultDetails();\r\n	  \r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Get_SupportedServiceNumber_expectedresult in cc_Get_SupportedServiceNumber_actualresult:\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n      print \"Services : %s\" %details;\r\n      print \"SUCCESS: In getting the supported service number\";\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: In getting the supported service number %s\" %details;\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;  \r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");			','ALLOCATED','This test script gets the supported service number count and the total service numbers\r\nTest Case ID : CT_ClosedCaption_23				',NULL,1,'				','\0'),(352,246,'CC_SetGet_State_02',182,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_State_02\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n    \r\n    #calling closed caption API \"CC_SetGet_Status\" to set the closed caption status\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGet_State\');\r\n    Status = 1; # Must be either 0 or 1, 0 - OFF and 1 - ON\r\n				\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"status\", Status);\r\n				\r\n    #Execute the test case in STB\r\n    cc_Set_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_expectedresult);\r\n    cc_Set_actualresult = tdkTestObj.getResult();\r\n    print \"cc_Set_actualresult :%s\" %cc_Set_actualresult;\r\n    Setstatusdetails =tdkTestObj.getResultDetails();\r\n    print \"Set statusdetails : %s\" %Status;\r\n    Status = \"%s\" %Status;\r\n	  \r\n    #Check for SUCCESS/FAILURE return value for the closed caption status set.\r\n    if cc_Set_expectedresult in cc_Set_actualresult:\r\n      print \"CC is set to render successfully\";\r\n      print \"get status details %s\" %Setstatusdetails;\r\n      if Status in Setstatusdetails:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"SUCCESS: Set and Get values of status is same\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"FAILURE: Set and Get values of status is not same with %s\" %tdkTestObj.getResultDetails();   \r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: with %s\" %tdkTestObj.getResultDetails();   \r\n	\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %tdkTestObj.getResultDetails();   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";	\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script is used to Start and stop closed caption renderring.\r\nTest Case ID :CT_ClosedCaption_02					',NULL,1,'				','\0'),(363,119,'CC_ResetTrickPlayStatus_24',191,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_ResetTrickPlayStatus_24\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \"cc_Init_actualresult :%s\" %cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n    #calling closed caption API CC_SetGetDigitalChannel to set the attribute  of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_ResetTrickPlayStatus\');\r\n    				\r\n    #Execute the test case in STB\r\n    cc_ResetTrickPlayStatus_expectedresult=\"SUCCESS\"\r\n				\r\n\r\n    tdkTestObj.executeTestCase(cc_ResetTrickPlayStatus_expectedresult);\r\n    cc_ResetTrickPlayStatus_actualresult = tdkTestObj.getResult();\r\n    cc_ResetTrickPlayStatus_details=tdkTestObj.getResultDetails();\r\n    print \"cc_ResetTrickPlayStatus_actualresult :%s\" % cc_ResetTrickPlayStatus_actualresult;\r\n   \r\n #Check for SUCCESSreturn value of closed capiton set attribute\r\n    if cc_ResetTrickPlayStatus_expectedresult in cc_ResetTrickPlayStatus_actualresult:\r\n      print \"SUCCESS : In resetting the value\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: Setting trickplay status %s\" %tdkTestObj.getValue(\"details\");\r\n    \r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %tdkTestObj.getValue(\"details\");   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");				','ALLOCATED','This test script sets trickplay status of the closed caption to ON / OFF.\r\nTest Case ID :CT_ClosedCaption_24				',NULL,1,'				','\0'),(364,68,'CC_SetTrickPlayStatus_25',192,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetTrickPlayStatus_25\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \"cc_Init_actualresult :%s\" %cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n    #calling closed caption API to set the attribute  of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetTrickPlayStatus\');\r\n    				\r\n    #Execute the test case in STB\r\n    cc_ResetTrickPlayStatus_expectedresult=\"SUCCESS\"\r\n    trickPlayStatus = 1;\r\n\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"trickPlayStatus\", trickPlayStatus);\r\n				\r\n    tdkTestObj.executeTestCase(cc_ResetTrickPlayStatus_expectedresult);\r\n    cc_ResetTrickPlayStatus_actualresult = tdkTestObj.getResult();\r\n    details=tdkTestObj.getResultDetails();\r\n    print \" cc_ResetTrickPlayStatus_actualresult :%s\" % cc_ResetTrickPlayStatus_actualresult;\r\n    print \"trickPlayStatus :%s\" %trickPlayStatus;\r\n	  \r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_ResetTrickPlayStatus_expectedresult in cc_ResetTrickPlayStatus_actualresult:\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n      print \"SUCCESS: In setting trickplay status\";\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: Setting trickplay status %s\" %details;\r\n    \r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");				','ALLOCATED','This test script is used to set the trickplay status of the closed caption to ON / OFF.\r\nTest Case ID :CT_ClosedCaption_25					',NULL,1,'				','\0'),(368,369,'CC_SetGet_Attribute_BgColor_04',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_BgColor_04\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\"; \r\n\r\n    #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (BGColor) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    iterator = [\'000000\', \'FFFFFF\', \'FF0000\', \'00FF00\', \'0000FF\', \'FFFF00\', \'FF00FF\', \'00FFFF\'];\r\n    categories = \"color\";\r\n    attrib_type = 2; # To set BGColor\r\n    color_type = 5; \r\n    cc_type = 0  #Digital / Analog\r\n    \r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", color_type);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n						\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\";			\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Get_Attribute_details :%s\" %cc_Get_Attribute_details;\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    Bg_color = \"%s\" %color_type;\r\n    print \"Set Bg_color %s\" %iterator[color_type];\r\n   #print \"details :%s\" %tdkTestObj.getValue (\"details\");\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"Get Bg_Color %s\" %cc_Get_Attribute_details.upper();\r\n      retattribute=cc_Get_Attribute_details.upper();\r\n      print \"returned attirbute =%s\" %retattribute;\r\n      for cc_Get_Attribute_details in iterator:\r\n        if iterator[color_type] in retattribute:\r\n          flag = 0;             \r\n        else:\r\n          flag =1;\r\n      if flag == 0:\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n       print \"-- Get and set values of Bgcolor are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of Bg color are not same --\";\r\n        print \"FAILURE: with %s\" %retattribute;\r\n\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: Bg color attribute is not set with %s\" %tdkTestObj.getValue(details);\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get the closed caption attribute of background color.\r\nTest Case ID : CT_ClosedCaption_04					',NULL,1,'				','\0'),(369,194,'CC_SetGet_Attribute_FontColor_03',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_FontColor_03\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\"; \r\n    iterator = [\'000000\', \'FFFFFF\', \'FF0000\', \'00FF00\', \'0000FF\', \'FFFF00\', \'FF00FF\', \'00FFFF\'];\r\n\r\n    #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (BGColor) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"color\";\r\n    attrib_type = 1; # To set BGColor\r\n    color_type = 2; \r\n    cc_type = 0  #Digital / Analog\r\n    \r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", color_type);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n						\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %color_type;\r\n    print \"Set font color : %s\" %iterator[color_type];\r\n     \r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"get font color %s\" %cc_Get_Attribute_details;\r\n      retattribute=cc_Get_Attribute_details.upper();\r\n      print \"returened attirbute =%s\" %retattribute;\r\n      for cc_Get_Attribute_details in iterator:\r\n        if iterator[color_type] in retattribute:\r\n          flag = 0;             \r\n        else:\r\n          flag =1;\r\n      if flag == 0:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of font color are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of font color are not same --\";\r\n       \r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: font color attribute is not set with %s\" %tdkTestObj.getResultDetails();\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %tdkTestObj.getResultDetails();   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";	\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");				','ALLOCATED','This test script is used to Set and get the  closed caption attribute of foreground color(font color).\r\nTest Case ID : CT_ClosedCaption_03				',NULL,1,'				','\0'),(370,41,'Qt5Webkit_Test',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.3\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Qt5WebkitTest\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for qt5webkit test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"qt5webkit\");\r\n  \r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n  #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Webkit Test Results : %s\" %actualresult;\r\n\r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"TotalSuite\" in details:\r\n    print \"Qt5Webkit status details : %s\" %details;\r\n    details=dict(item.split(\":\") for item in details.split(\" \"))\r\n    Resultvalue=details.values();\r\n    if int(Resultvalue[0])==(int(Resultvalue[1])+int(Resultvalue[2])) and int(Resultvalue[2])==0 and expectedresult in actualresult :\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n       tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n    #Get the log path of the qt5webkit Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"TestSummary.log\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the qt5webkit Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"true\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Qt5Webkit status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution\";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will execute webkit-5 test suite.\r\nThis test script will be applicable to XG1 with RDK version 1.3 running boxes. 				',NULL,90,'				','\0'),(371,103,'CC_SetGet_Attribute_FontOpacity_05',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_FontOpacity_05\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n\r\n#calling closed caption API \"CC_SetGetAttribute\" to set the attribute (FontOpacity) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"Opacity\";\r\n    attrib_type = 4; # To set BGColor\r\n    opacity_type = 2; #\"0x0000ff\"; # Blue\r\n    cc_type = 0  #Digital / Analog\r\n    \r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", opacity_type);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n						\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %opacity_type;\r\n    print \"attrib_type %s\" %attrib_type;\r\n    print \"cc_Get_Attribute_details %s\" %cc_Get_Attribute_details;\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"get font opacity %s\" %cc_Get_Attribute_details;\r\n      if attrib_type in cc_Get_Attribute_details:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of font opacity are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of font opacity are not same --\";\r\n        print \"FAILURE: font opacity attribute is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: font opacity attribute is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used toSet and get the  closed caption attribute of foreground opacity.\r\nTest Case ID :CT_ClosedCaption_05					',NULL,1,'				','\0'),(372,101,'CC_SetGet_Attribute_BGOpacity_06',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_BGOpacity_06\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\";\r\n\r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n    #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (BGOpacity) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"Opacity\";\r\n    attrib_type = 8; \r\n    opacity_type = 2; \r\n    cc_type = 0  #Digital / Analog\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", opacity_type);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n    \r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\";			\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %opacity_type;\r\n    print \"Set Bg opacity %s\" %opacity_type;\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"Get Bg opacity %s\" %cc_Get_Attribute_details;\r\n      if attrib_type in cc_Get_Attribute_details:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of Bg opacity are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of Bg color are not same --\";\r\n        print \"FAILURE: with %s \" %tdkTestObj.getValue(\"details\"); \r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: Bg opacity attribute is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %cc_Get_Attribute_details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get the  closed caption attribute of background opacity.\r\nTest Case ID : CT_ClosedCaption_06					',NULL,1,'				','\0'),(373,86,'CC_SetGet_Attribute_FontStyle_07',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_FontStyle_07\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n	  \r\n    #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (FontOpacity) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"style\";\r\n    attrib_type = 16; \r\n    font_style = \"Casual\"; #\"0x0000ff\"; # Blue\r\n    cc_type = 0  #Digital / Analog\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", font_style);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n				\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %font_style ;\r\n    print \"Set font style %s\" %font_style;\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"Get font style %s\" %cc_Get_Attribute_details;\r\n      if attrib_type in cc_Get_Attribute_details:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of font style are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of font style are not same --\";\r\n        print \"FAILURE: with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: font style attribute is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");				','ALLOCATED','This test script is used to Set and get the  closed caption attribute of font style.\r\nTest Case ID : CT_ClosedCaption_07				',NULL,1,'				','\0'),(374,86,'CC_SetGet_Attribute_FontSize_08',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_FontSize_08\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n\r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";		  \r\n    #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (FontOpacity) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"size\";\r\n    attrib_type = 32; # To set BGColor\r\n    font_size = 2; # Blue\r\n    cc_type = 0  #Digital / Analog\r\n\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", font_size);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n						\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %font_size;\r\n    print \"Set font size %s\" %font_size;\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"get font size %s\" %cc_Get_Attribute_details;\r\n      if attrib_type in cc_Get_Attribute_details:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of font size are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of font size are not same --\";\r\n        print \"FAILURE: with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: font size attribute is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get the  closed caption attribute of font size.\r\nTest Case ID : CT_ClosedCaption_08					',NULL,1,'				','\0'),(375,94,'CC_SetGet_Attribute_FontItalic_09',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_FontItalic_09\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (FontItalic) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"fontItalic\";\r\n    attrib_type = 64; # To set FontItalic\r\n    fontItalic = 1; #\"0x0000ff\"; # Blue\r\n    cc_type = 0  #Digital / Analog\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", fontItalic);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n				\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %fontItalic ;\r\n    print \"Set font italic %s\" %fontItalic;\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"get font italic %s\" %cc_Get_Attribute_details;\r\n      if attrib_type in cc_Get_Attribute_details:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of font italic are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of font italic are not same --\";\r\n        print \"FAILURE: with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: font italic attribute is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get the  closed caption attribute of font Italic (Italicized font).\r\nTest Case ID : CT_ClosedCaption_09					',NULL,1,'','\0'),(376,80,'CC_SetGet_Attribute_FontUnderline_10',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_FontUnderline_10\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n\r\n#calling closed caption API \"CC_SetGetAttribute\" to set the attribute (FontUnderline) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"fontUnderline\";\r\n    attrib_type = 128; # To set FontUnderline\r\n    fontUnderline = 1; #\"0x0000ff\"; # Blue\r\n    cc_type = 0  #Digital / Analog\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", fontUnderline);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n				\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %fontUnderline;\r\n    print \"Set font underline %s\" %fontUnderline;\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"Get font underline %s\" %cc_Get_Attribute_details;\r\n      if attrib_type in cc_Get_Attribute_details:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of font underline are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of font underline are not same --\";\r\n        print \"FAILURE:with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: font underline attribute is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";	\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");				','ALLOCATED','This test script is used to Set and get the  closed caption attribute of font underline.\r\nTest Case ID : CT_ClosedCaption_10					',NULL,1,'				','\0'),(377,163,'CC_SetGet_Attribute_WinBorderColor_13',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_WinBorderColor_13\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n\r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";	  \r\n    \r\n    #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (Win Border color) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    iterator = [\'000000\', \'FFFFFF\', \'FF0000\', \'00FF00\', \'0000FF\', \'FFFF00\', \'FF00FF\', \'00FFFF\'];\r\n    categories = \"color\";\r\n    attrib_type = 1024; # To set Win Border color\r\n    border_type = 2;\r\n    cc_type = 0  #Digital / Analog\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", border_type);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\";			\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %border_type;\r\n    print \"Set win  border color %s\" %iterator[border_type];\r\n    \r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"get win border color %s\" %cc_Get_Attribute_details;\r\n      retattribute=cc_Get_Attribute_details.upper();\r\n      print \"returened attirbute =%s\" %retattribute;\r\n      for cc_Get_Attribute_details in iterator:\r\n        if iterator[border_type] in retattribute:\r\n          flag = 0;           \r\n        else:\r\n          flag =1;\r\n      if flag == 0:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of window border color are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of window border color are not same --\";\r\n        print \"FAILURE: with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: window border color attribute is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");				','ALLOCATED','This test script is used to Set and get the  closed caption attribute of window border color.\r\nTest Case ID :CT_ClosedCaption_13					',NULL,1,'				','\0'),(378,104,'CC_SetGet_Attribute_BorderType_11',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_BorderType_11\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";		  \r\n    #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (Border type) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"type\";\r\n    attrib_type = 256; # To set Border type\r\n    border_type = 4;#\"0x0000ff\"; # Blue\r\n    cctype = 0  #Digital / Analog\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", border_type);\r\n    tdkTestObj.addParameter(\"ccType\", cctype);\r\n				\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\";			\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %border_type ;\r\n    print \"Set border type %s\" %border_type;\r\n  \r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"Get border type %s\" %cc_Get_Attribute_details;\r\n      if attrib_type in cc_Get_Attribute_details:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of border type are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of border type are not same --\";\r\n        print \"FAILURE: with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: border type attribute is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get the  closed caption attribute of border type (window border type.\r\nTest Case ID : CT_ClosedCaption_11					',NULL,1,'				','\0'),(379,173,'CC_SetGet_Attribute_BorderColor_12',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_BorderColor_12\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";		  \r\n    #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (Border color) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    iterator = [\'000000\', \'FFFFFF\', \'FF0000\', \'00FF00\', \'0000FF\', \'FFFF00\', \'FF00FF\', \'00FFFF\'];\r\n    categories = \"color\";\r\n    attrib_type = 512; # To set Border color\r\n    border_color = 2; #\"0x0000ff\"; # Blue\r\n    cc_type = 0  #Digital / Analog\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", border_color);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n				\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print\"cc_Get_Attribute_details = %s\"%cc_Get_Attribute_details;\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" % border_color;\r\n    print \"Set border color %s\" %iterator[border_color];\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"Get border color %s\" %cc_Get_Attribute_details;\r\n      retattribute=cc_Get_Attribute_details.upper();\r\n      print \"returned attirbute =%s\" %retattribute;\r\n      for cc_Get_Attribute_details in iterator:\r\n        if iterator[border_color] in retattribute:\r\n          flag = 0;             \r\n        else:\r\n          flag =1;\r\n         \r\n      if flag == 0:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of Border color are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of Border color are not same --\";\r\n        print \"FAILURE: Border color attribute is not set with %s\" %tdkTestObj.getResultDetails();\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: Border color attribute is not set with %s\" %tdkTestObj.getResultDetails();\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get the  closed caption attribute of border color (border color).\r\nTest Case ID :CT_ClosedCaption_12			',NULL,1,'				','\0'),(380,71,'CC_SetGet_Attribute_WinOpacity_14',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_WinOpacity_14\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n    iterator = [\'000000\', \'ffffff\', \'FF0000\', \'00FF00\', \'0000FF\', \'FFFF00\', \'FF00FF\', \'00FFFF\'];		  \r\n    #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (Win Opacity) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"Opacity\";\r\n    attrib_type = 2048; # To set Win Opacity\r\n    win_opacity = 3;#\"0x0000ff\"; # Blue\r\n    cc_type = 0  #Digital / Analog\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", win_opacity);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %win_opacity ;\r\n    print \"Set window opacity%s\" %win_opacity;\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"get window opacity %s\" %cc_Get_Attribute_details;\r\n      for cc_Get_Attribute_details in iterator:\r\n        if cc_Get_Attribute_details:\r\n          flag = 0;               \r\n        else:\r\n          flag =1;\r\n      if flag == 0:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of window opacity are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of window opacity are not same --\";\r\n        print \"FAILURE:with %s\" %tdkTestObj.details(\"details\");\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: window opacity attribute is not set with %s\" %tdkTestObj.details(\"details\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get the  closed caption attribute of window opacity .\r\nTest Case ID :CT_ClosedCaption_14					',NULL,1,'				','\0'),(381,84,'CC_SetGet_Attribute_EdgeType_15',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_EdgeType_15\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n\r\n  #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (Edge Type) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"type\";\r\n    attrib_type = 4096; # To set Edge Type\r\n    edge_type = 1; #\"0x0000ff\"; # Blue\r\n    cc_type = 0  #Digital / Analog\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", edge_type);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n				\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    edge_type_value = \"%s\" %edge_type ;\r\n    print \"attrib_type %s\" %edge_type_value;\r\n    print \"Set edge type %s\" %edge_type_value;\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"get edge type %s\" %cc_Get_Attribute_details;\r\n      if edge_type_value in cc_Get_Attribute_details:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of edge type are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of edge type are not same --\";\r\n        print \"FAILURE: with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: edge type attribute is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get the  closed caption attribute of font edge type.\r\nTest Case ID :CT_ClosedCaption_15				',NULL,1,'				','\0'),(382,93,'CC_SetGet_Attribute_EdgeColor_16',194,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Attribute_EdgeColor_16\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \" cc_Init_actualresult  :%s\" % cc_Init_actualresult;\r\n\r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n    iterator = [\'000000\', \'FFFFFF\', \'FF0000\', \'00FF00\', \'0000FF\', \'FFFF00\', \'FF00FF\', \'00FFFF\'];		  \r\n    #calling closed caption API \"CC_SetGetAttribute\" to set the attribute (Edge Color) of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGetAttribute\');\r\n    categories = \"color\";\r\n    attrib_type = 8192; # To set Edge Color\r\n    edge_color = 2;\r\n    cc_type = 0  #Digital / Analog\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"Categories\", categories);\r\n    tdkTestObj.addParameter(\"ccAttribute\", attrib_type);\r\n    tdkTestObj.addParameter(\"value\", edge_color);\r\n    tdkTestObj.addParameter(\"ccType\", cc_type);\r\n				\r\n    #Execute the test case in STB\r\n    cc_Set_Attribute_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_Set_Attribute_expectedresult);\r\n    cc_Set_Attribute_actualresult = tdkTestObj.getResult();\r\n    cc_Get_Attribute_details = tdkTestObj.getResultDetails();\r\n    print \"cc_Set_Attribute_actualresult :%s\" %cc_Set_Attribute_actualresult;\r\n    attrib_type = \"%s\" %edge_color ;\r\n    print \"Set edge color %s\" %iterator[edge_color];\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_Set_Attribute_expectedresult in cc_Set_Attribute_actualresult:\r\n      print \"get edge color %s\" %cc_Get_Attribute_details;\r\n      retattribute=cc_Get_Attribute_details.upper();\r\n      print \"returned attirbute =%s\" %retattribute\r\n      for cc_Get_Attribute_details in iterator:\r\n       if iterator[edge_color] in retattribute:\r\n         flag = 0;                    \r\n       else:\r\n         flag =1;\r\n      if flag == 0:    \r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of edge color are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of edge color are not same --\";\r\n        print \"FAILURE: with %s\" %tdkTestObj.getResultDetails();\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: edge color attribute is not set with %s\" %tdkTestObj.getValueDetails();\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get the  closed caption attribute of font edge color.\r\nTest Case ID :CT_ClosedCaption_16					',NULL,1,'				','\0'),(383,134,'yajl_Test',53,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"opensourcetestsuite\",\"1.3\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Yajl_execution\');\r\n\r\n#Get the result of connection with test component and DUT\r\nresult =obj.getLoadModuleResult();\r\nif \"Success\" in result:\r\n  print \"Opensource test module successfully loaded\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'OpenSource_Comp_Test\');\r\n\r\n  # Configuring the test object for yajl test suites execution\r\n  tdkTestObj.addParameter(\"Opensource_component_type\",\"yajl\");\r\n\r\n  #Execute the test case in STB\r\n  expectedresult=\"Test Suite Executed\"\r\n  tdkTestObj.executeTestCase(expectedresult);\r\n\r\n #Get the result of execution\r\n  actualresult = tdkTestObj.getResult();\r\n  print \"Yajl Test Result : %s\" %actualresult;\r\n  \r\n  #To Validate the Execution of Test Suites \r\n  details = tdkTestObj.getResultDetails();\r\n  if \"successful\" in details:\r\n    print \"Yajl status details : %s\" %details;\r\n    details=list(details.split(\" \"))\r\n    details=list(details[0].split(\"/\"))\r\n    if details[0]==details[1] in details and expectedresult in actualresult :\r\n       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n    else:\r\n       tdkTestObj.setResultStatus(\"FAILURE\");\r\n     \r\n    #Get the log path of the Yajl Testsuite\r\n    logpath =tdkTestObj.getLogPath();\r\n    if \"log_yajl\" in logpath:\r\n       print \"Log Path :%s\"%logpath;\r\n       #Transferring the Yajl Testsuite Logs\r\n       tdkTestObj.transferLogs( logpath, \"false\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n  else :\r\n     print \" Yajl status details:%s\" %details;\r\n     print \"Proper Execution details are not received due to error in execution \";\r\n     tdkTestObj.setResultStatus(\"FAILURE\");\r\n	 \r\n  #Unloading the opensource test suite module\r\n  obj.unloadModule(\"opensourcetestsuite\");\r\n\r\nelse:\r\n  print \"Failed to load Opensource test module\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','				',NULL,30,'				','\0'),(384,47,'CC_SetGet_DigitalChannel_17',195,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_DigitalChannel_17\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \"cc_Init_actualresult :%s\" %cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n    #calling closed caption API CC_SetGetDigitalChannel to set the attribute  of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGet_DigitalChannel\');\r\n    channel_num = 2; # 1 - 63 \r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"channel_num\", channel_num);\r\n    				\r\n    #Execute the test case in STB\r\n    cc_DigitalChannel_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_DigitalChannel_expectedresult);\r\n    cc_DigitalChannel_actualresult = tdkTestObj.getResult();\r\n    cc_DigitalChannel_details = tdkTestObj.getResultDetails();\r\n    print \"cc_DigitalChannel_actualresult :%s\" %cc_DigitalChannel_actualresult;\r\n    channel_num = \"%s\" %channel_num ;\r\n    print \"channel_num %s\" %channel_num;\r\n    print \"Set digital channel number %s\" %channel_num;\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_DigitalChannel_expectedresult in cc_DigitalChannel_actualresult:\r\n      print \"Get digital channel number %s\" %cc_DigitalChannel_details;\r\n      if channel_num in cc_DigitalChannel_details:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of digital channel number are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of digital channel number are not same --\";\r\n        print \"FAILURE:with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: Digtial channel number is not set with %s\" %tdkTestObj.getValue(\"details\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get digital channel number.\r\nTest Case ID :CT_ClosedCaption_17					',NULL,1,'				','\0'),(385,75,'CC_SetGet_InvalidDigitalChannel_18',195,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_InvalidDigitalChannel_18\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \"cc_Init_actualresult :%s\" %cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n    #calling closed caption API CC_SetGetDigitalChannel to set the attribute  of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGet_DigitalChannel\');\r\n    channel_num = 66;  # 0 - 63 \r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"channel_num\", channel_num);\r\n    				\r\n    #Execute the test case in STB\r\n    cc_DigitalChannel_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_DigitalChannel_expectedresult);\r\n    cc_DigitalChannel_actualresult = tdkTestObj.getResult();\r\n    cc_DigitalChannel_details = tdkTestObj.getResultDetails();\r\n    print \"cc_DigitalChannel_actualresult :%s\" %cc_DigitalChannel_actualresult;\r\n    channel_num = \"%s\" %channel_num ;\r\n    print \"Set digital number %s\" %channel_num;\r\n    #print \"details...%s :\" %tdkTestObj.getValue(\"details\");\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_DigitalChannel_expectedresult in cc_DigitalChannel_actualresult:\r\n      print \"get digital channel number %s\" %cc_DigitalChannel_details;\r\n      if channel_num in cc_DigitalChannel_details:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of digital channel number are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of digital channel number are not same --\";\r\n        print \"SUCCESS:with %s\" %tdkTestObj.getResultDetails();\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n      print \"SUCCESS: Digtial channel number is not set with %s\" %tdkTestObj.getResultDetails();\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %cc_DigitalChannel_details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n\r\n  #Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");					','ALLOCATED','This test script is used to Set and get digital channel number.\r\nTest Case ID :CT_ClosedCaption_18				',NULL,1,'				','\0'),(386,84,'CC_SetGet_AnalogChannel_19',196,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_AnalogChannel_19\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \"cc_Init_actualresult :%s\" %cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n  #calling closed caption API CC_SetGetAnalogChannel to set the analog channel number of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGet_AnalogChannel\');	\r\n    analog_channel_num =7; # 0 - 8\r\n    expectedres1=\"1006\" 					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"analog_channel_num\", analog_channel_num);\r\n    				\r\n    #Execute the test case in STB\r\n    cc_AnalogChannel_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_AnalogChannel_expectedresult);\r\n    cc_AnalogChannel_actualresult = tdkTestObj.getResult();\r\n    cc_AnalogChannel_details = tdkTestObj.getResultDetails();\r\n    print \"cc_AnalogChannel_actualresult :%s\" %cc_AnalogChannel_actualresult;\r\n    analog_channel_num = \"%s\" %analog_channel_num ;\r\n    print \"Set analog_channel_num %s\" %analog_channel_num;\r\n\r\n    #Check for SUCCESS return value of closed capiton set attribute\r\n    if cc_AnalogChannel_expectedresult in cc_AnalogChannel_actualresult:\r\n      print \"Get font opacity %s\" %cc_AnalogChannel_details;\r\n      if expectedres1 in cc_AnalogChannel_details:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"-- Get and set values of font opacity are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of font opacity are not same --\";\r\n        print \"FAILURE: with %s\" %tdkTestObj.getResultDetails();\r\n\r\n    else:\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n      print \"FAILURE: font opacity attribute is not set with %s\" %tdkTestObj.getResultDetails();\r\n    \r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n  \r\n#Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script is used to Set and get analog channel number.\r\nTest Case ID : CT_ClosedCaption_19		',NULL,1,'				','\0'),(387,103,'CC_SetGet_Invalid_AnalogChannel_20',196,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"cc\",\"1.3\");\r\n\r\n#Ip address of the selected STB for testing\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CC_SetGet_Invalid_AnalogChannel_20\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Closed caption module loading status :  %s\" %loadmodulestatus;\r\n\r\nif \"Success\" in loadmodulestatus:\r\n  print \"Closed caption module loaded successfully\";\r\n  #Set the module loading status\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  \r\n  #calling Closed Caption API \"CC_Initialization\"\r\n  tdkTestObj = obj.createTestStep(\'CC_Initialization\');\r\n  cc_Init_expectedresult=\"SUCCESS\"\r\n  \r\n  tdkTestObj.executeTestCase(cc_Init_expectedresult);\r\n  cc_Init_actualresult = tdkTestObj.getResult();\r\n  details=tdkTestObj.getResultDetails();\r\n  print \"cc_Init_actualresult :%s\" %cc_Init_actualresult;\r\n  \r\n  #Check for SUCCESS/FAILURE return value of CC_Initialization\r\n  if \"SUCCESS\" in loadmodulestatus.upper():\r\n    print \"SUCCESS: Application successfully initialized with Closed Caption\";\r\n		  \r\n    #calling closed caption API CC_SetGetAnalogChannel to set the analog channel number of the closed caption\r\n    tdkTestObj = obj.createTestStep(\'CC_SetGet_AnalogChannel\');\r\n    analog_channel_num = 10; # 1 - 8\r\n					\r\n    #Configuring the test object for starting test execution\r\n    tdkTestObj.addParameter(\"analog_channel_num\", analog_channel_num);\r\n    				\r\n    #Execute the test case in STB\r\n    cc_AnalogChannel_expectedresult=\"SUCCESS\"\r\n				\r\n    tdkTestObj.executeTestCase(cc_AnalogChannel_expectedresult);\r\n    cc_AnalogChannel_actualresult = tdkTestObj.getResult();\r\n    cc_AnalogChannel_details = tdkTestObj.getResultDetails();\r\n    print \"cc_AnalogChannel_actualresult :%s\" %cc_AnalogChannel_actualresult;\r\n    analog_channel_num = \"%s\" %analog_channel_num ;\r\n    print \"Set analog_channel_num %s\" %analog_channel_num;\r\n\r\n    #Check for SUCCESS/FAILURE return value of closed capiton set attribute\r\n    if cc_AnalogChannel_expectedresult in cc_AnalogChannel_actualresult:\r\n      print \"Get analog channel number %s\" %cc_AnalogChannel_details;\r\n      if analog_channel_num in cc_AnalogChannel_details:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"-- Get and set values of analog channel number are same --\";\r\n      else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"--SUCCESS: Get and set values of analog channel number are not same --\";\r\n        print \"SUCCESS: with %s\" %tdkTestObj.getResultDetails();\r\n    else:\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n      print \"SUCCESS: Analog channel number is not set with %s\" %tdkTestObj.getResultDetails();\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    print \"FAILURE: In Initializing closed caption with %s \" %cc_AnalogChannel_details;   \r\n    print \"Initialization result of closed caption : %s\" %cc_Init_actualresult;\r\n  \r\n#Unload the cc module\r\n  obj.unloadModule(\"cc\");\r\n\r\nelse:\r\n        print\"Load module failed\";	\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");				','ALLOCATED','This test script is used to Set and get analog channel number.\r\nTest Case ID : CT_ClosedCaption_20			',NULL,1,'				','\0'),(388,79,'SM_GetGlobal Service Negative test',133,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_7\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        serviceName=\"deviceSettingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n                print \"Registered Service:%s\" %serviceName;\r\n                #calling GetGloabalService API\r\n                tdkTestObj = obj.createTestStep(\'SM_GetGlobalService\');\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult= tdkTestObj.getResult();\r\n                #serviceDetail =tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of SM_GetGlobalService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Service already deregistered, can not executes getGlobalService API\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Service instance got successfully after deregsitering service\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check the negative scenario of the API ie getting the instance of the service after dergistrating service. Test Case ID:CT_SM_7. Note:This script is failed at random and also this will cause other scripts to fail.',NULL,2,'				','\0'),(389,47,'SM_DoesServiceExist Negative test',107,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_4\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        service_name = \"deviceSettingService\"\r\n        tdkTestObj.addParameter(\"service_name\",service_name);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                #calling unregister service API\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",service_name);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n                print \"Registered Service:%s\" %service_name;\r\n                tdkTestObj = obj.createTestStep(\'SM_DoesServiceExist\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",service_name);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #existdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of SM_DoesServiceExist\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS: Application succesfully executes doesServiceExist API\";\r\n                        existdetails = tdkTestObj.getResultDetails();\r\n                        if \"NOT EXIST\" in existdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS:service already deregistered from SM\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:service exist after deRegistering services\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Application Failed to execute doesServiceExist API\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will test the negative scenario of the SM API, ie checking the existence of the service after deregistering the service. Test case ID:CT_SM_4				',NULL,2,'				','\0'),(396,106,'test_newrmf_play',207,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"rdk2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'test_newrmf_play\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n#Prmitive test case which associated to this Script\r\ntdkTestObj = obj.createTestStep(\'Test_newrmf_play\');\r\nplay_exceptedresult=\"SUCCESS\";\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase(\"play_exceptedresult\");\r\n\r\n\r\ntdkTestObj.executeTestCase(play_expectedresult);\r\ncc_Init_actualresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nprint \"play_actualresult  :%s\" %play_actualresult; \r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n\r\n#Set the result status of execution\r\ntdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\nobj.unloadModule(\"mediaframework\");','FREE','				',NULL,5,'','\0'),(412,43,'IARMBUS_DummyEvt_Persistent_test',22,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\nimport re\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'dummy\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARM-Bus Daemon\";\r\n                        i=0;\r\n                        for i in range(0,200):\r\n                                print \"****************%d\" %i;\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                tdkTestObj.addParameter(\"appname\",\"Test_Event_Mgr\");\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                #details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_InvokeSecondApplication\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Second application Invoked successfully\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Second application failed to execute\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Event Handler registered for Event-X\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",1);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Event Handler registered for Event-Y\";\r\n                                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",2);\r\n                                                expectedresult=\"SUCCESS\"\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS: Event Handler registered for Event-Z\";\r\n                                                        time.sleep(1.2);\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                        expectedresult=\"SUCCESS\"\r\n                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                        actualresult = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        print details;\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_GetLastReceivedEventDetails\r\n                                                        if \"SUCCESS\" in expectedresult:\r\n                                                                print \"SUCCESS: GetLastReceivedEventDetails executed Successfully\"\r\n                                                                line = details;\r\n                                                                matchObj = re.match( r\'(.*)X(.*)Y(.*)Z.*\',line)\r\n                                                                if matchObj:\r\n                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                        print \"SUCCESS: All events are received successfully in order\";\r\n                                                                else:\r\n                                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                        print \"FAILURE: Events are not received in order\";\r\n                                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                                        #deregistering event handler for event-X\r\n                                                                        tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                                                        expectedresult=\"SUCCESS\"\r\n                                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                                        actualresult = tdkTestObj.getResult();\r\n                                                                        details=tdkTestObj.getResultDetails();\r\n                                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                                        if expectedresult in actualresult:\r\n                                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                print \"SUCCESS: UnRegister Event Handler for Event-X\";\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                                print \"FAILURE : IARM_Bus_UnRegisterEventHanlder failed. %s \" %details;\r\n                                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                                        #deregistering event handler for event-Y\r\n                                                                        tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                                                        tdkTestObj.addParameter(\"event_id\",1);\r\n                                                                        expectedresult=\"SUCCESS\"\r\n                                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                                        actualresult = tdkTestObj.getResult();\r\n                                                                        details=tdkTestObj.getResultDetails();\r\n                                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                                        if expectedresult in actualresult:\r\n                                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                print \"SUCCESS: UnRegister Event Handler for Event-Y\";\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                                print \"FAILURE : IARM_Bus_UnRegisterEventHanlder failed. %s \" %details;\r\n                                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                                        #deregistering event handler for event-Z\r\n                                                                        tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                                                        tdkTestObj.addParameter(\"event_id\",2);\r\n                                                                        expectedresult=\"SUCCESS\"\r\n                                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                                        actualresult = tdkTestObj.getResult();\r\n                                                                        details=tdkTestObj.getResultDetails();\r\n                                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                                        if expectedresult in actualresult:\r\n                                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                print \"SUCCESS: UnRegister Event Handler Event-Z\";\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                                print \"FAILURE : IARM_Bus_UnRegisterEventHanlder failed. %s \" %details;\r\n\r\n                                                                        break;\r\n\r\n                                                        else:\r\n                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                print \"FAILURE: GetLastReceivedEventDetails failed and all the events are not received\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                        #deregistering event handler for event-X\r\n                                                        tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                                        expectedresult=\"SUCCESS\"\r\n                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                        actualresult = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                        if expectedresult in actualresult:\r\n                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                print \"SUCCESS: UnRegister Event Handler for Event-X\";\r\n                                                        else:\r\n                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                print \"FAILURE : IARM_Bus_UnRegisterEventHanlder failed. %s \" %details;\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                        #deregistering event handler for event-Y\r\n                                                        tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                                        tdkTestObj.addParameter(\"event_id\",1);\r\n                                                        expectedresult=\"SUCCESS\"\r\n                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                        actualresult = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                        if expectedresult in actualresult:\r\n                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                print \"SUCCESS: UnRegister Event Handler for Event-Y\";\r\n                                                        else:\r\n                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                print \"FAILURE : IARM_Bus_UnRegisterEventHanlder failed. %s \" %details;\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                        #deregistering event handler for event-Z\r\n                                                        tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                                        tdkTestObj.addParameter(\"event_id\",2);\r\n                                                        expectedresult=\"SUCCESS\"\r\n                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                        actualresult = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                        if expectedresult in actualresult:\r\n                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                print \"SUCCESS: UnRegister Event Handler Event-Z\";\r\n                                                        else:\r\n                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                print \"FAILURE : IARM_Bus_UnRegisterEventHanlder failed. %s \" %details;\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE : IARM_Bus_RegisterEventHandler failed. %s \" %details;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE : IARM_Bus_RegisterEventHandler failed. %s \" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE : IARM_Bus_RegisterEventHandler failed. %s \" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script tests the successful broadcast and receiving of Dummy Event for \'x\' times\r\nTest Case ID : CT_IARMBUS_42	',NULL,15,'				','\0'),(417,147,'IARMBUS_DummyCall_Persistent_test',8,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'Dummy\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARM_Bus_Init API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARM_Bus_Connect API\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        i=0\r\n                        for i in range(0,100):\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                tdkTestObj.addParameter(\"appname\",\"Test_Event_Mgr\");\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                #details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_InvokeSecondApplication\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Second application Invoked successfully\";\r\n                                        #calling two dummy RPC using IARM_Bus_Call API\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                        tdkTestObj.addParameter(\"method_name\",\"DummyAPI0\");\r\n                                        api_0_Data=1;\r\n                                        tdkTestObj.addParameter(\"testapp_API0_data\",api_0_Data);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        print details;\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                        if expectedresult in actualresult:\r\n                                                print \"SUCCESS: Application invokes RPC-DummyAPI0 successfully\";\r\n                                                dataCompare=\"%s\" %(api_0_Data+10000000);\r\n                                                if dataCompare in details:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS: Both data are same\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: Both data are not same\";\r\n                                                        break;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_Call failed. %s\" %details;\r\n\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"DummyTestMgr\");\r\n                                        tdkTestObj.addParameter(\"method_name\",\"DummyAPI1\");\r\n                                        api_1_Data=3;\r\n                                        tdkTestObj.addParameter(\"testapp_API1_data\",api_1_Data);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        print details;\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_BusCall\r\n                                        if expectedresult in actualresult:\r\n                                                print \"SUCCESS: Application invokes an RPC-DummyAPI1 successfully\";\r\n                                                dataCompare=\"%s\" %(api_1_Data+10000000);\r\n                                                if dataCompare in details:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS: Both data are same\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: Both data are not same\";\r\n                                                        break;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_Call failed. %s\" %details;\r\n                                        time.sleep(1);\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Second application failed to execute\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #caling IARM_Bus_DisConnect API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script tests the successful Dummy RPC calls for \'x\' times\r\nTest Case ID : CT_IARMBUS_41',NULL,15,'				','\0'),(424,42,'RMF_MPSink_SetGetMute_03',241,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_MPSinkSetGetMute_03\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaframework module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'RMF_MPSink_SetGetMute\');\r\n        #Execute the test case in STB\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        #details = tdkTestObj.getResultDetails();\r\n        print \"MPSink Mute and UnMute : %s\" %actualresult;\r\n        #compare the actual result with expected result\r\n        if expectedresult in actualresult:\r\n                #Set the result status of execution\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"MPSink enabled and disabled Mute Successfully\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                #print \"Failure secnario : %s\" %details;\r\n                print \"Failed to enabled and disabled Mute in MPSink\";\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Failed to load mediaframework module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','These Script tests the RDK Mediaframework MPSink element to Set and get Mute.\r\nTest Case ID: CT_RMF_MPSink_03.				',NULL,3,'				','\0'),(426,56,'RMF_MPSink_GetMediaTime_05',495,'import tdklib;\r\nsrc_element=[\"MPSink\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_MPSink_GetMediaTime_05\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework MPSink element to get mediatime\r\nTest Case ID: CT_RMF_MPSink_05.					',NULL,1,'				','\0'),(427,55,'RMF_HNSrc_InitTerm_01',494,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSRC_INIT_TERM_01\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    for item in range(len(parametername)):\r\n        print \"item:  %s\" %parametername[item];\r\n        print \"item:  %s\" %parametervalue[item];\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Init status:  %s\" %result;\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        print \"RMF_Element_Init status:  %s\" %result;\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to Initialize and terminate.\r\nTest Case ID: CT_RMF_HNSource_01.	',NULL,3,'				','\0'),(430,48,'RMF_HNSrc_GetBufferedRanges_04',247,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_GetBufferedRanges_04\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaframework module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"Mediaframework module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'RMF_HNSrc_GetBufferedRanges\');\r\n        #Execute the test case in STB\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        print \"Result of HNSrc Get buffer range : %s\" %actualresult;\r\n        #compare the actual result with expected result\r\n        if expectedresult in actualresult:\r\n                #Set the result status of execution\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"HNSrc Get buffer range is Success\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Failure secnario : %s\" %details;\r\n                print \"Failed to Get buffer range of HNSrc\";\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Failed to load mediaframework module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to Get the range of buffer.\r\nTest Case ID: CT_RMF_HNSrc_05.					',NULL,1,'RDKTT-34			',''),(431,52,'RMF_HNSrc_GetState_05',495,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\n\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSRC_GetState_05\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");			','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to Get the state of RMF.\r\nTest Case ID: CT_RMF_HNSrc_05.				',NULL,3,'				','\0'),(433,51,'RMF_MPSink_InitTerm_01',495,'import tdklib;\r\nsrc_element=[\"MPSink\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_MPSink_InitTerm_01\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n			','ALLOCATED','These Script tests the RDK Mediaframework MPSink element to Initialize and terminate.\r\nTest Case ID: CT_RMF_MPSink_01.	',NULL,1,'				','\0'),(452,31,'RMF_MPSink_SetVideoRectangle_02',495,'import tdklib;\r\nsrc_element=[\"MPSink\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_MPSink_SetVideoRectangle_02\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                if Expected_Result in result.upper():\r\n                         result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n				','ALLOCATED','These Script tests the RDK Mediaframework to set video rectangle on mpsink element. Test Case ID: CT_RMF_MPSink_22.	',NULL,3,'				','\0'),(453,33,'RMF_MPSink_SetGetVolume_04',279,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_MPSink_SetGetVolume_04\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaframework module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"Mediaframework module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'RMF_MPSink_SetGetVolume\');\r\n        #Execute the test case in STB\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        #details = tdkTestObj.getResultDetails();\r\n        print \"MPSink initialized and Terminated : %s\" %actualresult;\r\n        #compare the actual result with expected result\r\n        if expectedresult in actualresult:\r\n                #Set the result status of execution\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"MPSink Volume setted Successfully\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                #print \"Failure secnario : %s\" %details;\r\n                print \"Failed to do volume setting MPSink\";\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n\r\n        print \"Failed to load mediaframework module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework MPSink element to Set and get Volume.\r\nTest Case ID: CT_RMF_MPSink_04				',NULL,3,'				','\0'),(460,34,'RMF_HNSrcMPSink_Video_State_05',288,'#use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSrcMPSink_Video_State_05\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaframework module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"Mediaframework module loaded successfully\";\r\n	#Prmitive test case which associated to this Script\r\n	tdkTestObj = obj.createTestStep(\'RMF_HNSrcMPSink_Video_State\');\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\'); \r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"playuri\",url);\r\n	#Execute the test case in STB\r\n	expectedresult=\"SUCCESS\";\r\n	tdkTestObj.executeTestCase(expectedresult);\r\n	#Get the result of execution\r\n	actualresult = tdkTestObj.getResult();\r\n	\r\n	print \"Get State of Video using HNSrc MPSink Pipeline : %s\" %actualresult;\r\n	#compare the actual result with expected result\r\n	if expectedresult in actualresult:\r\n		#Set the result status of execution\r\n		tdkTestObj.setResultStatus(\"SUCCESS\");\r\n		print \"get State of Video using HNSrc MPSink Pipeline is success\";\r\n	else:\r\n		tdkTestObj.setResultStatus(\"FAILURE\");\r\n                details = tdkTestObj.getResultDetails();\r\n		print \"Failure secnario : %s\" %details;\r\n		\r\n	#unloading mediastreamer module\r\n	obj.unloadModule(\"mediaframework\");\r\nelse:\r\n	print \"Failed to load mediaframework module\";\r\n	obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework to get state of video in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrcMPSink_05.				',NULL,3,'				','\0'),(461,46,'RMF_HNSrcMPSink_Video_MuteUnmute_06',287,'#use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSrcMPSink_Video_MuteUnmute_06\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaframework module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"Mediaframework module loaded successfully\";\r\n	#Prmitive test case which associated to this Script\r\n	tdkTestObj = obj.createTestStep(\'RMF_HNSrcMPSink_Video_MuteUnmute\');\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');       \r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"playuri\",url);\r\n	#Execute the test case in STB\r\n	expectedresult=\"SUCCESS\";\r\n	tdkTestObj.executeTestCase(expectedresult);\r\n	#Get the result of execution\r\n	actualresult = tdkTestObj.getResult();\r\n	\r\n	print \"Video Mute using HNSrc MPSink Pipeline : %s\" %actualresult;\r\n	#compare the actual result with expected result\r\n	if expectedresult in actualresult:\r\n		#Set the result status of execution\r\n		tdkTestObj.setResultStatus(\"SUCCESS\");\r\n		print \"Video Mute using HNSrc MPSink Pipeline is success\";\r\n	else:\r\n		tdkTestObj.setResultStatus(\"FAILURE\");\r\n                details = tdkTestObj.getResultDetails();\r\n		print \"Failure secnario : %s\" %details;\r\n		\r\n	#unloading mediastreamer module\r\n	obj.unloadModule(\"mediaframework\");\r\nelse:\r\n	print \"Failed to load mediaframework module\";\r\n	obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework to enable mute and unmute in video in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_06.				',NULL,1,'				','\0'),(462,29,'RMF_HNSrcMPSink_Video_Volume_07',289,'#use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSrcMPSink_Video_Volume_07\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaframework module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"Mediaframework module loaded successfully\";\r\n	#Prmitive test case which associated to this Script\r\n	tdkTestObj = obj.createTestStep(\'RMF_HNSrcMPSink_Video_Volume\');\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\'); \r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"playuri\",url);\r\n	#Execute the test case in STB\r\n	expectedresult=\"SUCCESS\";\r\n	tdkTestObj.executeTestCase(expectedresult);\r\n	#Get the result of execution\r\n	actualresult = tdkTestObj.getResult();\r\n	\r\n	print \"Setting Volume in Video using HNSrc MPSink Pipeline : %s\" %actualresult;\r\n	#compare the actual result with expected result\r\n	if expectedresult in actualresult:\r\n		#Set the result status of execution\r\n		tdkTestObj.setResultStatus(\"SUCCESS\");\r\n		print \"Setting Volume in Video using HNSrc MPSink Pipeline is success\";\r\n	else:\r\n		tdkTestObj.setResultStatus(\"FAILURE\");\r\n                details = tdkTestObj.getResultDetails();  \r\n		print \"Failure secnario : %s\" %details;\r\n		\r\n	#unloading mediastreamer module\r\n	obj.unloadModule(\"mediaframework\");\r\nelse:\r\n	print \"Failed to load mediaframework module\";\r\n	obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework to get and set of volume in video in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrcMPSink_07.				',NULL,3,'				','\0'),(489,63,'RMF_DVRSrcMPSink_Play_01',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_Play_01\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep != \'RMF_Element_GetState\' :\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,720,1280];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(30);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                print \"DVRSource play successful\"\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                        else:\r\n                                                                                print \"DVRSource play failed\"\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to play the recorded content.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_01.	\r\nTest Type: Positive				',NULL,5,'				','\0'),(490,35,'RMF_DVRSrcMPSink_Pause_02',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_Pause_02\');\r\n\r\nexpected_Result = \"SUCCESS\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep != \'RMF_Element_GetState\':\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,720,1280];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(30);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(result)\r\n                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                time.sleep(5);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PAUSED\" in details.upper():\r\n                                                                                                print \"DVRSource Pause successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result)\r\n                                                                                        else:\r\n                                                                                                print \"DVRSource Pause failed\"\r\n                                                                                                tdkTestObj.setResultStatus(result)\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(result)\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to pause, the playing recorded content.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_02.	\r\nTest Type: Positive		',NULL,5,'				','\0'),(491,32,'RMF_DVRSrcMPSink_Resume_03',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_Resume_03\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nplaySpeed = 0.0\r\nplayTime = 0.0\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    if teststep == \'RMF_Element_GetSpeed\':\r\n        pos = details.find(\'Speed:\');\r\n        value = details[pos:];\r\n        speed = value[6:];\r\n        print speed;\r\n        playSpeed = float(speed);\r\n\r\n    if teststep == \'RMF_Element_GetMediaTime\':\r\n        pos = details.find(\'MediaTime:\');\r\n        value = details[pos:];\r\n        mediaTime = value[10:];\r\n        print mediaTime;\r\n        playTime = float(mediaTime);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result;\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,1280,720];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                time.sleep(30);\r\n                                                                time.sleep(30);\r\n                                                                if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                        tdkTestObj.setResultStatus(result)\r\n                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        time.sleep(5);\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                if expected_Result in result.upper() and \"PAUSED\" in details.upper():\r\n                                                                                                        tdkTestObj.setResultStatus(result)\r\n                                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        if expected_Result in result.upper():\r\n                                                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                                if expected_Result in result.upper():\r\n                                                                                                                        src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"];\r\n                                                                                                                        src_element=[\"DVRSrc\",1,playSpeed,playTime];\r\n                                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                                        time.sleep(10);\r\n\r\n                                                                                                                        if expected_Result in result.upper():\r\n                                                                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                                                if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                                                        tdkTestObj.setResultStatus(result)\r\n                                                                                                                                        print \"DVRSource resume and play successful\"\r\n                                                                                                                                else:\r\n                                                                                                                                        tdkTestObj.setResultStatus(result)\r\n                                                                                                                                        print \"DVRSource resume and play failed\"\r\n\r\n                                                                                                else:\r\n                                                                                                        tdkTestObj.setResultStatus(result)\r\n                                                                                else:\r\n                                                                                        tdkTestObj.setResultStatus(result)\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to resume back to the normal speed after pausing.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_03.	\r\nTest Type: Positive		',NULL,5,'				','\0'),(492,34,'RMF_DVRSrcMPSink_BackToBeg_04',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_BackToBeg_04\');\r\n\r\nexpected_Failure=\"FAILURE\"\r\nexpected_Result=\"SUCCESS\"\r\ncurrentTime = 0.0\r\npTime = 0.0\r\nplayTime = 0.0\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep != \'RMF_Element_GetState\' and teststep != \'RMF_Element_GetMediaTime\':\r\n            tdkTestObj.setResultStatus(result);\r\n\r\n    if teststep == \'RMF_Element_GetMediaTime\':\r\n        pos = details.find(\'MediaTime:\');\r\n        value = details[pos:];\r\n        mediaTime = value[10:];\r\n        print mediaTime;\r\n        playTime = float(mediaTime);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,1280,720];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(30);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                currentTime = playTime;\r\n                                                                                print \"CurrentTime:\",currentTime\r\n\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfElement\",\"mediaTime\"];\r\n                                                                                        src_element=[\"DVRSrc\",0.00];\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                pTime = playTime;\r\n                                                                                                print \"Present Time:\",pTime\r\n                                                                                                time.sleep(20);\r\n                                                                                                if pTime <= currentTime:\r\n                                                                                                        print \"DVRSource skiping back to the begining Successful\";\r\n                                                                                                        tdkTestObj.setResultStatus(result);\r\n                                                                                                else:\r\n                                                                                                        print \"DVRSource skiping back to the begining Failed\";\r\n                                                                                                        tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to skip back to the begining of the play .\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_04.	\r\nTest Type: Positive			',NULL,5,'				','\0'),(495,38,'RMF_DVRSrcMPSink_SkipNumOfSeconds_SkipBack_06',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_SkipNumOfSeconds_SkipBack_06\');\r\n\r\nexpected_Failure=\"FAILURE\"\r\nexpected_Result=\"SUCCESS\"\r\nplayTime = 0.0\r\n\r\nstartTime = 0.0\r\ndurationTime = 0.0\r\n\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep != \'RMF_Element_GetState\' and teststep != \'RMF_Element_GetMediaTime\':\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    if teststep == \'RMF_Element_GetMediaTime\':\r\n        pos = details.find(\'MediaTime:\');\r\n        value = details[pos:];\r\n        mediaTime = value[10:];\r\n        print mediaTime;\r\n        global playTime\r\n        playTime = float(mediaTime);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,1280,720];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(10);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        tdkTestObj.setResultStatus(result);\r\n                                                                                        currentTime = playTime;\r\n                                                                                        print \"CurrentTime:\",currentTime\r\n                                                                                        skipNumberOfSeconds = 10.0;\r\n                                                                                        #setTime = currentTime + skipNumberOfSeconds\r\n                                                                                        #print \"setTime:\",setTime\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\",\"mediaTime\"];\r\n                                                                                                src_element=[\"DVRSrc\",currentTime - skipNumberOfSeconds];\r\n                                                                                                #src_element=[\"DVRSrc\",0.0];\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                time.sleep(5);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                                                        pTime = playTime;\r\n                                                                                                        print \"Present Time:\",pTime\r\n                                                                                                        if pTime <= currentTime:\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                                print \"DVRSource skiping back number of seconds Successful\";\r\n                                                                                                        else:\r\n                                                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                                                                print \"DVRSource skiping back number of seconds Failed\";\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to skip specified number of seconds back from the current point of play.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_06.	\r\nTest Type: Positive			',NULL,5,'				','\0'),(496,35,'RMF_DVRSrcMPSink_SkipNumOfSeconds_SkipFront_07',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_SkipNumOfSeconds_SkipFront_07\');\r\n\r\nexpected_Failure=\"FAILURE\"\r\nexpected_Result=\"SUCCESS\"\r\nplayTime = 0.0\r\n\r\nstartTime = 0.0\r\ndurationTime = 0.0\r\n\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep != \'RMF_Element_GetState\' and teststep != \'RMF_Element_GetMediaTime\':\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    if teststep == \'RMF_Element_GetMediaTime\':\r\n        pos = details.find(\'MediaTime:\');\r\n        value = details[pos:];\r\n        mediaTime = value[10:];\r\n        print mediaTime;\r\n        global playTime\r\n        playTime = float(mediaTime);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,1280,720];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(5);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        tdkTestObj.setResultStatus(result);\r\n                                                                                        currentTime = playTime;\r\n                                                                                        print \"CurrentTime:\",currentTime\r\n                                                                                        skipNumberOfSeconds = 10.0;\r\n                                                                                        #setTime = currentTime + skipNumberOfSeconds\r\n                                                                                        #print \"setTime:\",setTime\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\",\"mediaTime\"];\r\n                                                                                                src_element=[\"DVRSrc\",currentTime + skipNumberOfSeconds];\r\n                                                                                                #src_element=[\"DVRSrc\",0.0];\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                time.sleep(10);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                                                        pTime = playTime;\r\n                                                                                                        print \"Present Time:\",pTime\r\n                                                                                                        if pTime >= currentTime:\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                                print \"DVRSource skiping front number of seconds Successful\";\r\n                                                                                                        else:\r\n                                                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                                                                print \"DVRSource skiping front number of seconds Failed\";\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to skip specified number of seconds front from the current point of play.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_07.	\r\nTest Type: Positive			',NULL,5,'				','\0'),(497,33,'RMF_DVRSrcMPSink_TrickPlayRate_FR64x_11',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport time; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_TrickPlayRate_FR64x_11\');\r\n\r\nexpected_Failure=\"FAILURE\"\r\nexpected_Result=\"SUCCESS\"\r\ncurrentTime = 0.0\r\nplayTime = 0.0\r\nplaySpeed = 0.0\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\' and teststep != \'RMF_Element_GetSpeed\':\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    if teststep == \'RMF_Element_GetSpeed\':\r\n        global playSpeed\r\n        pos = details.find(\'Speed:\');\r\n        value = details[pos:];\r\n        speed = value[6:];\r\n        print speed;\r\n        playSpeed = float(speed);\r\n\r\n    if teststep == \'RMF_Element_GetMediaTime\':\r\n        global playTime\r\n        pos = details.find(\'MediaTime:\');\r\n        value = details[pos:];\r\n        mediaTime = value[10:];\r\n        print mediaTime;\r\n        playTime = float(mediaTime);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,1280,720];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(30);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                currentTime = playTime;\r\n                                                                                print \"CurrentTime:\",currentTime\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        currentSpeed = playSpeed;\r\n                                                                                        print \"CurrentSpeed:\",currentSpeed\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                trickPlay = -64.0\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"];\r\n                                                                                                src_element=[\"DVRSrc\",1,trickPlay,currentTime];\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                time.sleep(10);\r\n\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        currentSpeed = playSpeed;\r\n                                                                                                        print \"CurrentSpeed:\",currentSpeed\r\n                                                                                                        if expected_Result in result.upper():\r\n                                                                                                                if currentSpeed == trickPlay:\r\n                                                                                                                        print \"DVRSource Play trickplay Successfull\"\r\n                                                                                                                        tdkTestObj.setResultStatus(result);\r\n                                                                                                                else:\r\n                                                                                                                        print \"DVRSource Play trickplay Failed\"\r\n                                                                                                                        tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                                        else:\r\n                                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to achieve fast rewind of rate -64x.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_11.\r\nTest Type: Positive				',NULL,5,'				','\0'),(498,35,'RMF_DVRSrcMPSink_TrickPlayRate_FR4x_10',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_TrickPlayRate_FR4x_10\');\r\n\r\nexpected_Failure=\"FAILURE\"\r\nexpected_Result=\"SUCCESS\"\r\ncurrentTime = 0.0\r\nplayTime = 0.0\r\nplaySpeed = 0.0\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\' and teststep != \'RMF_Element_GetSpeed\':\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    if teststep == \'RMF_Element_GetSpeed\':\r\n        global playSpeed\r\n        pos = details.find(\'Speed:\');\r\n        value = details[pos:];\r\n        speed = value[6:];\r\n        print speed;\r\n        playSpeed = float(speed);\r\n\r\n    if teststep == \'RMF_Element_GetMediaTime\':\r\n        global playTime\r\n        pos = details.find(\'MediaTime:\');\r\n        value = details[pos:];\r\n        mediaTime = value[10:];\r\n        print mediaTime;\r\n        playTime = float(mediaTime);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,1280,720];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(30);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                currentTime = playTime;\r\n                                                                                print \"CurrentTime:\",currentTime\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        currentSpeed = playSpeed;\r\n                                                                                        print \"CurrentSpeed:\",currentSpeed\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                trickPlay = -4.0\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"];\r\n                                                                                                src_element=[\"DVRSrc\",1,trickPlay,currentTime];\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                time.sleep(10);\r\n\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        currentSpeed = playSpeed;\r\n                                                                                                        print \"CurrentSpeed:\",currentSpeed\r\n                                                                                                        if expected_Result in result.upper():\r\n                                                                                                                if currentSpeed == trickPlay:\r\n                                                                                                                        print \"DVRSource Play trickplay Successfull\"\r\n                                                                                                                        tdkTestObj.setResultStatus(result);\r\n                                                                                                                else:\r\n                                                                                                                        print \"DVRSource Play trickplay Failed\"\r\n                                                                                                                        tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                                        else:\r\n                                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to achieve fast Rewind of rate -4x.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_10.	\r\nTest Type: Positive				',NULL,5,'				','\0'),(499,31,'RMF_DVRSrcMPSink_TrickPlayRate_FF64x_09',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_TrickPlayRate_FF64x_09\');\r\n\r\nexpected_Failure=\"FAILURE\"\r\nexpected_Result=\"SUCCESS\"\r\ncurrentTime = 0.0\r\nplayTime = 0.0\r\nplaySpeed = 0.0\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\' and teststep != \'RMF_Element_GetSpeed\':\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    if teststep == \'RMF_Element_GetSpeed\':\r\n        global playSpeed\r\n        pos = details.find(\'Speed:\');\r\n        value = details[pos:];\r\n        speed = value[6:];\r\n        print speed;\r\n        playSpeed = float(speed);\r\n\r\n    if teststep == \'RMF_Element_GetMediaTime\':\r\n        global playTime\r\n        pos = details.find(\'MediaTime:\');\r\n        value = details[pos:];\r\n        mediaTime = value[10:];\r\n        print mediaTime;\r\n        playTime = float(mediaTime);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,1280,720];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(30);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                currentTime = playTime;\r\n                                                                                print \"CurrentTime:\",currentTime\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        currentSpeed = playSpeed;\r\n                                                                                        print \"CurrentSpeed:\",currentSpeed\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                trickPlay = 64.0\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"];\r\n                                                                                                src_element=[\"DVRSrc\",1,trickPlay,currentTime];\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                time.sleep(10);\r\n\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        currentSpeed = playSpeed;\r\n                                                                                                        print \"CurrentSpeed:\",currentSpeed\r\n                                                                                                        if expected_Result in result.upper():\r\n                                                                                                                if currentSpeed == trickPlay:\r\n                                                                                                                        print \"DVRSource Play trickplay Successfull\"\r\n                                                                                                                        tdkTestObj.setResultStatus(result);\r\n                                                                                                                else:\r\n                                                                                                                        print \"DVRSource Play trickplay Failed\"\r\n                                                                                                                        tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                                        else:\r\n                                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to achieve fast forward of rate 64x.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_09.	\r\nTest Type: Positive		',NULL,5,'				','\0'),(500,37,'RMF_DVRSrcMPSink_TrickPlayRate_FF4x_08',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_TrickPlayRate_FF4x_08\');\r\n\r\nexpected_Failure=\"FAILURE\"\r\nexpected_Result=\"SUCCESS\"\r\ncurrentTime = 0.0\r\nplayTime = 0.0\r\nplaySpeed = 0.0\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\' and teststep != \'RMF_Element_GetSpeed\':\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    if teststep == \'RMF_Element_GetSpeed\':\r\n        global playSpeed\r\n        pos = details.find(\'Speed:\');\r\n        value = details[pos:];\r\n        speed = value[6:];\r\n        print speed;\r\n        playSpeed = float(speed);\r\n\r\n    if teststep == \'RMF_Element_GetMediaTime\':\r\n        global playTime\r\n        pos = details.find(\'MediaTime:\');\r\n        value = details[pos:];\r\n        mediaTime = value[10:];\r\n        print mediaTime;\r\n        playTime = float(mediaTime);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,1280,720];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(30);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n\r\n                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                currentTime = playTime;\r\n                                                                                print \"CurrentTime:\",currentTime\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        currentSpeed = playSpeed;\r\n                                                                                        print \"CurrentSpeed:\",currentSpeed\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                trickPlay = 4.0\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"];\r\n                                                                                                src_element=[\"DVRSrc\",1,trickPlay,currentTime];\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                time.sleep(10);\r\n\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        currentSpeed = playSpeed;\r\n                                                                                                        print \"CurrentSpeed:\",currentSpeed\r\n                                                                                                        if expected_Result in result.upper():\r\n                                                                                                                if currentSpeed == trickPlay:\r\n                                                                                                                        print \"DVRSource Play trickplay Successfull\"\r\n                                                                                                                        tdkTestObj.setResultStatus(result);\r\n                                                                                                                else:\r\n                                                                                                                        print \"DVRSource Play trickplay Failed\"\r\n                                                                                                                        tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                                        else:\r\n                                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to achieve fast forward of rate 4x.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_08.	\r\nTest Type: Positive			',NULL,5,'				','\0'),(501,35,'RMF_DVRSrcMPSink_ChangeSpeed_12',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport time; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_ChangeSpeed_12\');\r\n\r\nexpected_Failure=\"FAILURE\"\r\nexpected_Result=\"SUCCESS\"\r\nplaySpeed = 0.0\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep != \'RMF_Element_GetState\' and teststep != \'RMF_Element_GetSpeed\':\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    if teststep == \'RMF_Element_GetSpeed\':\r\n        global playSpeed\r\n        pos = details.find(\'Speed:\');\r\n        value = details[pos:];\r\n        speed = value[6:];\r\n        print speed;\r\n        playSpeed = float(speed);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,1280,720];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(30);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                setSpeed = 4.0;\r\n                                                                                print \"Change Speed to \",setSpeed\r\n                                                                                src_parameter=[\"rmfElement\",\"playSpeed\"];\r\n                                                                                src_element=[\"DVRSrc\",setSpeed];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                time.sleep(10);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        currentSpeed = playSpeed;\r\n                                                                                        print \"CurrentSpeed:\",currentSpeed\r\n                                                                                        if currentSpeed == setSpeed:\r\n                                                                                                print \"DVRSource speed change Successfull\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                        else:\r\n                                                                                                print \"DVRSource speed change Failed\"\r\n                                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to achieve change of speed using the setSpeed() in the play.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_12.	\r\nTest Type: Positive			',NULL,5,'				','\0'),(502,34,'RMF_DVRSrc_InitTerm_01',494,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_InitTerm_01\');\r\n\r\nsrc_parameter=[\"rmfElement\"]\r\nsrc_element=[\"DVRSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n    print \" \" \r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to Initialize and Terminate DVRSource instance.\r\nTest Case ID: CT_RMF_DVRSrc_01.\r\nTest Type: Positive.',NULL,5,'				','\0'),(503,32,'RMF_DVRSrc_OpenClose_02',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_OpenClose_02\');\r\n\r\nExpected_Result=\"SUCCESS\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                if Expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to Open and close the DVRSource instance.\r\nTest Case ID: CT_RMF_DVRSrc_02.\r\nTest Type: Positive.				',NULL,5,'				','\0'),(506,33,'RMF_DVRSrcMPSink_SkipToEnd_05',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrcMPSink_SkipToEnd_05\');\r\n\r\nexpected_Failure=\"FAILURE\"\r\nexpected_Result=\"SUCCESS\"\r\ncurrentTime = 0.0\r\npTime = 0.0\r\nplayTime = 0.0\r\n\r\nstartTime = 0.0\r\ndurationTime = 0.0\r\n\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep != \'RMF_Element_GetState\' and teststep != \'RMF_Element_GetMediaTime\':\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    if teststep == \'RMF_Element_GetMediaTime\':\r\n        pos = details.find(\'MediaTime:\');\r\n        value = details[pos:];\r\n        mediaTime = value[10:];\r\n        print mediaTime;\r\n        playTime = float(mediaTime);\r\n\r\n    if teststep == \'RMF_Element_GetMediaInfo\':\r\n        pos = details.find(\'MediaStartTime\');\r\n        value = details[pos:]\r\n        parts = value.partition(\' \');\r\n        partOne = parts[0];\r\n        partTwo = parts[2];\r\n        start = partOne[15:];\r\n        end = partTwo[14:];\r\n        print start;\r\n        print end;\r\n        startTime = float(start);\r\n        durationTime = float(end);\r\n\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"height\"];\r\n                                                src_element=[0,0,1280,720];\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"];\r\n                                                        src_element=[\"DVRSrc\",\"MPSink\"];\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"];\r\n                                                                src_element=[\"DVRSrc\"];\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                time.sleep(30);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                        src_element=[\"DVRSrc\"];\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                src_parameter=[\"rmfElement\"];\r\n                                                                                src_element=[\"DVRSrc\"];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaInfo\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        currentTime = playTime;\r\n                                                                                        print \"CurrentTime:\",currentTime\r\n                                                                                        setTime = startTime + durationTime;\r\n                                                                                        print setTime;\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\",\"mediaTime\"];\r\n                                                                                                src_element=[\"DVRSrc\",setTime];\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        src_parameter=[\"rmfElement\"];\r\n                                                                                                        src_element=[\"DVRSrc\"];\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        pTime = playTime;\r\n                                                                                                        print \"Present Time:\",pTime\r\n\r\n                                                                                                        if pTime == 0.0:\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                                print \"DVRSource skiping to the end of the record Successful\";\r\n                                                                                                        else:\r\n\r\n                                                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                                                                                print \"DVRSource skiping to the end of the record Failed\";\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(expected_Failure);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to skip to the end of the play.\r\nTest Case ID: CT_RMF_DVRSrc_MPSink_05.	\r\nTest Type: Positive			',NULL,5,'				','\0'),(507,140,'RMF_DVRSink_InitTerm_01',375,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSink_Init_Term\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvrsink module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRSink_Init_Term\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"playUrl\",playUrl);\r\n\r\n    recording_id=random.randint(1,9999)\r\n    recordingId = str(recording_id)\r\n    #recordingId = \"44456\"\r\n    print \"Requested record ID: %s\"%recordingId\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n   \r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRSink init-term Successful\";\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRSink init-term Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests initialize and terminate of DVR Sink functionality of DVR Sink class.		\r\nTest Case ID: CT_RMF_DVRSink_01.	\r\nTest Type: Positive	',NULL,3,'				','\0'),(532,46,'RDKLogger_Dbg_Enabled_Status',401,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rdklogger\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RDKLogger_Dbg_Enabled_Status\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"rdklogger module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of rdklogger module\r\nif \"SUCCESS\" in result.upper():\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RDKLogger_Dbg_Enabled_Status\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    module = \"DVR\"\r\n    print \"Requested module: %s\"%module\r\n    tdkTestObj.addParameter(\"module\",module);\r\n    level = \"ERROR\"\r\n    print \"Requested level: %s\"%level\r\n    tdkTestObj.addParameter(\"level\",level);\r\n   \r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"rdklogger dbg enabled status Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"rdklogger dbg enabled status Failed: [%s]\"%details;\r\n\r\n    #unloading rdklogger module\r\n    obj.unloadModule(\"rdklogger\");\r\nelse:\r\n    print \"Failed to load rdklogger module\";\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the debug enabled status functionality of RDK Logger.\r\nTest Case ID: CT_RDKLogger_03\r\nTest Type: Positive',NULL,5,'				','\0'),(545,33,'RDKLogger_Init',405,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rdklogger\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RDKLogger_Init\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"rdklogger module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of rdklogger module\r\nif \"SUCCESS\" in result.upper():\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RDKLogger_Init\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    #details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"rdklogger init Successful\";\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         details = tdkTestObj.getResultDetails();\r\n         print \"rdklogger init Failed: [%s]\"%details;\r\n\r\n    #unloading rdklogger module\r\n    obj.unloadModule(\"rdklogger\");\r\nelse:\r\n    print \"Failed to load rdklogger module\";\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the RDK logger init functionality.\r\nTest Case ID: CT_RDKLogger_01\r\nTest Type: Positive',NULL,5,'				','\0'),(546,95,'RDKLogger_Log',407,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rdklogger\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RDKLogger_Log\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"rdklogger module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of rdklogger module\r\nif \"SUCCESS\" in result.upper():\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RDKLogger_Log\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    module = \"TEST\"\r\n    print \"Requested module: %s\"%module\r\n    tdkTestObj.addParameter(\"module\",module);\r\n    level = \"INFO\"\r\n    print \"Requested level: %s\"%level\r\n    tdkTestObj.addParameter(\"level\",level);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"rdklogger logging Successful\";\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"rdklogger logging Failed: [%s]\"%details;\r\n\r\n    #unloading rdklogger module\r\n    obj.unloadModule(\"rdklogger\");\r\nelse:\r\n    print \"Failed to load rdklogger module\";\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the RDK logger logging functionality.	\r\nTest Case ID: CT_RDKLogger_02\r\nTest Type: Positive		',NULL,5,'				','\0'),(547,26,'RDKLogger_EnvGetValueFromNum',416,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rdklogger\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RDKLogger_EnvGetValueFromNum\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"rdklogger module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of rdklogger module\r\nif \"SUCCESS\" in result.upper():\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RDKLogger_EnvGetValueFromNum\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    number = 27\r\n    print \"Requested number: %d\"%number\r\n    tdkTestObj.addParameter(\"number\",number);\r\n   \r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"rdklogger env get value Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"rdklogger env get value Failed: [%s]\"%details;\r\n\r\n    #unloading rdklogger module\r\n    obj.unloadModule(\"rdklogger\");\r\nelse:\r\n    print \"Failed to load rdklogger module\";\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the getting of logging level from registered number functionality. 	\r\nTest Case ID: CT_RDKLogger_06\r\nTest Type: Positive	',NULL,5,'				','\0'),(548,26,'RDKLogger_EnvGetModFromNum',418,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rdklogger\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RDKLogger_EnvGetModFromNum\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"rdklogger module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of rdklogger module\r\nif \"SUCCESS\" in result.upper():\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RDKLogger_EnvGetModFromNum\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    number = 27\r\n    print \"Requested number: %d\"%number\r\n    tdkTestObj.addParameter(\"number\",number);\r\n   \r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"rdklogger env get module Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"rdklogger env get module Failed: [%s]\"%details;\r\n\r\n    #unloading rdklogger module\r\n    obj.unloadModule(\"rdklogger\");\r\nelse:\r\n    print \"Failed to load rdklogger module\";\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the get module from number functionality of rdk logger.\r\nTest Case ID: CT_RDKLogger_07\r\nTest Type: Positive		',NULL,5,'				','\0'),(549,31,'RDKLogger_EnvGet',408,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rdklogger\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RDKLogger_EnvGet\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"rdklogger module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of rdklogger module\r\nif \"SUCCESS\" in result.upper():\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RDKLogger_EnvGet\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    module = \"PXYSRVC\"\r\n    print \"Requested module: %s\"%module\r\n    tdkTestObj.addParameter(\"module\",module);\r\n   \r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"rdklogger env get Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"rdklogger env get Failed: [%s]\"%details;\r\n\r\n    #unloading rdklogger module\r\n    obj.unloadModule(\"rdklogger\");\r\nelse:\r\n    print \"Failed to load rdklogger module\";\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests get of logging levels for a module.\r\nTest Case ID: CT_RDKLogger_04\r\nTest Type: Positive			',NULL,5,'				','\0'),(550,24,'RDKLogger_EnvGetNum',409,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rdklogger\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RDKLogger_EnvGetNum\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"rdklogger module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of rdklogger module\r\nif \"SUCCESS\" in result.upper():\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"SUCCESS\"); \r\n\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RDKLogger_EnvGetNum\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    module = \"PXYSRVC\"\r\n    print \"Requested module: %s\"%module\r\n    tdkTestObj.addParameter(\"module\",module);\r\n   \r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"rdklogger env get number Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"rdklogger env get number Failed: [%s]\"%details;\r\n\r\n    #unloading rdklogger module\r\n    obj.unloadModule(\"rdklogger\");\r\nelse:\r\n    print \"Failed to load rdklogger module\";\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the getting of number from module.\r\nTest Case ID: CT_RDKLogger_05\r\nTest Type: Positive 		',NULL,5,'				','\0'),(563,14,'RMF_DVRManager_GetRecordingSegmentInfoByIndex',449,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetRecordingSegmentInfoByIndex\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvrsink module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetRecordingSegmentInfoByIndex\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    index = 0\r\n    print \"Requested index : %d\" %index;\r\n    tdkTestObj.addParameter(\"index\",index);\r\n\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRMgr GetRecordingSegmentInfoByIndex Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRMgr GetRecordingSegmentInfoByIndex Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the get recording segment info by index functionality of dvr manager class	\r\nTest Case ID: CT_RMF_DVRMgr_18\r\nTest Type: Positive		',NULL,3,'				','\0'),(564,11,'RMF_DVRManager_GetSegmentsCount',447,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetSegmentsCount\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetSegmentsCount\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager GetSegmentsCount Successful: [%s]\"%details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager GetSegmentsCount Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the get segment count functionality of DVR manager class.\r\nTest Case ID: CT_RMF_DVRMgr_15\r\nTest Type: Positive		',NULL,3,'				','\0'),(565,41,'RMF_DVRManager_DeleteRecording',446,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_DeleteRecording\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_DeleteRecording\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    recordingId = \"6343\"\r\n    print \"Requested record ID: %s\"%recordingId\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"playUrl\",playUrl);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager DeleteRecording Successful\";\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager DeleteRecording Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the delete functionality of dvr manager class.\r\nTest Case ID: CT_RMF_DVRMgr_14	\r\nTest Type: Positive			',NULL,3,'				','\0'),(566,11,'RMF_DVRManager_UpdateRecording',445,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_UpdateRecording\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_UpdateRecording\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    recordingId = \"6343\"\r\n    print \"Requested record ID: %s\"%recordingId\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"playUrl\",playUrl);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager UpdateRecording Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager UpdateRecording Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the update recording functionality of DVR manager class.\r\nTest Case ID: CT_RMF_DVRMgr_13\r\nTest Type: Positive	',NULL,3,'				','\0'),(567,17,'RMF_DVRManager_CreateRecording',444,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_CreateRecording\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_CreateRecording\');\r\n    expectedRes = \"SUCCESS\"\r\n    recordingId = \"6343\"\r\n    print \"Requested record ID: %s\"%recordingId;\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n\r\n    duration = 10000\r\n    print \"Requested duration: %d\"%duration;\r\n    tdkTestObj.addParameter(\"recordDuration\",duration);\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"qamLocator\",playUrl);\r\n\r\n    title = \"DVR Manager test create recording\"\r\n    print \"Requested title : %s\"%title;\r\n    tdkTestObj.addParameter(\"recordingTitle\",title);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager CreateRecording Successful\";\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager CreateRecording Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the create recording functionality of DVR manager class.\r\nTest Case ID: CT_RMF_DVRMgr_12.\r\nTest Type: Positive			',NULL,3,'				','\0'),(568,19,'RMF_DVRManager_ConvertTSBToRecording',443,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_ConvertTSBToRecording\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_ConvertTSBToRecording\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n\r\n    tsbId = \"-1\"\r\n    print \"Requested tsbId: %s\"%tsbId;\r\n    tdkTestObj.addParameter(\"tsbId\",tsbId);\r\n\r\n    recordingId = \"6343\"\r\n    print \"Requested record ID: %s\"%recordingId\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"playUrl\",playUrl);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager ConvertTSBToRecording Successful\";\r\n    else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"DVRManager ConvertTSBToRecording Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the convert TSB to recording functionality of dvr manager class.\r\nTest Case ID: CT_RMF_DVRMgr_11\r\nTest Type: Positive						',NULL,3,'				','\0'),(569,14,'RMF_DVRManager_CreateTSB',442,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_CreateTSB\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_CreateTSB\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    duration = 10000\r\n    print \"Requested duration: %d\"%duration;\r\n    tdkTestObj.addParameter(\"duration\",duration);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager CreateTSB Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager CreateTSB Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the create TSB functionality of DVR manager class.\r\nTest Case ID: CT_RMF_DVRMgr_10\r\nTest Type: Positive			',NULL,3,'				','\0'),(570,13,'RMF_DVRManager_GetDefaultTSBMaxDuration',440,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetDefaultTSBMaxDuration\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetDefaultTSBMaxDuration\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager GetDefaultTSBMaxDuration Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager GetDefaultTSBMaxDuration Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the get default TSBMaxDuration functionality of DVR manager class.\r\nTest Case ID: CT_RMF_DVRMgr_09			\r\nTest Type: Positive		',NULL,3,'				','\0'),(571,14,'RMF_DVRManager_GetRecordingStartTime',439,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetRecordingStartTime\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetRecordingStartTime\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    recordingId = \"6343\"\r\n    print \"Requested record ID: %s\"%recordingId\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"playUrl\",playUrl);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager GetRecordingStartTime Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager GetRecordingStartTime Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the get recording start time of DVR manager class.\r\nTest Case ID:  CT_RMF_DVRMgr_08\r\nTest Type: Positive			',NULL,3,'				','\0'),(572,16,'RMF_DVRManager_GetRecordingDuration',438,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetRecordingDuration\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetRecordingDuration\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    recordingId = \"6343\"\r\n    print \"Requested record ID: %s\"%recordingId\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"playUrl\",playUrl);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager GetRecordingDuration Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager GetRecordingDuration Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the recording duration functionality of DVR Manager class.	\r\nTest Case ID: CT_RMF_DVRMgr_07\r\nTest Type: Positive			',NULL,3,'				','\0'),(573,15,'RMF_DVRManager_GetRecordingSize',437,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetRecordingSize\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetRecordingSize\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    recordingId = \"6343\"\r\n    print \"Requested record ID: %s\"%recordingId\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"playUrl\",playUrl);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager GetRecordingSize Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager GetRecordingSize Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the recording size functionality of DVR Manager class.	\r\nTest Case ID: CT_RMF_DVRMgr_06\r\nTest Type: Positive		',NULL,3,'				','\0'),(574,21,'RMF_DVRManager_GetIsRecordingInProgress',436,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetIsRecordingInProgress\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetIsRecordingInProgress\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n\r\n    recordingId = \"6343\"\r\n    print \"Requested record ID: %s\"%recordingId\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"playUrl\",playUrl);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager GetIsRecordingInProgress Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager GetIsRecordingInProgress Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the recording in progress functionality of DVR Manager class.	\r\nTest Case ID: CT_RMF_DVRMgr_05\r\nTest Type: Positive			',NULL,3,'				','\0'),(575,14,'RMF_DVRManager_GetRecordingInfoById',435,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetRecordingInfoById\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetRecordingInfoById\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n    recordingId = \"6343\"\r\n    print \"Requested record ID: %s\"%recordingId\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"playUrl\",playUrl);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager GetRecordingInfoById Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager GetRecordingInfoById Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the get recording Info by Id functionality of DVR Manager class.\r\nTest Case ID: CT_RMF_DVRMgr_04\r\nTest Type: Positive				',NULL,3,'				','\0'),(576,15,'RMF_DVRManager_GetRecordingInfoByIndex',434,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetRecordingInfoByIndex\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvrsink module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetRecordingInfoByIndex\');\r\n    expectedRes = \"SUCCESS\"\r\n    index = 0\r\n    print \"Requested index : %d\" %index;\r\n    tdkTestObj.addParameter(\"index\",index);\r\n\r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n    playUrl = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n    print \"Requested play url : %s\" %playUrl;\r\n    tdkTestObj.addParameter(\"playUrl\",playUrl);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRMgr GetRecordingInfoByIndex Successful: [%s]\" %details;\r\n    else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        print \"DVRMgr GetRecordingInfoByIndex Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the get recording info by index functionality of DVR Manager class.	\r\nTest Case ID: CT_RMF_DVRMgr_03\r\nTest Type: Positive		',NULL,3,'				','\0'),(577,15,'RMF_DVRManager_GetRecordingCount',432,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetRecordingCount\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetRecordingCount\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRMgr GetRecordingCount Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRMgr GetRecordingCount Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This tests the get recording count functionality of DVR Manager Class.\r\nTest Case ID: CT_RMF_DVRMgr_02\r\nTest Type: Positive				',NULL,3,'				','\0'),(578,11,'RMF_DVRManager_GetSpace',431,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetSpace\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework DvrMgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\"); \r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'RMF_DVRManager_GetSpace\');\r\n\r\n    expectedRes = \"SUCCESS\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"SUCCESS\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRMgr getspace  Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRMgr getspace  Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This will test the getspace function of the DVR Manager class.	\r\nTest Case ID: CT_RMF_DVRMgr_01\r\nTest Type: Positive		',NULL,3,'				','\0'),(582,20,'DS_SetColor_orange test_36',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_36\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Message\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value\r\n                color = 4;\r\n                indicator = \"Power\";\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the orange color\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set orange color for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Orange Color for the Front panel Indicator\r\nTest Case ID : CT_DS_36				',NULL,3,'				','\0'),(583,18,'DS_SetColor_green test_33',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_33\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Power\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value as 1 to set green color\r\n                color = 1;\r\n                indicator = \"Power\";\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the color as green\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set color for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Green Color for the Front panel Indicator\r\nTest Case ID : CT_DS_33				',NULL,3,'				','\0'),(584,20,'DS_SetColor_red test_34',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_34\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Message\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value\r\n                color = 2;\r\n                indicator = \"Power\";\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the red color\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set red color for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Red Color for the Front panel Indicator\r\nTest Case ID : CT_DS_34				',NULL,3,'				','\0'),(585,18,'DS_SetColor_yellow test_35',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_35\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Message\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value\r\n                color = 3;\r\n                indicator = \"Power\";\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the yellow color\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set yellow color for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Yellow Color for the Front panel Indicator\r\nTest Case ID : CT_DS_35				',NULL,3,'				','\0'),(586,12,'DS_SetBrightness_Minimum value test_23',76,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_23\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_GetIndicators\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                indicatordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetIndicators \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of Indicators\";\r\n                        print \"Indicators:%s\" %indicatordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the Indicators list\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetBrightness\');\r\n                #setting brightness parameter value\r\n                brightness = 0;\r\n                indicator_name = \"Power\";\r\n                tdkTestObj.addParameter(\"brightness\",brightness);\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator_name);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                getBrightness = tdkTestObj.getResultDetails();\r\n                setBrightness = \"%s\" %brightness;\r\n                print \"getBrightness:%s\" %getBrightness;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetBrightness\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the Minimum Brightness\";\r\n                        #comparing the brightness value before and after setting\r\n                        if setBrightness in getBrightness :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the Brightness are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the Brightness are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set Brightness for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the minimum Brightness of the given Front panel Indicator\r\nTest Case ID : CT_DS_23				',NULL,3,'				','\0'),(587,14,'DS_SetBrightness_Maximum value test_24',76,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_24\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_GetIndicators\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                indicatordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetIndicators \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of Indicators\";\r\n                        print \"Indicators:%s\" %indicatordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the Indicators list\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetBrightness\');\r\n                #setting Maximum brightness parameter value\r\n                brightness = 100;\r\n                indicator_name = \"Power\";\r\n                tdkTestObj.addParameter(\"brightness\",brightness);\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator_name);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                getBrightness = tdkTestObj.getResultDetails();\r\n                setBrightness = \"%s\" %brightness;\r\n                print \"getBrightness:%s\" %getBrightness;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetBrightness\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the Maximum Brightness\";\r\n                        #comparing the brightness value before and after setting\r\n                        if setBrightness in getBrightness :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the Brightness are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the Brightness are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set Maximum Brightness for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the maximum Brightness of the given Front panel Indicator\r\nTest Case ID : CT_DS_24				',NULL,3,'				','\0'),(588,12,'DS_SetBrightness_value in range test_25',76,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_25\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_GetIndicators\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                indicatordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetIndicators \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of Indicators\";\r\n                        print \"Indicators:%s\" %indicatordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the Indicators list\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetBrightness\');\r\n                #setting brightness parameter value\r\n                brightness = 25;\r\n                indicator_name = \"Power\";\r\n                tdkTestObj.addParameter(\"brightness\",brightness);\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator_name);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                getBrightness = tdkTestObj.getResultDetails();\r\n                setBrightness = \"%s\" %brightness;\r\n                print \"getBrightness:%s\" %getBrightness;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetBrightness\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the value in range Brightness\";\r\n                        #comparing the brightness value before and after setting\r\n                        if setBrightness in getBrightness :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the Brightness are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the Brightness are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set value in range Brightness for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the in range value Brightness of the given Front panel Indicator\r\nTest Case ID : CT_DS_25				',NULL,3,'				','\0'),(589,19,'DS_SetBrightness_value out of range test_26',76,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_26\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_GetIndicators\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                indicatordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetIndicators\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of Indicators\";\r\n                        print \"Indicators:%s\" %indicatordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the Indicators list\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetBrightness\');\r\n                #setting brightness parameter value\r\n                brightness = 500;\r\n                indicator_name = \"Power\";\r\n                tdkTestObj.addParameter(\"brightness\",brightness);\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator_name);\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                getBrightness = tdkTestObj.getResultDetails();\r\n                setBrightness = \"%s\" %brightness;\r\n                print \"getBrightness:%s\" %getBrightness;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetBrightness\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application Failed gets and sets the value of Brightness out of range\";\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        \r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: successfully get and set value of Brightness for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the out of range value for Brightness of the given Front panel Indicator\r\nTest Case ID : CT_DS_26				',NULL,3,'				','\0'),(590,16,'DS_SetblueColor_MESSAGE_LED_27',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_27\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Message\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value\r\n                color = 0;\r\n                indicator = \"Message\";\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the color of MESSAGE LED\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set color for MESSAGE LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Blue Color for the Message Front panel Indicator\r\nTest Case ID : CT_DS_27				',NULL,3,'				','\0'),(591,16,'DS_SetblueColor_RECORD_LED_28',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_28\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Record\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value\r\n                color = 0;\r\n                indicator = \"Record\"\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the color RECORD LED\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set color for REMOTE LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Blue Color for the Record Front panel Indicator\r\nTest Case ID : CT_DS_28				',NULL,3,'				','\0'),(592,21,'DS_SetblueColor_RFBYPASS_LED_29',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_29\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"RfByPass\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value\r\n                color = 0;\r\n                indicator = \"RfByPass\";\r\n                tdkTestObj.addParameter(\"indicator_name\", indicator);\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the color for RFBYPASS LED\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set color for RFBYPASS LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Blue Color for the RfByPass Front panel Indicator\r\nTest Case ID : CT_DS_29				',NULL,3,'				','\0'),(593,19,'DS_SetblueColor_REMOTE_LED_30',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_30\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Remote\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value\r\n                color = 0;\r\n                indicator = \"Remote\";\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the color\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set color for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Blue Color for the Remote Front panel Indicator\r\nTest Case ID : CT_DS_30				',NULL,3,'				','\0'),(594,22,'DS_SetblueColor_POWER_LED_31',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_31\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Power\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value\r\n                color = 0;\r\n                indicator = \"Power\";         \r\n                tdkTestObj.addParameter(\"color\",color);\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the color for POWER LED\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set color for POWER LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Blue Color for the Power Front panel Indicator\r\nTest Case ID : CT_DS_31				',NULL,3,'				','\0'),(595,38,'DS_SetblueColor_INVALID_LED_32',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_32\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Invalid\");\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        colordetails = tdkTestObj.getResultDetails();\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color value as 0\r\n                color = 0;\r\n                indicator = \"Invalid\";\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Failed to gets and sets the color\";\r\n                        #print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: successfully gets and sets the color for Invalid LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the Blue Color for an Invalid Front panel Indicator(Negative Scenario).\r\nTest Case ID : CT_DS_32. 				',NULL,3,'				','\0'),(596,18,'DS_SetBlink_valid_test_38',75,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_38\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setBlink and getBlink APIs with valid values\r\n                tdkTestObj = obj.createTestStep(\'DS_SetBlink\');\r\n                # setting scroll class parameters values\r\n                blink_interval = 1;\r\n                blink_iteration = 2;\r\n                tdkTestObj.addParameter(\"blink_interval\",blink_interval);\r\n                tdkTestObj.addParameter(\"blink_iteration\",blink_iteration);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                blinkdetails = tdkTestObj.getResultDetails();\r\n                blinkinterval=\"%s\" %blink_interval;\r\n                blinkiteration=\"%s\" %blink_iteration;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetBlink\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the blink rate\";\r\n                        print \"getblink %s\" %blinkdetails;\r\n                        #comparing the blink paramaters before and after setting\r\n                        if ((blinkinterval in blinkdetails)and(blinkiteration in blinkdetails)):\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the blink rates are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the blink rates are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set blink rate for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the in range value for blink feature of given Front panel Indicator\r\nTest Case ID : CT_DS_38				',NULL,3,'				','\0'),(597,22,'DS_SetBlink_Invalid_test_39',75,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_39\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setBlink and getBlink APIs with invalid value\r\n                tdkTestObj = obj.createTestStep(\'DS_SetBlink\');\r\n                # setting scroll class parameters values\r\n                blink_interval = -1;\r\n                blink_iteration = -2;\r\n                tdkTestObj.addParameter(\"blink_interval\",blink_interval);\r\n                tdkTestObj.addParameter(\"blink_iteration\",blink_iteration);\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                blinkdetails = tdkTestObj.getResultDetails();\r\n                blinkinterval=\"%s\" %blink_interval;\r\n                blinkiteration=\"%s\" %blink_iteration;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetBlink\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Failed to get and set the blink rate\";\r\n                        \r\n                        #comparing the blink paramaters before and after setting\r\n                        if ((blinkinterval in blinkdetails)and(blinkiteration in blinkdetails)):\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the blink rates are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the blink rates are same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"getblink %s\" %blinkdetails;\r\n                        print \"Failure: Application successfully gets and sets blink rate for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the iinvalid value for blink feature of given Front panel Indicator\r\nTest Case ID : CT_DS_39				',NULL,3,'				','\0'),(598,18,'DS_SetScroll_Minimum_Value_test_48',84,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_48\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setScroll and getScroll APIs\r\n                tdkTestObj = obj.createTestStep(\'DS_SetScroll\');\r\n                #setting scroll class parameters\r\n                viteration=0;\r\n                hiteration=0;\r\n                hold_duration=0;\r\n                tdkTestObj.addParameter(\"viteration\",viteration);\r\n                tdkTestObj.addParameter(\"hiteration\",hiteration);\r\n                tdkTestObj.addParameter(\"hold_duration\",hold_duration);\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                scrolldetails = tdkTestObj.getResultDetails();\r\n                str_viteration=\"%s\" %viteration;\r\n                str_hiteration=\"%s\" %hiteration;\r\n                str_hold_duration=\"%s\" %hold_duration;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetScroll\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the scroll value\";\r\n                        print \"getScroll %s\" %scrolldetails;\r\n                        #comparing the scroll parameters before and after setting\r\n                        if ((str_viteration in scrolldetails)and(str_hiteration in scrolldetails)and(str_hold_duration in scrolldetails)):\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the scroll details are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the scroll details are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set scroll details as Minimum\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the minimum value for scroll information of given Front panel Indicator\r\nTest Case ID : CT_DS_48				',NULL,3,'				','\0'),(599,34,'DS_SetScroll_Maximum_Value_test_49',84,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_49\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setScroll and getScroll APIs\r\n                tdkTestObj = obj.createTestStep(\'DS_SetScroll\');\r\n                #setting scroll class parameters\r\n                viteration=100;\r\n                hiteration=110;\r\n                hold_duration=150;\r\n                tdkTestObj.addParameter(\"viteration\",viteration);\r\n                tdkTestObj.addParameter(\"hiteration\",hiteration);\r\n                tdkTestObj.addParameter(\"hold_duration\",hold_duration);\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                scrolldetails = tdkTestObj.getResultDetails();\r\n                str_viteration=\"%s\" %viteration;\r\n                str_hiteration=\"%s\" %hiteration;\r\n                str_hold_duration=\"%s\" %hold_duration;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetScroll\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the scroll value\";\r\n                        print \"getScroll %s\" %scrolldetails;\r\n                        #comparing the scroll parameters before and after setting\r\n                        if ((str_viteration in scrolldetails)and(str_hiteration in scrolldetails)and(str_hold_duration in scrolldetails)):\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the scroll details are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the scroll details are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set scroll details as Maximum \";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the maximum value for scroll information of given Front panel Indicator\r\nTest Case ID : CT_DS_49					',NULL,3,'				','\0'),(600,20,'DS_SetScroll_Middle_Value_test_50',84,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_50\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setScroll and getScroll APIs\r\n                tdkTestObj = obj.createTestStep(\'DS_SetScroll\');\r\n                #setting scroll class parameters\r\n                viteration=50;\r\n                hiteration=50;\r\n                hold_duration=50;\r\n                tdkTestObj.addParameter(\"viteration\",viteration);\r\n                tdkTestObj.addParameter(\"hiteration\",hiteration);\r\n                tdkTestObj.addParameter(\"hold_duration\",hold_duration);\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                scrolldetails = tdkTestObj.getResultDetails();\r\n                str_viteration=\"%s\" %viteration;\r\n                str_hiteration=\"%s\" %hiteration;\r\n                str_hold_duration=\"%s\" %hold_duration;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetScroll\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the scroll value\";\r\n                        print \"getScroll %s\" %scrolldetails;\r\n                        #comparing the scroll parameters before and after setting\r\n                        if ((str_viteration in scrolldetails)and(str_hiteration in scrolldetails)and(str_hold_duration in scrolldetails)):\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the scroll details are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the scroll details are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set scroll details with Middle value\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the middle value for scroll information of given Front panel Indicator\r\nTest Case ID : CT_DS_50				',NULL,3,'				','\0'),(601,20,'DS_SetAudioLevel_Minimum_test_51',110,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_51\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");    \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setLevel and getLevel APIs with Minimum value\r\n                tdkTestObj = obj.createTestStep(\'DS_SetAudioLevel\');\r\n                #setting audio level parameter as Minimum\r\n                audiolevel=0.000;\r\n                tdkTestObj.addParameter(\"audio_level\",audiolevel);\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                leveldetails = tdkTestObj.getResultDetails();\r\n                setlevel = \"%s\" %audiolevel;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetLevel\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the Minimum audio level\";\r\n                        #print \"setlevel %s\" %setlevel;\r\n                        print \"getlevel %s\" %leveldetails;\r\n                        #comparing audio level before and after setting\r\n                        if setlevel in leveldetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the audio levels are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the audio levels are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set Minimum audio level\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check for setting and getting the minimum value for audio level\r\nTestCase ID:51				',NULL,3,'				','\0'),(602,38,'DS_SetAudioLevel_Maximum_test_52',110,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_52\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");    \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setLevel and getLevel APIs to set Maximum value\r\n                tdkTestObj = obj.createTestStep(\'DS_SetAudioLevel\');\r\n                #setting audio level parameter\r\n                audiolevel=9.99;\r\n                tdkTestObj.addParameter(\"audio_level\",audiolevel);\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                leveldetails = tdkTestObj.getResultDetails();\r\n                setlevel = \"%s\" %audiolevel;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetLevel\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the audio level\";\r\n                        #print \"setlevel %s\" %setlevel;\r\n                        print \"getlevel %s\" %leveldetails;\r\n                        #comparing audio level before and after setting\r\n                        if setlevel in leveldetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the audio levels are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the audio levels are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set audio level\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check for setting and getting the maximum value for audio level\r\nTestCase ID:52					',NULL,3,'				','\0'),(603,18,'DS_SetAudioLevel_value in range_test_53',110,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_53\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");    \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setLevel and getLevel APIs with the valid in range\r\n                tdkTestObj = obj.createTestStep(\'DS_SetAudioLevel\');\r\n                #setting audio level parameter\r\n                audiolevel=5.00;\r\n                tdkTestObj.addParameter(\"audio_level\",audiolevel);\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                leveldetails = tdkTestObj.getResultDetails();\r\n                setlevel = \"%s\" %audiolevel;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetLevel\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the audio level\";\r\n                        #print \"setlevel %s\" %setlevel;\r\n                        print \"getlevel %s\" %leveldetails;\r\n                        #comparing audio level before and after setting\r\n                        if setlevel in leveldetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the audio levels are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the audio levels are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Failed to get and set audio level\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check for setting and getting the in range value for audio level\r\nTestCase ID:53				',NULL,3,'				','\0'),(604,22,'DS_SetAudioLevel_value outof range_test_54',110,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_54\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setLevel and getLevel APIs with value out of range\r\n                tdkTestObj = obj.createTestStep(\'DS_SetAudioLevel\');\r\n                #setting audio level parameter\r\n                audiolevel= -5.00;\r\n                tdkTestObj.addParameter(\"audio_level\",audiolevel);\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                leveldetails = tdkTestObj.getResultDetails();\r\n                setlevel = \"%s\" %audiolevel;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetLevel\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Failed to get and set the audio level with value out of range\";\r\n                        #print \"setlevel %s\" %setlevel;\r\n                        print \"getlevel %s\" %leveldetails;\r\n                        #comparing audio level before and after setting\r\n                        if setlevel in leveldetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the audio levels are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the audio levels are same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Application successfully to get and set audio level with value out of range\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check for setting and getting the out of range value for audio level\r\nTestCase ID:54					',NULL,3,'				','\0'),(605,22,'DS_SetDB_Maximum_test_55',109,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_55\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDB to set the audio DB level for the given audio port \r\n                dblevel=180.000;\r\n                tdkTestObj = obj.createTestStep(\'DS_SetAudioDB\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                tdkTestObj.addParameter(\"db_level\",dblevel);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dbdetails = tdkTestObj.getResultDetails();\r\n                setdb=\"%s\" %dblevel;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDB\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully sets and gets Maximum DB level\";\r\n                        print \"getdb %s\" %dbdetails.upper();\r\n                        #comparing audio DB before anf after setting \r\n                        if setdb in dbdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Both the audio dbs are same \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Both the audio dbs are not same \";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get Maximum DB level \";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check for setting and getting the maximum value for audio DB level \r\nTestCase ID:55				',NULL,3,'				','\0'),(606,20,'DS_SetDB_Minimum_test_56',109,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_56\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDB to set the audio DB level for the given audio port \r\n                dblevel=-1450.0000;\r\n                tdkTestObj = obj.createTestStep(\'DS_SetAudioDB\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                tdkTestObj.addParameter(\"db_level\",dblevel);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dbdetails = tdkTestObj.getResultDetails();\r\n                setdb=\"%s\" %dblevel;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDB\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully sets and gets Minimum DB level\";\r\n                        print \"getdb %s\" %dbdetails.upper();\r\n                        #comparing audio DB before anf after setting \r\n                        if setdb in dbdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Both the audio dbs are same \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Both the audio dbs are not same \";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get Minimum DB level \";                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check for setting and getting the minimum value for audio DB level \r\nTestCase ID:56					',NULL,3,'				','\0'),(607,14,'DS_SetDB_valid_value_test_57',109,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_57\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDB to set the audio DB level for the given audio port \r\n                dblevel=4.0000;\r\n                tdkTestObj = obj.createTestStep(\'DS_SetAudioDB\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                tdkTestObj.addParameter(\"db_level\",dblevel);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dbdetails = tdkTestObj.getResultDetails();\r\n                setdb=\"%s\" %dblevel;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDB\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully sets and gets DB level\";\r\n                        print \"getdb %s\" %dbdetails.upper();\r\n                        #comparing audio DB before anf after setting \r\n                        if setdb in dbdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Both the audio dbs are same \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Both the audio dbs are not same \";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get DB level \";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");				','ALLOCATED','This script will check for setting and getting the valid value for audio DB level \r\nTestCase ID:57					',NULL,3,'				','\0'),(608,26,'DS_SetDB_Invalid_Value_test_58',109,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_58\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDB to set the audio DB level for the given audio port \r\n                dblevel=187.0000;\r\n                tdkTestObj = obj.createTestStep(\'DS_SetAudioDB\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                tdkTestObj.addParameter(\"db_level\",dblevel);\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dbdetails = tdkTestObj.getResultDetails();\r\n                setdb=\"%s\" %dblevel;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDB\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Failed to set and get Invalid DB level\";\r\n                        print \"getdb %s\" %dbdetails.upper();\r\n                        #comparing audio DB before anf after setting \r\n                        if setdb in dbdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Both the audio dbs are not same \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Both the audio dbs are same \";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :succeeded to set and get Invalid DB level \";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script will check for setting and getting the invalid value for audio DB level \r\nTestCase ID:58 NOTE: This test fails due to bug in DS component.				',NULL,3,'				','\0'),(609,18,'DS_SetEncoding_AC3_FORMAT_test_59',81,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_59\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedEncodings get list of encoding.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedEncodings\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedEncodings\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list encoding supported\";\r\n                        print \"%s\" %encodingdetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported encoding list\";\r\n                #calling DS_SetEncoding to get and set the encoding  \r\n                tdkTestObj = obj.createTestStep(\'DS_SetEncoding\');\r\n                encoding=\"AC3\";\r\n                tdkTestObj.addParameter(\"encoding_format\",encoding);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetEncoding \r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the AC3 encoding\";\r\n                        print \"getencoding: %s\" %encodingdetails;\r\n                        # comparing the encoding detail before and after setting \r\n                        if encoding in encodingdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the encoding formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the encoding formats are not same\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                #tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE :Application failed to set and get the encoding formats\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the AC3 Encoding Format of Audio.Test Case ID : CT_DS_59.  Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.				',NULL,3,'				','\0'),(610,18,'DS_SetEncoding_PCM_FORMAT_test_60',81,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_60\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedEncodings get list of encoding.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedEncodings\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedEncodings\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list encoding supported\";\r\n                        print \"%s\" %encodingdetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported encoding list\";\r\n                #calling DS_SetEncoding to get and set the encoding  \r\n                tdkTestObj = obj.createTestStep(\'DS_SetEncoding\');\r\n                encoding=\"PCM\";\r\n                tdkTestObj.addParameter(\"encoding_format\",encoding);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetEncoding \r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the PCM encoding\";\r\n                        print \"getencoding: %s\" %encodingdetails;\r\n                        # comparing the encoding detail before and after setting \r\n                        if encoding in encodingdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the encoding formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the encoding formats are not same\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                #tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE :Application failed to set and get the encoding formats\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the PCM Encoding Format of Audio.Test Case ID : CT_DS_60.  Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.								',NULL,3,'				','\0'),(611,18,'DS_SetEncoding_DISPLAY_FORMAT_test_61',81,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_61\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedEncodings get list of encoding.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedEncodings\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedEncodings\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list encoding supported\";\r\n                        print \"%s\" %encodingdetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported encoding list\";\r\n                #calling DS_SetEncoding to get and set the encoding  \r\n                tdkTestObj = obj.createTestStep(\'DS_SetEncoding\');\r\n                encoding=\"DISPLAY\";\r\n                tdkTestObj.addParameter(\"encoding_format\",encoding);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetEncoding \r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the DISPLAY encoding\";\r\n                        print \"getencoding: %s\" %encodingdetails;\r\n                        # comparing the encoding detail before and after setting \r\n                        if encoding in encodingdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the encoding formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the encoding formats are not same\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                #tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE :Application failed to set and get the encoding formats\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the DISPLAY Encoding Format of Audio.Test Case ID : CT_DS_61.  Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.						',NULL,3,'				','\0'),(612,12,'DS_SetEncoding_NONE_test_62',81,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_62\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedEncodings get list of encoding.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedEncodings\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedEncodings\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list encoding supported\";\r\n                        print \"%s\" %encodingdetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported encoding list\";\r\n                #calling DS_SetEncoding to get and set the encoding  \r\n                tdkTestObj = obj.createTestStep(\'DS_SetEncoding\');\r\n                encoding=\"NONE\";\r\n                tdkTestObj.addParameter(\"encoding_format\",encoding);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetEncoding \r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the encoding\";\r\n                        print \"getencoding: %s\" %encodingdetails;\r\n                        # comparing the encoding detail before and after setting \r\n                        if encoding in encodingdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the encoding formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the encoding formats are not same\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                #tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE :Application failed to set and get the encoding formats\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the NONE Encoding Format of Audio.Test Case ID : CT_DS_62.  Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.								',NULL,3,'				','\0'),(613,28,'DS_SetEncoding_Invalid_FORMAT_test_63',81,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_63\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedEncodings get list of encoding.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedEncodings\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                encodingdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedEncodings\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list encoding supported\";\r\n                        print \"%s\" %encodingdetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported encoding list\";\r\n                #calling DS_SetEncoding to get and set the encoding\r\n                tdkTestObj = obj.createTestStep(\'DS_SetEncoding\');\r\n                encoding=\"INVALID\";\r\n                tdkTestObj.addParameter(\"encoding_format\",encoding);\r\n                expectedresult=\"FAILURE\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetEncoding\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Failed to get and set the INVALID encoding\";\r\n                        print \"getencoding: %s\" %encodingdetails;\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"SUCCESS :succeeded to get and set the INVALID encoding\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                #tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE :Application failed to set and get the encoding formats\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the Invalid Encoding Format of Audio.Test Case ID : CT_DS_63.  Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.						',NULL,3,'				','\0'),(614,14,'DS_SetCompression_LIGHT_FORMAT_64',78,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_64\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedCompression get list of compressions.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedCompressions\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedCompression\r\n                if expectedresult in actualresult:\r\n                       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                       print \"SUCCESS :Application successfully gets the list compression supported\";\r\n                       print \"%s\" %compressiondetails\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"FAILURE :Failed to get supported compression list\";\r\n                #calling DS_SetCompression to get and set the compression\r\n                tdkTestObj = obj.createTestStep(\'DS_SetCompression\');\r\n                compression=\"LIGHT\";\r\n                tdkTestObj.addParameter(\"compression_format\",compression);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                setcompression = \"Compression format:%s\" %compression;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetCompression\r\n                print \"compression:%s\" %compressiondetails;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the compression\";\r\n                        print \"setcompression: %s\" %setcompression;\r\n                        print \"getcompression: %s\" %compressiondetails;\r\n                        #comparing compression before and after setting\r\n                        if compression in compressiondetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the compression formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the compression formats are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get the compression formats\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the LIGHT Compression Format of Audio Test Case ID : CT_DS_64.Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.				',NULL,3,'				','\0'),(615,18,'DS_SetCompression_MEDIUM_FORMAT_65',78,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_65\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedCompression get list of compressions.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedCompressions\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedCompression\r\n                if expectedresult in actualresult:\r\n                       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                       print \"SUCCESS :Application successfully gets the list compression supported\";\r\n                       print \"%s\" %compressiondetails\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"FAILURE :Failed to get supported compression list\";\r\n                #calling DS_SetCompression to get and set the compression\r\n                tdkTestObj = obj.createTestStep(\'DS_SetCompression\');\r\n                compression=\"MEDIUM\";\r\n                tdkTestObj.addParameter(\"compression_format\",compression);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                setcompression = \"Compression format:%s\" %compression;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetCompression\r\n                print \"compression:%s\" %compressiondetails;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the compression\";\r\n                        print \"setcompression: %s\" %setcompression;\r\n                        print \"getcompression: %s\" %compressiondetails;\r\n                        #comparing compression before and after setting\r\n                        if compression in compressiondetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the compression formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the compression formats are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get the compression formats\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the MEDIUM Compression Format of Audio Test Case ID : CT_DS_65.Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.					',NULL,3,'				','\0'),(616,14,'DS_SetCompression_HEAVY_FORMAT_66',78,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_66\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedCompression get list of compressions.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedCompressions\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedCompression\r\n                if expectedresult in actualresult:\r\n                       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                       print \"SUCCESS :Application successfully gets the list compression supported\";\r\n                       print \"%s\" %compressiondetails\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"FAILURE :Failed to get supported compression list\";\r\n                #calling DS_SetCompression to get and set the compression\r\n                tdkTestObj = obj.createTestStep(\'DS_SetCompression\');\r\n                compression=\"HEAVY\";\r\n                tdkTestObj.addParameter(\"compression_format\",compression);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                setcompression = \"Compression format:%s\" %compression;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetCompression\r\n                print \"compression:%s\" %compressiondetails;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the compression\";\r\n                        print \"setcompression: %s\" %setcompression;\r\n                        print \"getcompression: %s\" %compressiondetails;\r\n                        #comparing compression before and after setting\r\n                        if compression in compressiondetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the compression formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the compression formats are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get the compression formats\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the HEAVY Compression Format of Audio Test Case ID : CT_DS_66.Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.					',NULL,3,'				','\0'),(617,14,'DS_SetCompression_NONE_67',78,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_67\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedCompression get list of compressions.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedCompressions\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedCompression\r\n                if expectedresult in actualresult:\r\n                       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                       print \"SUCCESS :Application successfully gets the list compression supported\";\r\n                       print \"%s\" %compressiondetails\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"FAILURE :Failed to get supported compression list\";\r\n                #calling DS_SetCompression to get and set the compression\r\n                tdkTestObj = obj.createTestStep(\'DS_SetCompression\');\r\n                compression=\"NONE\";\r\n                tdkTestObj.addParameter(\"compression_format\",compression);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                setcompression = \"Compression format:%s\" %compression;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetCompression\r\n                print \"compression:%s\" %compressiondetails;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the compression\";\r\n                        print \"setcompression: %s\" %setcompression;\r\n                        print \"getcompression: %s\" %compressiondetails;\r\n                        #comparing compression before and after setting\r\n                        if compression in compressiondetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the compression formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the compression formats are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get the compression formats\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the NONE Compression Format of Audio Test Case ID : CT_DS_67.Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.					',NULL,3,'				','\0'),(618,22,'DS_SetCompression_INVALID_FORMAT_68',78,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_68\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_GetSupportedCompression get list of compressions.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedCompressions\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedCompression\r\n                if expectedresult in actualresult:\r\n                       tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                       print \"SUCCESS :Application successfully gets the list compression supported\";\r\n                       print \"%s\" %compressiondetails\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"FAILURE :Failed to get supported compression list\";\r\n                #calling DS_SetCompression to get and set the compression\r\n                tdkTestObj = obj.createTestStep(\'DS_SetCompression\');\r\n                compression=\"INVALID\";\r\n                tdkTestObj.addParameter(\"compression_format\",compression);\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                compressiondetails = tdkTestObj.getResultDetails();\r\n                setcompression = \"Compression format:%s\" %compression;\r\n                #Check for FAILURE return value of DS_SetCompression\r\n                print \"compression:%s\" %compressiondetails;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Failed to get and set the Invalid compression\";\r\n                        print \"setcompression: %s\" %setcompression;\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"getcompression: %s\" %compressiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :succeeded to set and get the Invalid compression formats\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the INVALID Compression Format of Audio Test Case ID : CT_DS_68.Note:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.					',NULL,3,'				','\0'),(619,16,'DS_SetStereoMode_MONO_FORMAT_69',85,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_69\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                #calling DS_GetSupportedStereoModes get list of StereoModes.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedStereoModes\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedStereoModes\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list of supported StereoModes\";\r\n                        print \"%s\" %stereomodedetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported streoe modes\";\r\n                #calling DS_SetStereoMode to get and set the stereo modes\r\n                tdkTestObj = obj.createTestStep(\'DS_SetStereoMode\');\r\n                stereomode=\"MONO\";\r\n                tdkTestObj.addParameter(\"stereo_mode\",stereomode);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetStereoMode\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the MONO stereo mode\";\r\n                        print \"getstereomode: %s\" %stereomodedetails;\r\n                        #comparing stereo modes before and after setting\r\n                        if stereomode in stereomodedetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the stereo modes are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"SUCCESS: Both the stereo modes are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get the MONO stereo mode\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the MONO Stereo Mode of Audio.\r\nTest Case ID:CT_DS_69.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.				',NULL,3,'				','\0'),(620,16,'DS_SetStereoMode_STEREO_FORMAT_70',85,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_70\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                #calling DS_GetSupportedStereoModes get list of StereoModes.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedStereoModes\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedStereoModes\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list of supported StereoModes\";\r\n                        print \"%s\" %stereomodedetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported streoe modes\";\r\n                #calling DS_SetStereoMode to get and set the stereo modes\r\n                tdkTestObj = obj.createTestStep(\'DS_SetStereoMode\');\r\n                stereomode=\"STEREO\";\r\n                tdkTestObj.addParameter(\"stereo_mode\",stereomode);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetStereoMode\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the STEREO mode\";\r\n                        print \"getstereomode: %s\" %stereomodedetails;\r\n                        #comparing stereo modes before and after setting\r\n                        if stereomode in stereomodedetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the stereo modes are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"SUCCESS: Both the stereo modes are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get the STEREO  mode\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the STEREO Stereo Mode of Audio.\r\nTest Case ID:CT_DS_70.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS				',NULL,3,'				','\0'),(621,16,'DS_SetStereoMode_SURROUND_FORMAT_71',85,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_71\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                #calling DS_GetSupportedStereoModes get list of StereoModes.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedStereoModes\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedStereoModes\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list of supported StereoModes\";\r\n                        print \"%s\" %stereomodedetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported streoe modes\";\r\n                #calling DS_SetStereoMode to get and set the stereo modes\r\n                tdkTestObj = obj.createTestStep(\'DS_SetStereoMode\');\r\n                stereomode=\"SURROUND\";\r\n                tdkTestObj.addParameter(\"stereo_mode\",stereomode);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetStereoMode\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the SURROUND modes\";\r\n                        print \"getstereomode: %s\" %stereomodedetails;\r\n                        #comparing stereo modes before and after setting\r\n                        if stereomode in stereomodedetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the stereo modes are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"SUCCESS: Both the stereo modes are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get the SURROUND mode\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the SURROUND Stereo Mode of Audio.\r\nTest Case ID:CT_DS_71.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS				',NULL,3,'				','\0'),(622,18,'DS_SetStereoMode_UNKNOWN_72',85,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_50\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                #calling DS_GetSupportedStereoModes get list of StereoModes.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedStereoModes\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedStereoModes\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list of supported StereoModes\";\r\n                        print \"%s\" %stereomodedetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported streoe modes\";\r\n                #calling DS_SetStereoMode to get and set the stereo modes\r\n                tdkTestObj = obj.createTestStep(\'DS_SetStereoMode\');\r\n                stereomode=\"UNKNOWN\";\r\n                tdkTestObj.addParameter(\"stereo_mode\",stereomode);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetStereoMode\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully get and set the NONE stereo mode\";\r\n                        print \"getstereomode: %s\" %stereomodedetails;\r\n                        #comparing stereo modes before and after setting\r\n                        if stereomode in stereomodedetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the stereo modes are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"SUCCESS: Both the stereo modes are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set and get the NONE stereo mode\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the UNKNOWN Stereo Mode of Audio.\r\nTest Case ID:CT_DS_72.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS				',NULL,3,'				','\0'),(623,24,'DS_SetStereoMode_INVALID_FORMAT_73',85,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_73\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                #calling DS_GetSupportedStereoModes get list of StereoModes.\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedStereoModes\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedStereoModes\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets the list of supported StereoModes\";\r\n                        print \"%s\" %stereomodedetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get supported streoe modes\";\r\n                #calling DS_SetStereoMode to get and set the stereo modes\r\n                tdkTestObj = obj.createTestStep(\'DS_SetStereoMode\');\r\n                stereomode=\"INVALID\";\r\n                tdkTestObj.addParameter(\"stereo_mode\",stereomode);\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                stereomodedetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetStereoMode\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS : Failed to get and set the Invalid stereo modes\";\r\n                        print \"getstereomode: %s\" %stereomodedetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application succeeded to set and get the Invalid stereo modes\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the INVALID Stereo Mode of Audio.\r\nTest Case ID:CT_DS_73.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS				',NULL,3,'				','\0'),(624,46,'DS_SetDFC_None_ZOOM_test_74',79,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_74\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDFC to get and set the zoom settings \r\n                tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                zoom=\"None\";\r\n                tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dfcdetails = tdkTestObj.getResultDetails();\r\n                setdfc=\"%s\" %zoom;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the zoom settingt as None for the video decvice\";\r\n                        print \"getdfc %s\" %dfcdetails;\r\n                        #comparing the DFC (zoomSettings) before and after setting\r\n                        if setdfc in dfcdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the zoomsettings values are equal\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Get and Set APi\'s are Success But the zoomsettings values are not equal\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get and set the None zoom\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the NONE Zoom Settings of Video Device\r\nTest Case ID : CT_DS_74				',NULL,3,'				','\0'),(625,18,'DS_SetDFC_FULL_ZOOM_test_75',79,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_75\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDFC to get and set the zoom settings \r\n                tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                zoom=\"Full\";\r\n                tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dfcdetails = tdkTestObj.getResultDetails();\r\n                setdfc=\"%s\" %zoom;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the zoom settingts as FULL for the video decvice\";\r\n                        print \"getdfc %s\" %dfcdetails;\r\n                        #comparing the DFC (zoomSettings) before and after setting\r\n                        if setdfc in dfcdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the zoomsettings values are equal\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Get and Set APi\'s are Success But the zoomsettings values are not equal\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get and set the FULL zoom\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the FULL Zoom Settings of Video Device\r\nTest Case ID : CT_DS_75				',NULL,3,'				','\0'),(626,16,'DS_SetDFC_PLATFORM_ZOOM_test_76',79,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_76\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDFC to get and set the zoom settings \r\n                tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                zoom=\"Platform\";\r\n                tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dfcdetails = tdkTestObj.getResultDetails();\r\n                setdfc=\"%s\" %zoom;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the zoom settingts as PLATFORM for the video decvice\";\r\n                        print \"getdfc %s\" %dfcdetails;\r\n                        #comparing the DFC (zoomSettings) before and after setting\r\n                        if setdfc in dfcdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the zoomsettings values are equal\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Get and Set APi\'s are Success But the zoomsettings values are not equal\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get and set the PLATFORM zoom\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the PLATFORM Zoom Settings of Video Device\r\nTest Case ID : CT_DS_76				',NULL,3,'				','\0'),(627,30,'DS_SetDFC_INVALID_ZOOM_test_81',79,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_81\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDFC to get and set the zoom settings \r\n                tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                zoom=\"Invalid\";\r\n                tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dfcdetails = tdkTestObj.getResultDetails();\r\n                setdfc=\"%s\" %zoom;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS : Failed to get and set the zoom settingts as INVALID for the video decvice\";\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"getdfc %s\" %dfcdetails;\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Get and set the INVALID zoom are success\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the INVALID Zoom Settings of Video Device\r\nTest Case ID : CT_DS_81				',NULL,3,'','\0'),(628,19,'DS_Resolution_480i_test_82',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_82\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution as 480i\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"480i\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Requestion resolution are not supported in this box\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 480i Resolution of Video Output Port\r\nTest Case ID : CT_DS_82.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS.	',NULL,3,'				','\0'),(629,18,'DS_Resolution_720p_test_83',72,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_83\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution as 720p\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"720p\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Requested resolution is not supported by this device\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 720p Resolution of Video Output Port\r\nTest Case ID : CT_DS_83.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS		',NULL,3,'				','\0'),(630,21,'DS_Resolution_1080i_test_84',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_84\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution as 1080i\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"1080i\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Requested resolution is not supported by this device\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 1080i Resolution of Video Output Port\r\nTest Case ID : CT_DS_84.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS	',NULL,3,'				','\0'),(631,34,'DS_Resolution_Invalid_port_test_93',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_93\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution with invalid port\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"1080i\";\r\n                tdkTestObj.addParameter(\"resolution\",resolution);\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI8\");\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS:set and get resolution Fails\";\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        #print \"getresolution %s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:set and get resolution success\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Resolution of an invalid Video Output Port\r\nTest Case ID:CT_DS_93.\r\n',NULL,3,'				','\0'),(632,30,'DS_Resolution_Invalid_value_test_94',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_94\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution with invalid value\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"820p\";\r\n                tdkTestObj.addParameter(\"resolution\",resolution);\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI8\");\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS:set and get resolution fails\";\r\n                        print \"getresolution %s\" %resolutiondetails;\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:set and get resolution success\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the invalid value for Resolution of Video Output Port\r\nTest Case ID:CT_DS_94.\r\n				',NULL,3,'				','\0'),(633,18,'DS_SetTime_12HR_FORMAT_41',87,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_41\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetTimeFormat\');\r\n                #setting time format\r\n                timeformat = 0;\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                tdkTestObj.addParameter(\"time_format\",timeformat);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                time_format=\"%s\" %timeformat;\r\n                actualresult = tdkTestObj.getResult();\r\n                textdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetTimeFormat\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the 12 HR timeformat\";\r\n                        print \"getTimeFormat %s\" %textdetails;\r\n                        #comparing the time format before and after setting\r\n                        if time_format in textdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the time formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the time formats are not same\";\r\n                else:\r\n                        print \"FAILURE :Failed to get and set the 12 HR timeformat\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        #Set the module loading status\r\n        print\"Load module failed\";\r\n','ALLOCATED','This test script Sets and gets the 12 Hr Time Format and text in the text display of given Front panel Indicator\r\nTest Case ID : CT_DS_41					',NULL,3,'				','\0'),(634,19,'DS_SetTime_24HR_FORMAT_42',87,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_42\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetTimeFormat\');\r\n                #setting time format\r\n                timeformat = 1;\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                tdkTestObj.addParameter(\"time_format\",timeformat);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                time_format=\"%s\" %timeformat;\r\n                actualresult = tdkTestObj.getResult();\r\n                textdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetTimeFormat\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the 24 HR timeformat\";\r\n                        print \"getTimeFormat %s\" %textdetails;\r\n                        #comparing the time format before and after setting\r\n                        if time_format in textdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the time formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the time formats are not same\";\r\n                else:\r\n                        print \"SUCCESS :Failed to get and set the 24 HR timeformat\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        #Set the module loading status\r\n        print\"Load module failed\";\r\n\r\n','ALLOCATED','This test script Sets and gets the 24 Hr Time Format and text in the text display of given Front panel Indicator\r\nTest Case ID : CT_DS_42				',NULL,3,'				','\0'),(635,34,'DS_SetTime_STRING_FORMAT_43',87,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_43\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetTimeFormat\');\r\n                #setting time format\r\n                timeformat = 2;\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                tdkTestObj.addParameter(\"time_format\",timeformat);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                time_format=\"%s\" %timeformat;\r\n                print \"TimeFormat %s\" %time_format;\r\n                actualresult = tdkTestObj.getResult();\r\n                textdetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetTimeFormat\r\n                if expectedresult in actualresult:\r\n                        #tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets and sets the timeformat as STRING\";\r\n                        print \"getTimeFormat %s\" %textdetails;\r\n                        #comparing the time format before and after setting\r\n                        if time_format in textdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the time formats are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the time formats are not same\";                        \r\n                else:\r\n                        #tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"SUCCESS :Failed to get and set the timeformat as STRING\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        #Set the module loading status\r\n        print\"Load module failed\";\r\n\r\n','ALLOCATED','This test script Sets and gets the STRING Time Format  display of given Front panel Indicator\r\nTest Case ID : CT_DS_43				',NULL,3,'				','\0'),(636,26,'DS_SetTime_INVALID_FORMAT_44',87,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_44\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetTimeFormat\');\r\n                #setting time format\r\n                timeformat = 6;\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                tdkTestObj.addParameter(\"time_format\",timeformat);\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                time_format=\"%s\" %timeformat;\r\n                actualresult = tdkTestObj.getResult();\r\n                textdetails = tdkTestObj.getResultDetails();\r\n                print \"getTimeFormat %s\" %textdetails;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetTimeFormat\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Failed to get and set the Invalid timeformat\";\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"getTimeFormat %s\" %textdetails;\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        \r\n                        print \"FAILURE :Succeeded to get and set the invalid timeformat\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        #Set the module loading status\r\n        print\"Load module failed\";\r\n','ALLOCATED','This test script Sets and gets the Invalid Time Format and text in the text display of given Front panel Indicator\r\nTest Case ID : CT_DS_44				',NULL,3,'				','\0'),(637,14,'DS_SetTextDisplay_test_46',86,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_46\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetText to set the TEXT in the FP\r\n                tdkTestObj = obj.createTestStep(\'DS_SetText\');\r\n                tdkTestObj.addParameter(\"text_display\",\"Hello world\");\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetText\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully Sets the Text in text panel\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application failed to set the text in FP\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the valid text in the text display of given Front panel Indicator\r\nTest Case ID : CT_DS_46					',NULL,3,'				','\0'),(638,26,'DS_SetTextDisplay_Invalid_test_47',86,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_47\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetText to set the TEXT in the FP\r\n                tdkTestObj = obj.createTestStep(\'DS_SetText\');\r\n                tdkTestObj.addParameter(\"text_display\",\"*$&&&@*\");\r\n                tdkTestObj.addParameter(\"text\",\"Text\");\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_SetText\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application failed to Set the Text in text panel with invalid value\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application successfully sets the text in FP with invalid value\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");                                       ','ALLOCATED','This test script Sets and gets the invalid text in the text display of given Front panel Indicator\r\nTest Case ID : CT_DS_47 NOTE: This test fails due to bug in DS component.					',NULL,3,'				','\0'),(639,32,'DS_SetPowerMode_ON_test_95',82,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_95\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetPowerMode to set the power mode of STB\r\n                tdkTestObj = obj.createTestStep(\'DS_SetPowerMode\');\r\n                powermode=0;\r\n                tdkTestObj.addParameter(\"new_power_state\",powermode);\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                powerdetails = tdkTestObj.getResultDetails();\r\n                setpower = \"%d\" %powermode;\r\n                #Check for SUCCESS return value of DS_SetPowerMode\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully changed the state of STB as ON\";\r\n                        print \"getpower: %s\"%powerdetails;\r\n                else:\r\n                        print \"FAILURE :Application failed to change the state of STB as ON\";  \r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the Power Mode to ON\r\nTest Case ID:CT_DS_95.\r\n				',NULL,3,'','\0'),(640,25,'DS_SetPowerMode_OFF_test_96',82,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_96\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetPowerMode to set the power mode of STB\r\n                tdkTestObj = obj.createTestStep(\'DS_SetPowerMode\');\r\n                powermode=1;\r\n                tdkTestObj.addParameter(\"new_power_state\",powermode);\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                powerdetails = tdkTestObj.getResultDetails();\r\n                setpower = \"%d\" %powermode;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetPowerMode\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully changed the state of STB to OFF\";\r\n                        print \"getpower: %s\"%powerdetails;\r\n                        #comparing power state before and after setting\r\n                        if setpower in powerdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE :Application failed to change the  power mode as OFF\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the Power Mode to OFF\r\nTest Case ID:CT_DS_96.				',NULL,3,'				','\0'),(641,22,'DS_SetPowerMode_STANDBY_test_97',82,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_97\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetPowerMode to set the power mode of STB\r\n                tdkTestObj = obj.createTestStep(\'DS_SetPowerMode\');\r\n                powermode=2;\r\n                tdkTestObj.addParameter(\"new_power_state\",powermode);\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                powerdetails = tdkTestObj.getResultDetails();\r\n                setpower = \"%d\" %powermode;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetPowerMode\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully changed the state of STB as STANDBY\";\r\n                        print \"getpower: %s\"%powerdetails;\r\n                        #comparing power state before and after setting\r\n                        if setpower in powerdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE :Application failed to change the power mode as STANDBY\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the Power Mode to STANDBY\r\nTest Case ID:CT_DS_97.				',NULL,3,'				','\0'),(642,28,'DS_SetPowerMode_Invalid_test_98',82,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_98\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetPowerMode to set the power mode of STB\r\n                tdkTestObj = obj.createTestStep(\'DS_SetPowerMode\');\r\n                powermode=8;\r\n                tdkTestObj.addParameter(\"new_power_state\",powermode);\r\n                expectedresult=\"FAILURE\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                powerdetails = tdkTestObj.getResultDetails();\r\n                setpower = \"%d\" %powermode;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetPowerMode\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Failed to change Invalid state of STB\";\r\n                        print \"getpower: %s\"%powerdetails;\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application succeeded in changing Invalid power mode\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the Power Mode to an Invalid value\r\nTest Case ID:CT_DS_98.	NOTE: This test fails due tio bug in DS component.			',NULL,3,'				','\0');
INSERT INTO `script` VALUES (643,31,'DS_SetPowerMode_STRESS_test_99',82,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_99\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i=0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        #calling DS_SetPowerMode to set the power mode of STB\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetPowerMode\');\r\n                        powermode=1;\r\n                        tdkTestObj.addParameter(\"new_power_state\",powermode);\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        powerdetails = tdkTestObj.getResultDetails();\r\n                        setpower = \"%d\" %powermode;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetPowerMode\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS :Application successfully changed the state of STB\";\r\n                                print \"getpower: %s\"%powerdetails;\r\n                        else:\r\n                                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                 print \"****************%d\" %i;\r\n                        time.sleep(100/1000);\r\n                        #calling DS_SetPowerMode to set the power mode of STB\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetPowerMode\');\r\n                        powermode = 0;\r\n                        tdkTestObj.addParameter(\"new_power_state\",powermode);\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        powerdetails = tdkTestObj.getResultDetails();\r\n                        setpower = \"%d\" %powermode;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetPowerMode\r\n                        if expectedresult in actualresult:\r\n                                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                 print \"SUCCESS :Application successfully changed the state of STB\";\r\n                                 print \"getpower: %s\"%powerdetails;\r\n\r\n                        else:\r\n                                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                 print \"****************%d\" %i;\r\n                                 print \"FAILURE :Application failed to change the power mode\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test is to successfully set and get the power mode as ON and OFF continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_99',NULL,5,'				','\0'),(644,31,'DS_SetBrightness_STRESS_test_100',76,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_100\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_GetIndicators\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                indicatordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetIndicators\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of Indicators\";\r\n                        print \"Indicators:%s\" %indicatordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the Indicators list\";\r\n                i=0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetBrightness\');\r\n                        #setting brightness parameter value\r\n                        brightness = 5;\r\n                        indicator_name = \"Power\";\r\n                        tdkTestObj.addParameter(\"brightness\",brightness);\r\n                        tdkTestObj.addParameter(\"indicator_name\",indicator_name);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        getBrightness = tdkTestObj.getResultDetails();\r\n                        setBrightness = \"%s\" %brightness;\r\n                        print \"getBrightness:%s\" %getBrightness;\r\n                        #Check for SUCCESS return value of DS_SetBrightness\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the Brightness\";\r\n                                #comparing the brightness value before and after setting\r\n                                if setBrightness in getBrightness :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the Brightness are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the Brightness are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"Failure: Failed to get and set Brightness for LED\";\r\n                        time.sleep(100/1000);\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetBrightness\');\r\n                        #setting brightness parameter value\r\n                        brightness = 10;\r\n                        indicator_name = \"Power\";\r\n                        tdkTestObj.addParameter(\"brightness\",brightness);\r\n                        tdkTestObj.addParameter(\"indicator_name\",indicator_name);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        getBrightness = tdkTestObj.getResultDetails();\r\n                        setBrightness = \"%s\" %brightness;\r\n                        print \"getBrightness:%s\" %getBrightness;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetBrightness\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the Brightness\";\r\n                                #comparing the brightness value before and after setting\r\n                                if setBrightness in getBrightness :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the Brightness are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the Brightness are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"Failure: Failed to get and set Brightness for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n                print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test is to successfully change brightness value of the front panel indicator continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_100				',NULL,4,'				','\0'),(645,23,'DS_SetColor_STRESS_test_101',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_101\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                        #setting color parameter value\r\n                        color = 0;\r\n                        tdkTestObj.addParameter(\"color\",color);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        colordetails = tdkTestObj.getResultDetails();\r\n                        setColor = \"%s\" %color;\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the color\";\r\n                                print \"getColor %s\" %colordetails;\r\n                                #comparing the color before and after setting\r\n                                if setColor in colordetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the colors are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the colors are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"Failure: Failed to get and set color for LED\";\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                        #setting color parameter value\r\n                        color = 1;\r\n                        tdkTestObj.addParameter(\"color\",color);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        colordetails = tdkTestObj.getResultDetails();\r\n                        setColor = \"%s\" %color;\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the color\";\r\n                                print \"getColor %s\" %colordetails;\r\n                                #comparing the color before and after setting\r\n                                if setColor in colordetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the colors are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the colors are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"Failure: Failed to get and set color for LED\";\r\n                time.sleep(100/1000);\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test is to successfully change Color of the front panel indicator continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_101				',NULL,4,'				','\0'),(646,19,'DS_SetBlink_STRESS_test_102',75,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_102\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        #calling Device Settings - setBlink and getBlink APIs\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetBlink\');\r\n                        #setting scroll class parameters values\r\n                        blink_interval = 1;\r\n                        blink_iteration = 2;\r\n                        tdkTestObj.addParameter(\"blink_interval\",blink_interval);\r\n                        tdkTestObj.addParameter(\"blink_iteration\",blink_iteration);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        blinkdetails = tdkTestObj.getResultDetails();\r\n                        blinkinterval=\"%s\" %blink_interval;\r\n                        blinkiteration=\"%s\" %blink_iteration;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetBlink\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the blink rate\";\r\n                                print \"getblink %s\" %blinkdetails;\r\n                                #comparing the blink paramaters before and after setting\r\n                                if ((blinkinterval in blinkdetails)and(blinkiteration in blinkdetails)):\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the blink rates are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the blink rates are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"Failure: Failed to get and set blink rate for LED\";\r\n                        time.sleep(100/1000);\r\n                        #calling Device Settings - setBlink and getBlink APIs\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetBlink\');\r\n                        #setting scroll class parameters values\r\n                        blink_interval = 5;\r\n                        blink_iteration = 6;\r\n                        tdkTestObj.addParameter(\"blink_interval\",blink_interval);\r\n                        tdkTestObj.addParameter(\"blink_iteration\",blink_iteration);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        blinkdetails = tdkTestObj.getResultDetails();\r\n                        blinkinterval=\"%s\" %blink_interval;\r\n                        blinkiteration=\"%s\" %blink_iteration;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetBlink\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the blink rate\";\r\n                                print \"getblink %s\" %blinkdetails;\r\n                                #comparing the blink paramaters before and after setting\r\n                                if ((blinkinterval in blinkdetails)and(blinkiteration in blinkdetails)):\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the blink rates are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the blink rates are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"Failure: Failed to get and set blink rate for LED\";\r\n\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test is to successfully change blink value of the front panel indicator continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_102				',NULL,4,'				','\0'),(647,30,'DS_SetTime_FORMAT_STRESS_test_103',87,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_103\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetTimeFormat\');\r\n                        #setting time format\r\n                        timeformat = 0;\r\n                        tdkTestObj.addParameter(\"text\",\"Text\");\r\n                        tdkTestObj.addParameter(\"time_format\",timeformat);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        time_format=\"%s\" %timeformat;\r\n                        actualresult = tdkTestObj.getResult();\r\n                        textdetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetTimeFormat\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the timeformat\";\r\n                                print \"getTimeFormat %s\" %textdetails;\r\n                                #comparing the time format before and after setting\r\n                                if time_format in textdetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the time formats are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the time formats are not same\";\r\n                        else:\r\n                                print \"FAILURE :Failed to get and set the timeformat\";\r\n                                print \"****************%d\" %i;\r\n                        time.sleep(100/1000);\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetTimeFormat\');\r\n                        #setting time format\r\n                        timeformat = 1;\r\n                        tdkTestObj.addParameter(\"text\",\"Text\");\r\n                        tdkTestObj.addParameter(\"time_format\",timeformat);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        time_format=\"%s\" %timeformat;\r\n                        actualresult = tdkTestObj.getResult();\r\n                        textdetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetTimeFormat\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the timeformat\";\r\n                                print \"getTimeFormat %s\" %textdetails;\r\n                                #comparing the time format before and after setting\r\n                                if time_format in textdetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the time formats are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the time formats are not same\";\r\n                        else:\r\n                                print \"FAILURE :Failed to get and set the timeformat\";\r\n                                print \"****************%d\" %i;\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n                print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        #Set the module loading status\r\n        print\"Load module failed\";\r\n','ALLOCATED','This test is to successfully change Time format of the front panel indicator continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_103				',NULL,10,'				','\0'),(648,18,'DS_SetText_STRESS_test_104',86,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_104\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i = 0;\r\n                for i in range(0,5):\r\n                        print \"****************%d\" %i;\r\n                        #calling DS_SetText to set the TEXT in the FP\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetText\');\r\n                        tdkTestObj.addParameter(\"text_display\",\"Hello world\");\r\n                        tdkTestObj.addParameter(\"text\",\"Text\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetText\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS :Application successfully Sets the Text in text panel\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"FAILURE :Application failed to set the text in FP\";\r\n                        time.sleep(100/1000);\r\n                        #calling DS_SetText to set the TEXT in the FP\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetText\');\r\n                        tdkTestObj.addParameter(\"text_display\",\"ANYWORD\");\r\n                        tdkTestObj.addParameter(\"text\",\"Text\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetText\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS :Application successfully Sets the Text in text panel\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"FAILURE :Application failed to set the text in FP\";\r\n\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test is to successfully change text in the Text Display of the front panel indicator continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_104				',NULL,3,'				','\0'),(649,28,'DS_SetScroll_STRESS_test_105',84,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_105\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        #calling Device Settings - setScroll and getScroll APIs\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetScroll\');\r\n                        #setting scroll class parameters\r\n                        viteration=2;\r\n                        hiteration=4;\r\n                        hold_duration=6;\r\n                        tdkTestObj.addParameter(\"viteration\",viteration);\r\n                        tdkTestObj.addParameter(\"hiteration\",hiteration);\r\n                        tdkTestObj.addParameter(\"hold_duration\",hold_duration);\r\n                        tdkTestObj.addParameter(\"text\",\"Text\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        scrolldetails = tdkTestObj.getResultDetails();\r\n                        str_viteration=\"%s\" %viteration;\r\n                        str_hiteration=\"%s\" %hiteration;\r\n                        str_hold_duration=\"%s\" %hold_duration;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetScroll\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the scroll\";\r\n                                print \"getScroll %s\" %scrolldetails;\r\n                                #comparing the scroll parameters before and after setting\r\n                                if ((str_viteration in scrolldetails)and(str_hiteration in scrolldetails)and(str_hold_duration in scrolldetails)):\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the scroll details are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"****************%d\" %i;\r\n                                        print \"FAILURE: Both the scroll details are not same\";\r\n                        time.sleep(100/1000);\r\n                        #calling Device Settings - setScroll and getScroll APIs\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetScroll\');\r\n                        #setting scroll class parameters\r\n                        viteration=5;\r\n                        hiteration=6;\r\n                        hold_duration=10;\r\n                        tdkTestObj.addParameter(\"viteration\",viteration);\r\n                        tdkTestObj.addParameter(\"hiteration\",hiteration);\r\n                        tdkTestObj.addParameter(\"hold_duration\",hold_duration);\r\n                        tdkTestObj.addParameter(\"text\",\"Text\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        scrolldetails = tdkTestObj.getResultDetails();\r\n                        str_viteration=\"%s\" %viteration;\r\n                        str_hiteration=\"%s\" %hiteration;\r\n                        str_hold_duration=\"%s\" %hold_duration;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetScroll\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the scroll\";\r\n                                print \"getScroll %s\" %scrolldetails;\r\n                                #comparing the scroll parameters before and after setting\r\n                                if ((str_viteration in scrolldetails)and(str_hiteration in scrolldetails)and(str_hold_duration in scrolldetails)):\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the scroll details are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n                                        print \"FAILURE: Both the scroll details are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"Failure: Failed to get and set scroll details\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n                print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test is to successfully change scroll settings value of the front panel continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_105				',NULL,3,'				','\0'),(650,25,'DS_SetAudioLevel_STRESS_test_106',110,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_106\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        #calling Device Settings - setLevel and getLevel APIs\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetAudioLevel\');\r\n                        #setting audio level parameter\r\n                        audiolevel=4.32;\r\n                        tdkTestObj.addParameter(\"audio_level\",audiolevel);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        leveldetails = tdkTestObj.getResultDetails();\r\n                        setlevel = \"%s\" %audiolevel;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetLevel\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the audio level\";\r\n                                #print \"setlevel %s\" %setlevel;\r\n                                print \"getlevel %s\" %leveldetails;\r\n                                #comparing audio level before and after setting\r\n                                if setlevel in leveldetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the audio levels are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the audio levels are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"Failure: Failed to get and set audio level\";\r\n                        time.sleep(100/1000);\r\n                        #calling Device Settings - setLevel and getLevel APIs\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetAudioLevel\');\r\n                        #setting audio level parameter\r\n                        audiolevel=6.32;\r\n                        tdkTestObj.addParameter(\"audio_level\",audiolevel);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        leveldetails = tdkTestObj.getResultDetails();\r\n                        setlevel = \"%s\" %audiolevel;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetLevel\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the audio level\";\r\n                                #print \"setlevel %s\" %setlevel;\r\n                                print \"getlevel %s\" %leveldetails;\r\n                                #comparing audio level before and after setting\r\n                                if setlevel in leveldetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the audio levels are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the audio levels are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"Failure: Failed to get and set audio level\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test is to successfully change Audio level continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_106				',NULL,8,'				','\0'),(651,18,'DS_SetDb_STRESS_test_107',109,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_107\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        #calling DS_SetDB to set the audio DB level for the given audio port\r\n                        dblevel=112.00;\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetAudioDB\');\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        tdkTestObj.addParameter(\"db_level\",dblevel);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        dbdetails = tdkTestObj.getResultDetails();\r\n                        setdb=\"%s\" %dblevel;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetDB\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully sets and gets DB level\";\r\n                                print \"getdb %s\" %dbdetails.upper();\r\n                                #comparing audio DB before anf after setting\r\n                                if setdb in dbdetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"Both the audio dbs are same \";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"Both the audio dbs are not same \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE :Application failed to set and get DB level \";\r\n                                print \"****************%d\" %i;\r\n                        time.sleep(100/1000);\r\n                        #calling DS_SetDB to set the audio DB level for the given audio port\r\n                        dblevel=140.000;\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetAudioDB\');\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        tdkTestObj.addParameter(\"db_level\",dblevel);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        dbdetails = tdkTestObj.getResultDetails();\r\n                        setdb=\"%s\" %dblevel;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetDB\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully sets and gets DB level\";\r\n                                print \"getdb %s\" %dbdetails.upper();\r\n                                #comparing audio DB before anf after setting\r\n                                if setdb in dbdetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"Both the audio dbs are same \";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"Both the audio dbs are not same \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE :Application failed to set and get DB level \";\r\n                                print \"****************%d\" %i;\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test is to successfully change Audio DB level continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_107				',NULL,3,'				','\0'),(652,27,'DS_SetCompression_STRESS_test_109',78,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_109\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        #calling DS_SetCompression to get and set the compression\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetCompression\');\r\n                        compression=\"MEDIUM\";\r\n                        tdkTestObj.addParameter(\"compression_format\",compression);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        compressiondetails = tdkTestObj.getResultDetails();\r\n                        setcompression = \"Compression format:%s\" %compression;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetCompression\r\n                        print \"compression:%s\" %compressiondetails;\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully get and set the compression\";\r\n                                print \"setcompression: %s\" %setcompression;\r\n                                print \"getcompression: %s\" %compressiondetails;\r\n                                #comparing compression before and after setting\r\n                                if compression in compressiondetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the compression formats are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the compression formats are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE :Application failed to set and get the compression formats\";\r\n                                print \"****************%d\" %i;\r\n                        time.sleep(100/1000);\r\n                        #calling DS_SetCompression to get and set the compression\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetCompression\');\r\n                        compression=\"HEAVY\";\r\n                        tdkTestObj.addParameter(\"compression_format\",compression);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        compressiondetails = tdkTestObj.getResultDetails();\r\n                        setcompression = \"Compression format:%s\" %compression;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetCompression\r\n                        print \"compression:%s\" %compressiondetails;\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully get and set the compression\";\r\n                                print \"setcompression: %s\" %setcompression;\r\n                                print \"getcompression: %s\" %compressiondetails;\r\n                                #comparing compression before and after setting\r\n                                if compression in compressiondetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the compression formats are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the compression formats are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE :Application failed to set and get the compression formats\";\r\n                                print \"****************%d\" %i;\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test is to successfully change the Compression format  continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_109				',NULL,4,'				','\0'),(653,18,'DS_SetEncoding_STRESS_test_108',81,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_108\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        #calling DS_SetEncoding to get and set the encoding\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetEncoding\');\r\n                        encoding=\"AC3\";\r\n                        tdkTestObj.addParameter(\"encoding_format\",encoding);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        encodingdetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetEncoding\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully get and set the encoding\";\r\n                                print \"getencoding: %s\" %encodingdetails;\r\n                                # comparing the encoding detail before and after setting\r\n                                if encoding in encodingdetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the encoding formats are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the encoding formats are not same\";\r\n                                        print \"****************%d\" %i;\r\n                        time.sleep(100/1000)\r\n                        #calling DS_SetEncoding to get and set the encoding\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetEncoding\');\r\n                        encoding=\"PCM\";\r\n                        tdkTestObj.addParameter(\"encoding_format\",encoding);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        encodingdetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetEncoding\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully get and set the encoding\";\r\n                                print \"getencoding: %s\" %encodingdetails;\r\n                                # comparing the encoding detail before and after setting\r\n                                if encoding in encodingdetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the encoding formats are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the encoding formats are not same\";\r\n                                        print \"****************%d\" %i;\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                #tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE :Application failed to set and get the encoding formats\";\r\n                print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test is to successfully change the Encoding format  continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_108				',NULL,3,'				','\0'),(654,24,'DS_SetStereoMode_STRESS_test_110',85,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_110\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                #calling DS_GetSupportedStereoModes get list of StereoModes.\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        #calling DS_SetStereoMode to get and set the stereo modes\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetStereoMode\');\r\n                        stereomode=\"SURROUND\";\r\n                        tdkTestObj.addParameter(\"stereo_mode\",stereomode);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        stereomodedetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetStereoMode\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully get and set the stereo modes\";\r\n                                print \"getstereomode: %s\" %stereomodedetails;\r\n                                #comparing stereo modes before and after setting\r\n                                if stereomode in stereomodedetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the stereo modes are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"SUCCESS: Both the stereo modes are not same\";\r\n                        else:           \r\n                                print \"****************%d\" %i;\r\n                                print \"FAILURE :Application failed to set and get the stereo modes\";\r\n                        time.sleep(100/1000);\r\n                        #calling DS_SetStereoMode to get and set the stereo modes\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetStereoMode\');\r\n                        stereomode=\"STEREO\";\r\n                        tdkTestObj.addParameter(\"stereo_mode\",stereomode);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        stereomodedetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetStereoMode\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully get and set the stereo modes\";\r\n                                print \"getstereomode: %s\" %stereomodedetails;\r\n                                #comparing stereo modes before and after setting\r\n                                if stereomode in stereomodedetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the stereo modes are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"SUCCESS: Both the stereo modes are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"FAILURE :Application failed to set and get the stereo modes\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test is to successfully change the Stereo Mode continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_110				',NULL,3,'				','\0'),(655,16,'DS_SetDFC_STRESS_test_111',79,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_111\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        #calling DS_SetDFC to get and set the zoom settings\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                        zoom=\"Full\";\r\n                        tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        dfcdetails = tdkTestObj.getResultDetails();\r\n                        setdfc=\"%s\" %zoom;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the zoom settingts for the video decvice\";\r\n                                print \"getdfc %s\" %dfcdetails;\r\n                                #comparing the DFC (zoomSettings) before and after setting\r\n                                if setdfc in dfcdetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the zoomsettings values are equal\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Get and Set APi\'s are Success But the zoomsettings values are not equal\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"FAILURE :Failed to get and set the zoom settings\";\r\n                        time.sleep(100/1000);\r\n                       #calling DS_SetDFC to get and set the zoom settings\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                        zoom=\"Platform\";\r\n                        tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        dfcdetails = tdkTestObj.getResultDetails();\r\n                        setdfc=\"%s\" %zoom;\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS :Application successfully gets and sets the zoom settingts for the video decvice\";\r\n                                print \"getdfc %s\" %dfcdetails;\r\n                                #comparing the DFC (zoomSettings) before and after setting\r\n                                if setdfc in dfcdetails:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the zoomsettings values are equal\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the zoomsettings values are not equal\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"FAILURE :Failed to get and set the zoom settings\";\r\n\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test is to successfully change the Zoom Settings continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_111				',NULL,3,'				','\0'),(656,27,'DS_Resolution_STRESS_test_112',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_112\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                i = 0;\r\n                for i in range(0,100):\r\n                        print \"****************%d\" %i;\r\n                        #calling DS_SetResolution to set and get the display resolutions\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                        resolution=\"480i\";\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                        time.sleep(100/1000);\r\n                        #calling DS_SetResolution to set and get the display resolutions\r\n                        tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                        resolution=\"720p\";\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"****************%d\" %i;\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test is to successfully change the Resolution format  continuously for every 100ms repeatedly for x times.				\r\nTest case ID : CT_DS_112				',NULL,4,'				','\0'),(657,20,'DS_SetColor_invalid_test_37',77,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_37\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                tdkTestObj = obj.createTestStep(\'DS_GetSupportedColors\');\r\n                tdkTestObj.addParameter(\"indicator_name\",\"Message\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_GetSupportedColors\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported colors\";\r\n                        print \"%s\" %colordetails\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the color list\";\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                print \"0-Blue\";\r\n                print \"1-Green\";\r\n                print \"2-Red\";\r\n                print \"3-Yellow\";\r\n                print \"4-Orange\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetColor\');\r\n                #setting color parameter value\r\n                color = 10;\r\n                indicator = \"Power\";\r\n                tdkTestObj.addParameter(\"indicator_name\",indicator);\r\n                tdkTestObj.addParameter(\"color\",color);\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                colordetails = tdkTestObj.getResultDetails();\r\n                setColor = \"%s\" %color;\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Failed to get and set the invalid color\";\r\n                        print \"getColor %s\" %colordetails;\r\n                        #comparing the color before and after setting\r\n                        if setColor in colordetails :\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the colors are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the colors are same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Application Successfully gets and sets invalid color for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the Invalid Color for the Front panel Indicator(Negative Scenario)\r\nTest Case ID : CT_DS_37. NOTE: This test script cause the DS agent crash.				',NULL,3,'				','\0'),(658,20,'DS_SetBlink_outofrange_test_40',75,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_40\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize \r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling Device Settings - setBlink and getBlink APIs with value out of range\r\n                tdkTestObj = obj.createTestStep(\'DS_SetBlink\');\r\n                # setting scroll class parameters values\r\n                blink_interval = 2147483649;\r\n                blink_iteration = 2147483649;\r\n                tdkTestObj.addParameter(\"blink_interval\",blink_interval);\r\n                tdkTestObj.addParameter(\"blink_iteration\",blink_iteration);\r\n                expectedresult=\"FAILURE\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                blinkdetails = tdkTestObj.getResultDetails();\r\n                blinkinterval=\"%s\" %blink_interval;\r\n                blinkiteration=\"%s\" %blink_iteration;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetBlink\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Failed to get and set the blink rate\";\r\n                        print \"getblink %s\" %blinkdetails;\r\n                        #comparing the blink paramaters before and after setting\r\n                        if ((blinkinterval in blinkdetails)and(blinkiteration in blinkdetails)):\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the blink rates are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Both the blink rates are same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure: Application successfully gets and sets blink rate for LED\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API \r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize \r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the out of range value for blink feature of given Front panel Indicator\r\nTest Case ID : CT_DS_40\r\nAgent Crash',NULL,3,'				','\0'),(659,42,'DS_SetTime_INVALID_45',80,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_45\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                tdkTestObj = obj.createTestStep(\'DS_SetTime\');\r\n                #setting time \r\n                hrs = 30;\r\n                mins = 65;\r\n                tdkTestObj.addParameter(\"time_hrs\",hrs);\r\n                tdkTestObj.addParameter(\"time_mins\",mins);\r\n                expectedresult=\"FAILURE\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #time=\"%s\" %time;\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for FAILURE return value of DS_SetTime\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Failed to get and set the Invalid time\";\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Application successfully gets and sets the Invalid time\";    \r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        #Set the module loading status\r\n        print\"Load module failed\";\r\n','ALLOCATED','This test script Sets and gets an Invalid Time in the text display of given Front panel Indicator\r\nTest Case ID : CT_DS_45  NOTE: This test fails due to bug in DS component.							',NULL,3,'				','\0'),(660,15,'DS_Resolution_480p_test_85',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_85\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution as 480p\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"480p\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Requested resolution is not supported by this device\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 480p Resolution of Video Output Port\r\nTest Case ID : CT_DS_85.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS		',NULL,3,'				','\0'),(661,13,'DS_Resolution_576p50_test_86',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_86\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution as 480i\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"576p50\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Requestion resoultion are not supported by this device\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 576p50 Resolution of Video Output Port\r\nTest Case ID : CT_DS_86.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS',NULL,3,'				','\0'),(662,13,'DS_Resolution_720p50_test_87',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_87\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"720p50\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Requested resolution is not supported by this device\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 720p50 Resolution of Video Output Port\r\nTest Case ID : CT_DS_87.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS',NULL,3,'				','\0'),(663,18,'DS_Resolution_1080p24_test_88',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_88\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution as 1080p24\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"1080p24\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:set and get resolution fails\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 1080p24 Resolution of Video Output Port\r\nTest Case ID:CT_DS_88.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS	',NULL,3,'This resolution format is not supported 				',''),(664,15,'DS_Resolution_1080p_test_89',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_89\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution as 1080p\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"1080p\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Requested resolution is not supported by this device \";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 1080p Resolution of Video Output Port\r\nTest Case ID:CT_DS_89.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS			',NULL,3,'This resolution format is not supported				','\0'),(665,13,'DS_Resolution_1080i50_test_90',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_90\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution as 1080i50\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"1080i50\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Requested resolution are not supported by this device\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 1080i50 Resolution of Video Output Port\r\nTest Case ID:CT_DS_90.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS	',NULL,3,'				','\0'),(667,17,'DS_Resolution_1080p30_test_91',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_91\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution as 1080p30\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"1080p30\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Requested resolution is not supported by this device\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 1080p30 Resolution of Video Output Port\r\nTest Case ID:CT_DS_91.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS	',NULL,3,'				','\0'),(668,15,'DS_Resolution_1080p60_test_92',83,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_92\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_Resolution get list of supported resolutions and the default resolution\r\n                tdkTestObj = obj.createTestStep(\'DS_Resolution\');\r\n                tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                resolutiondetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_Resolution\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully gets the list of supported and default resolutions\";\r\n                        print \"%s\" %resolutiondetails;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get the list of supported resolutions\";\r\n                #calling DS_SetResolution to set and get the display resolution as 480i\r\n                tdkTestObj = obj.createTestStep(\'DS_SetResolution\');\r\n                resolution=\"1080p60\";\r\n                if resolution in resolutiondetails:\r\n                        tdkTestObj.addParameter(\"resolution\",resolution);\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        resolutiondetails = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_SetResolution\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS:set and get resolution Success\";\r\n                                print \"getresolution %s\" %resolutiondetails;\r\n                                #comparing the resolution before and after setting\r\n                                if resolution in resolutiondetails :\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Both the resolutions are same\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Both the resolutions are not same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:set and get resolution fails\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Requested resolution is not supported by this device\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script Sets and gets the 1080p60 Resolution of Video Output Port\r\nTest Case ID:CT_DS_92.\r\nNote:This script will return duplicates, If running second time without restarting agent. Agent process may lead to crash/restart.This is an issue with DS	',NULL,3,'				','\0'),(669,12,'DS_SetDFC_CCO_ZOOM_test_77',79,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_77\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDFC to get and set the zoom settings \r\n                tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                zoom=\"CCO\";\r\n                tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dfcdetails = tdkTestObj.getResultDetails();\r\n                setdfc=\"%s\" %zoom;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the zoom settingt as CCO for the video decvice\";\r\n                        print \"getdfc %s\" %dfcdetails;\r\n                        #comparing the DFC (zoomSettings) before and after setting\r\n                        if setdfc in dfcdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the zoomsettings values are equal\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Get and Set APi\'s are Success But the zoomsettings values are not equal\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get and set the CCO zoom\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the CCO Zoom Settings of Video Device\r\nTest Case ID : CT_DS_77				',NULL,3,'This Zoom type is not supported				',''),(670,14,'DS_SetDFC_Zoom16x9_test_79',79,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_79\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDFC to get and set the zoom settings \r\n                tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                zoom=\"Zoom 16x9\";\r\n                tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dfcdetails = tdkTestObj.getResultDetails();\r\n                setdfc=\"%s\" %zoom;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the zoom settingt as Zoom 16x9 for the video decvice\";\r\n                        print \"getdfc %s\" %dfcdetails;\r\n                        #comparing the DFC (zoomSettings) before and after setting\r\n                        if setdfc in dfcdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the zoomsettings values are equal\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Get and Set APi\'s are Success But the zoomsettings values are not equal\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get and set the Zoom 16x9 zoom\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Zoom 16x9 Zoom Settings of Video Device\r\nTest Case ID : CT_DS_79				',NULL,3,'This Zoom type is not supported				',''),(671,14,'DS_SetDFC_Pillarbox4x3_ZOOM_test_80',79,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_80\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDFC to get and set the zoom settings \r\n                tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                zoom=\"Pillarbox 4x3\";\r\n                tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dfcdetails = tdkTestObj.getResultDetails();\r\n                setdfc=\"%s\" %zoom;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the zoom settingt as Pillarbox 4x3 for the video decvice\";\r\n                        print \"getdfc %s\" %dfcdetails;\r\n                        #comparing the DFC (zoomSettings) before and after setting\r\n                        if setdfc in dfcdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the zoomsettings values are equal\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Get and Set APi\'s are Success But the zoomsettings values are not equal\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get and set the Pillarbox 4x3 zoom\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the Pillarbox4x3 Zoom Settings of Video Device\r\nTest Case ID : CT_DS_80			',NULL,3,'This Zoom type is not supported				',''),(672,27,'DS_GetDisplayDetails_Reboot_test_113',55,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_113\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_IsDisplayConnectedStatus function to check for display connection status\r\n                tdkTestObj = obj.createTestStep(\'DS_IsDisplayConnectedStatus\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                displaydetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_IsDisplayConnectedStatus\r\n                if (expectedresult in actualresult) and (\"TRUE\" in displaydetails):\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS:Display connection status verified\";\r\n                        #calling DS_GetDisplayDetails to get the\r\n                        tdkTestObj = obj.createTestStep(\'DS_DisplayDetails\');\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        displaydetailsBefore = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_GetDisplayDetails\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application list the details of display device\";\r\n                                #printing list of device details\r\n                                print displaydetailsBefore;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:Application fails to display the details of display device\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:\'vPort.isDisplayConnected\' API returns success but the display device is not connected with STB hence this test scenario fails.\";\r\n        obj.initiateReboot();\r\n        #------------------After Reboot----------#\r\n        print \"#------------------After Reboot----------#\";\r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_IsDisplayConnectedStatus function to check for display connection status\r\n                tdkTestObj = obj.createTestStep(\'DS_IsDisplayConnectedStatus\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                displaydetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_IsDisplayConnectedStatus\r\n                if (expectedresult in actualresult) and (\"TRUE\" in displaydetails):\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS:Display connection status verified\";\r\n                        #calling DS_GetDisplayDetails to get the\r\n                        tdkTestObj = obj.createTestStep(\'DS_DisplayDetails\');\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        displaydetailsAfter = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_GetDisplayDetails\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS: Application list the details of display device\";\r\n                                if displaydetailsAfter == displaydetailsBefore:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"Success: The display list are same before and after rebooting the device\";\r\n                                        #printing list of device details\r\n                                        print displaydetailsAfter;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: The display list are not same before and after rebooting the device\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:Application fails to display the details of display device\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:\'vPort.isDisplayConnected\' API returns success but the display device is not connected with STB hence this test scenario fails.\";\r\n\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script compares the display details of Video Output Port before and after rebooting the STB\r\nTest Case ID : CT_DS_113				',NULL,10,'				','\0'),(673,10,'DS_SetDFC_PanScan_ZOOM_test_78',79,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_52\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_SetDFC to get and set the zoom settings \r\n                tdkTestObj = obj.createTestStep(\'DS_SetDFC\');\r\n                zoom=\"PanScan\";\r\n                tdkTestObj.addParameter(\"zoom_setting\",zoom);\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                dfcdetails = tdkTestObj.getResultDetails();\r\n                setdfc=\"%s\" %zoom;\r\n                #Check for SUCCESS/FAILURE return value of DS_SetDFC\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS :Application successfully gets and sets the zoom settingt as PanScan for the video decvice\";\r\n                        print \"getdfc %s\" %dfcdetails;\r\n                        #comparing the DFC (zoomSettings) before and after setting\r\n                        if setdfc in dfcdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the zoomsettings values are equal\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Get and Set APi\'s are Success But the zoomsettings values are not equal\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE :Failed to get and set the PanScan zoom\";\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script Sets and gets the PanScan Zoom Settings of Video Device\r\nTest Case ID : CT_DS_78					',NULL,3,'This Zoom type is not supported				',''),(675,16,'DS_GetAspect_Ratio_Reboot_test_114',57,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"devicesettings\",\"1.2\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_DS_114\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_IsDisplayConnectedStatus function to check for display connection status\r\n                tdkTestObj = obj.createTestStep(\'DS_IsDisplayConnectedStatus\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                displaydetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_IsDisplayConnectedStatus\r\n                if (expectedresult in actualresult) and (\"TRUE\" in displaydetails):\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS:Display connection status verified\";\r\n                        #calling DS_GetAspectRatio to get the aspect ratio\r\n                        tdkTestObj = obj.createTestStep(\'DS_GetAspectRatio\');\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        aspectRatiodetailsBefore = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_GetAspectRatio\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application gets the Aspect ratio\";\r\n                                #just printing the AspectRatio\r\n                                print aspectRatiodetailsBefore;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE:Application fails to get the Aspect Ratio of display device\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Display is not connected with STB\";\r\n        obj.initiateReboot();\r\n        #calling Device Settings - initialize API\r\n        tdkTestObj = obj.createTestStep(\'DS_ManagerInitialize\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of DS_ManagerInitialize\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with Device Settings library\";\r\n                #calling DS_IsDisplayConnectedStatus function to check for display connection status\r\n                tdkTestObj = obj.createTestStep(\'DS_IsDisplayConnectedStatus\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                displaydetails = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of DS_IsDisplayConnectedStatus\r\n                if (expectedresult in actualresult) and (\"TRUE\" in displaydetails):\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS:Display connection status verified\";\r\n                        #calling DS_GetAspectRatio to get the aspect ratio\r\n                        tdkTestObj = obj.createTestStep(\'DS_GetAspectRatio\');\r\n                        tdkTestObj.addParameter(\"port_name\",\"HDMI0\");\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        aspectRatiodetailsAfter = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of DS_GetAspectRatio\r\n                        if expectedresult in actualresult:\r\n                                print \"SUCCESS: Application gets the Aspect ratio\";\r\n                                if aspectRatiodetailsAfter == aspectRatiodetailsBefore:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Aspect ratio are same After and before rebooting the device \";\r\n                                        #just printing the AspectRatio\r\n                                        print aspectRatiodetailsAfter;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: Aspect ratio are not same After and before rebooting the device \";\r\n                        else:\r\n                                print \"FAILURE:Application fails to get the Aspect Ratio of display device\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE:Display is not connected with STB\";\r\n\r\n                #calling DS_ManagerDeInitialize to DeInitialize API\r\n                tdkTestObj = obj.createTestStep(\'DS_ManagerDeInitialize\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of DS_ManagerDeInitialize\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully DeInitialized the DeviceSetting library\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Deinitalize failed\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Device Setting Initialize failed\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the deviceSettings module\r\n        obj.unloadModule(\"devicesettings\");\r\nelse:\r\n        print\"Load module failed\";\r\n','ALLOCATED','This test script compares the Aspect ratio of Video Output Port before and after rebooting the STB\r\nTest Case ID : CT_DS_114				',NULL,10,'				','\0'),(777,1,'E2e_rmfApp_ls_quit',492,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rmfapp\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2e_rmfApp_ls_quit\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n#Prmitive test case which associated to this Script\r\ntdkTestObj = obj.createTestStep(\'E2E_rmfApp_ls\');\r\n\r\nexpectedresult=\"Test Suite Executed\"\r\n\r\ncmd = \"ls\"\r\ntdkTestObj.addParameter(\"rmfapp_command\",cmd);\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase(expectedresult);\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n\r\n#Set the result status of execution\r\ntdkTestObj.setResultStatus(\"none\");\r\n\r\nobj.unloadModule(\"rmfapp\");','ALLOCATED','				',NULL,53,'','\0'),(797,9,'IARMBUS_Disconnect_without_connect_55',7,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_55\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or(\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Disconnect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                expectedresult=\"FAILURE\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application failed to disconnect without connect IARMBus\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Disconnect succes %s \" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests Checking Iarmbus disconnect without connecting.\r\nTEST CASE ID:	CT_IARMBUS_55			',NULL,3,'				','\0'),(799,9,'IARMBUS_Init_with_Invalidparameter_test_43',4,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_43\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        symbol = \"*****\";\r\n        tdkTestObj.addParameter(\"Process_name\",symbol);\r\n        expectedresult=\"FAILURE\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Cannot Inaitialize Iarm bus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init passed\";\r\n\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script tests Initializing IARMBUS with parameter as symbols as input\r\nTEST CASE ID:CT_IARMBUS_43				',NULL,3,'				','\0'),(800,9,'IARMBUS_Init_with_Invalid_App_test_44',4,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_44\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        InvalidApp = \"sleep\";\r\n        tdkTestObj.addParameter(\"Process_name\",InvalidApp);\r\n        expectedresult=\"FAILURE\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Cannot Inaitialize Iarm bus with Invalid application\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init success with Invalid application\";\r\n\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script tests  Initializing IARMBUS with invalid application as parameter\r\nTEST CASE ID: CT_IARMBUS_44				',NULL,3,'				','\0'),(801,12,'IARMBUS_IsConnected_Invalid_Membername_54',25,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_54\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application is initialized with IARM Bus library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application is successfully connected with IARMBUS\";\r\n                        #calling IARMBUS API \"IARM_Bus_IsConnected\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_IsConnected\');\r\n                        memname = \"junkghfyhyjh\";\r\n                        tdkTestObj.addParameter(\"member_name\",memname);\r\n                        expectedresult=\"FAILURE\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_IsConnected\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"FAILURE: IARM_Bus_Isconnected failed. %s \" %details;\r\n\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"SUCCESS: API-Is_Connected success\";                                \r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARM Bus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests Checking process registration status with invalid member name, with IARMDaemon Manager\r\nTEST CASE ID:CT_IARMBUS_54 				',NULL,3,'				','\0'),(802,12,'IARMBUS_IsConnect_Without_Connect_53',4,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_53\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application is initialized with IARM Bus library\";\r\n                #calling IARMBUS API \"IARM_Bus_IsConnected\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_IsConnected\');\r\n                expectedresult=\"FAILURE\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details = tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_IsConnected\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"FAILURE: IARM_Bus_Isconnected failed. %s \" %details;\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"SUCCESS: API-Is_Connected Fails\";                        \r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests Checking process registration status without registering it with IARMDaemon Manager\r\nTEST CASE ID:CT_IARMBUS_53 				',NULL,3,'				','\0'),(803,9,'IARMBUS_RegisterEvtHandler_With_NegId_48',22,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_48\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARM_Bus_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS :Register call success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting RESOURCE_FOCUS resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        # Register for IR Key event.\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",-9);\r\n                                        expectedresult=\"FAILURE\";\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS :Event Handler not registered\";\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                expectedresult=\"FAILURE\";\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler success %s\" %details;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler failed %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests Register event handler and deregistering for negative event ID \r\nTEST CASE ID:	CT_IARMBUS_48		',NULL,3,'				','\0'),(804,9,'IARMBUS_RegisterEvtHandler_With_PosId_47',22,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_47\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARM_Bus_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS :Register call success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting RESOURCE_FOCUS resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        # Register for IR Key event.\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",1);\r\n                                        expectedresult=\"SUCCESS\";\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS :Event Handler registered successfully\";\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",1);\r\n                                                expectedresult=\"SUCCESS\";\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS :Event Handler unregistered\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler fails. %s\" %details;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler failed %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests Register event handler and deregistering the same for positive event ID.\r\nTEST CASE ID: CT_IARMBUS_47				',NULL,3,'				','\0'),(805,19,'IARMBUS_Release_Invalid_Resource_52',12,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_52\')\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Register RPC method Success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                #Requesting \"RESOURCE_FOCUS\" resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",9);\r\n        expectedresult=\"FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS:  Release Resource for INVALID Resource Type failed\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership success for INVALID Resource Type%s\" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script tests Release ownership with invalid resource.				\r\nTEST CASE ID:CT_IARMBUS_52',NULL,3,'				','\0'),(806,9,'IARMBUS_Request_FOCUS_Resource_50',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_50\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application registeres RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting FOCUS resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: Requested FOCUS resource is allocated successfully for the application\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests Request for FOCUS resource.\r\nTEST CASE ID:	CT_IARMBUS_50			',NULL,3,'				','\0'),(807,11,'IARMBUS_Request_Invalid_Resource_49',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_49\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application registeres RPC\"\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting FOCUS resource\r\n                                tdkTestObj.addParameter(\"resource_type\",10);\r\n                                expectedresult=\"FAILURE\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: IARM_BusDaemon_RequestOwnership failed. %s\" %details; \r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"SUCCESS: Requested Invalid resource is allocated successfully for the application\"%details; \r\n                                        #calling IARMBUS API               \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj =  obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",10);\r\n                                        expectedresult=\"SUCCESS\";\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                       #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                        if expectedresult in actualresult:\r\n                                                  tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                  print \"SUCCESS: Allocated  resource is successfully released\";\r\n                                        else:\r\n                                                  tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                  print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n                                      \r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests Request for Invalid resource type\r\nTEST CASE ID:CT_IARMBUS_49				',NULL,3,'				','\0'),(809,13,'IARMBUS_Term_Without_Init_42',5,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n# Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_44\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Term\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Term\');\r\n        \r\n        expectedresult=\"FAILURE\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Cannot Terminate Iarm bus without Init\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus Term success without Init\";\r\n\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script will check Terminating an application with IARMBUS without Initializing				\r\nTEST CASE ID:CT_IARMBUS_42',NULL,3,'This test will crash the agent application. And as per RDKTT-4,This test skipped				',''),(810,11,'IARMBUS_unregisterEvtHandler_With_NegId_46',22,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_46\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARM_Bus_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS :Register call success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting RESOURCE_FOCUS resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        # Register for IR Key event.\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",5);\r\n                                        expectedresult=\"SUCCESS\";\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS :Event Handler registered\";\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",-9);\r\n                                                expectedresult=\"FAILURE\";\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS :Event Handler failed to unregistered\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed %s\" %details;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler success. %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"Test Execution Result : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script tests Unregister event handler for removing listener for a invalid event ID.\r\nTEST CASE ID:	CT_IARMBUS_46			',NULL,3,'				','\0'),(811,11,'IARMBUS_unregisterEvtHandler_With_PosId_45',22,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_45\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARM_Bus_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS :Register call success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting RESOURCE_FOCUS resource\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        # Register for IR Key event.\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",5);\r\n                                        expectedresult=\"SUCCESS\";\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS :Event Handler not registered\";\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",5);\r\n                                                expectedresult=\"SUCCESS\";\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS :Event Handler failed to unregistered\";\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler success. %s\" %details;\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_RegisterEventHandler Failed %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",0);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"Test execution result: %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script tests Unregister event handler for removing listener for a positive event ID.\r\nTEST CASE ID:CT_IARMBUS_45 				',NULL,3,'				','\0'),(812,4,'MS_DVRTrickplay_Functionality_Test_09',95,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_09\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\"); \r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the MediaStreamer_DVR_Trickplay function\r\n        tdkTestObj = obj.createTestStep(\'MediaStreamer_DVR_Trickplay\');\r\n        #Pass the Play_speed And Time_position\r\n        tdkTestObj.addParameter(\"timePosition\",\"30000\");\r\n        #Passing All trick speed in Loop\r\n        speeds = [\'0.500000\',\'-0.500000\',\'4\',\'-4\',\'15\',\'-15\'];\r\n        for i in speeds:\r\n                print i;\r\n                tdkTestObj.addParameter(\"PlaySpeed\", i);\r\n                #Execute the Test case and pass expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the Actual result of streaming Interface\r\n                actualresult = tdkTestObj.getResult();\r\n                details = tdkTestObj.getResultDetails();\r\n                print \"Result of streaming : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Mediastreamer streaming the video Successfully\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failure secnario : %s\" %details;\r\n                        print \"Mediastreamer failed to streaming the video at: %s\" %i;\r\n        print \"Played with all speeds\";\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting DVR Streaming url from Mediastreamer and playing it with all tricplay speeds.Test Case ID:CT_Mediastreamer_09.				',NULL,3,'This test will get fail because of bug in Mediastreamer. As per RDKTT-10 test case skipped				',''),(813,4,'MS_DVRTrickplay_Invalid_Playspeed_10',95,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_10\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the MediaStreamer_DVR_Trickplay function\r\n        tdkTestObj=obj.createTestStep(\'MediaStreamer_DVR_Trickplay\');\r\n        #Pass the invalid play_speed\r\n        tdkTestObj.addParameter(\"PlaySpeed\",\"6\");\r\n        tdkTestObj.addParameter(\"timePosition\",\"8000\");\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"FAILURE\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #compare the actual result with expected result\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Mediastreamer can not streaming the video \";\r\n                print \"Failure secnario : %s\" %details;\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Mediastreamer streaming the video Successfully\";\r\n                print \"Failure secnario : %s\" %details;\r\n        #Unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting DVR Streaming url from Mediastreamer and playing it with invalid trickplay speeds.Test Case ID:CT_Mediastreamer_10.',NULL,3,'This test will get fail because of bug in Mediastreamer. As per RDKTT-10 test case skipped				',''),(814,4,'MS_DVRTrickplay_Invalid_Timeposition_11',95,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_11\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the MediaStreamer_DVR_Trickplay function\r\n        tdkTestObj=obj.createTestStep(\'MediaStreamer_DVR_Trickplay\');\r\n        #Pass the Invalid Time position\r\n        tdkTestObj.addParameter(\"PlaySpeed\",\"4\");\r\n        tdkTestObj.addParameter(\"timePosition\",\"0.6789\");\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"FAILURE\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #compare the actual result with expected result\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Mediastreamer can not streaming the video \";\r\n                print \"Success secnario : %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Mediastreamer streaming the video Successfully\";\r\n                print \"Failure secnario : %s\" %details;\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting DVR Streaming url from Mediastreamer and playing it with invalid time position trickplay speeds.Test CaseID:CT_Mediastreamer_11. \r\n						',NULL,3,'This test will get fail because of bug in Mediastreamer. As per RDKTT-10 test case skipped				',''),(815,4,'MS_LiveTune_Improper_Requesturl_02',88,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_02\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");        \r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the MediaStreamer_LiveTune_Request function\r\n        tdkTestObj = obj.createTestStep(\'MediaStreamer_LiveTune_Request\');\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"1\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        print \"Live Tune Response of Json parameter : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response Parameter is Failure,testing sucess\";\r\n                print \"Live Tune description:General Error\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is success, testing failed\";\r\n                print \"Live Tune description:Success\";\r\n                print \"Failure scenarios : %s\" %details;\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting Live Tune response of Mediastreamer with Improper Request url.\r\nTest Case ID:CT_Mediastreamer_02				',NULL,3,'				','\0'),(816,4,'MS_LiveTune_Playback_07',92,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_07\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the MediaStreamer_Live_Playback function\r\n        tdkTestObj = obj.createTestStep(\'MediaStreamer_Live_Playback\');\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid=streamDetails.getOCAPID();\r\n        Id = re.search(r\"\\w\\w\\w\\w\",validid);\r\n        if Id:\r\n                print \"ocapid : %s\" %validid;\r\n                tdkTestObj.addParameter(\"ocapId\",\"ocap://\"+validid);\r\n                #Execute the Test case and pass expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the Actual result of streaming Interface\r\n                actualresult = tdkTestObj.getResult();\r\n                details = tdkTestObj.getResultDetails();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Mediastreamer streaming the video Successfully\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Mediastreamer failed to streaming the video\";\r\n                        print \"Failure secnario : %s\" %details;\r\n                #unloading mediastreamer module\r\n                obj.unloadModule(\"mediastreamer\");\r\n        else:\r\n                print \"getOcapId is failed\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting Live Streaming url from Mediastreamer and playing it.\r\nTest Case ID:CT_Mediastreamer_07				',NULL,3,'				','\0'),(817,4,'MS_Recordedcontent_playback_08',93,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_08\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the MediaStreamer_Recording_Playback function\r\n        tdkTestObj = obj.createTestStep(\'MediaStreamer_Recording_Playback\');\r\n        #Execute the Test case and pass expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the Actual result of streaming Interface\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        print \"Result of streaming : %s\" %actualresult;\r\n        #compare the actual result with expected result of playing video\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Mediastreamer streaming the video Successfully\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Mediastreamer failed to streaming the video\";\r\n                print \"Failure secnario : %s\" %details;\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting Recorded Streaming url from Mediastreamer and playing it.\r\nTest Case ID:CT_Mediastreamer_08.				',NULL,3,'This test will get fail because of bug in Mediastreamer.As per RDKTT-10 this test skipped				',''),(818,4,'MS_RecordingList_Format_Test_05',90,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_05\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the MediaStreamer_Recorded_Urls function\r\n        tdkTestObj = obj.createTestStep(\'MediaStreamer_Recorded_Urls\');\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        print \"Mediastreamer Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"List of Recording content present\";\r\n                #Getting the URL List log file from DUT\r\n                logpath=tdkTestObj.getLogPath();\r\n                print \"Log path in DUT : %s\" %logpath;\r\n                tdkTestObj.transferLogs(logpath,\"false\");\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"List of Recording content is not present\";\r\n                print \"Failure secnario : %s\" %details;\r\n        #unloading Mediastreamer Module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load Mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This script tests Requesting List of Recordings from Mediastreamer.\r\nTest Case ID:CT_Mediastreamer_05			',NULL,3,'				','\0'),(819,5,'MS_Recording_Improper_Requesturl_04',111,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_04\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the MediaStreamer_Recording_Request function\r\n        tdkTestObj = obj.createTestStep(\'MediaStreamer_Recording_Request\');\r\n        #Passing the parameter  \r\n        tdkTestObj.addParameter(\"recordingId\",\"\");\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"1\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        print \"Recoded response of Json parameter : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response Parameter is Failure,testing sucess\";\r\n                print \"Recorded request description:General Error\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                \r\n                print \"Failure scenarios : %s\" %details;\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests response of Mediastreamer for Requesting  recorded content with Improper url\r\nTest Case ID:CT_Mediastreamer_04',NULL,3,'				','\0'),(820,5,'MS_Recording_Metadata_Format_Test_06',91,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_06\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\"); \r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the MediaStreamer_Recorded_Metadata function\r\n        tdkTestObj = obj.createTestStep(\'MediaStreamer_Recorded_Metadata\');\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        print \"Format checking of Recording Metadata : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"List of Recording Metadata present\";\r\n                #Getting the RecordingMeta data log file from DUT\r\n                logpath=tdkTestObj.getLogPath();\r\n                print \"Log path in DUT : %s\" %logpath;\r\n                tdkTestObj.transferLogs(logpath,\"false\");\r\n                \r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"List of Recording Metadata is not present\";\r\n                print \"Failure secnario : %s\" %details;\r\n        #unloading Mediastreamer Module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load Mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting a List of recorded content metadata from Mediastreamer.\r\nTest Case ID:CT_Mediastreamer_06				',NULL,3,'				','\0'),(821,4,'MS_Recording_Request_03',111,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_Mediastreamer_03\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");  \r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling MediaStreamer_Recording_Request function\r\n        tdkTestObj=obj.createTestStep(\'MediaStreamer_Recording_Request\');\r\n        tdkTestObj.addParameter(\"recordingId\",\"validId\");\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"0\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        print \"Recorded content Response of Json parameter : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response Parameter is success\";\r\n                print \"Recorded content description:Success\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n                print \"Failure Scenario : %s\" %details\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n       print \"Failed to load mediastreamer module\";\r\n       #Set the module loading status\r\n       obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting recording content response of Mediastreamer.\r\nTest Case ID:CT_Mediastreamer_03				',NULL,3,'				','\0'),(847,5,'RMF_DVRSrc_GetMediaInfo_09',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_GetMediaInfo_09\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nduration = 0.0;\r\nexpected_Failure = \"FAILURE\"\r\n\r\ndef compareGetMediaInfo(tdkObj,sTime,tDuration):\r\n        global duration\r\n        if tDuration == duration:\r\n                print \"DVRSrc getMediaInfo() success\"\r\n                tdkObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                print \"DVRSrc getMediaInfo() failed\"\r\n                tdkObj.setResultStatus(\"FAILURE\");\r\n        return ;\r\n\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n        global duration\r\n        duration = recordingObj.getDuration(num - 1);\r\n        print \"Duration:\",duration\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_GetMediaInfo\':\r\n        pos = details.find(\'MediaStartTime\');\r\n        value = details[pos:]\r\n        parts = value.partition(\' \');\r\n        partOne = parts[0];\r\n        partTwo = parts[2];\r\n        start = partOne[15:];\r\n        end = partTwo[14:];\r\n        startTime = float(start);\r\n        durationTime = float(end);\r\n\r\n        compareGetMediaInfo(tdkTestObj,startTime,durationTime);\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaInfo\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to get mediaInfo i.e start time and total duration for the recorded content, by getMediaInfo API of DVRSource element.\r\nTest Case ID: CT_RMF_DVRSrc_09.	\r\nTest Type: Positive.				',NULL,5,'				','\0'),(848,5,'RMF_DVRSrc_GetMediaTime_07',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_GetMediaTime_07\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\n\r\ndef compareMediaTime(tdkObj,mTime):\r\n        defaultTime = 0.0\r\n        if mTime == defaultTime:\r\n                print \"DVRSrc getMediaTime() success\"\r\n                tdkObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                print \"DVRSrc getMediaTime() failed\"\r\n                tdkObj.setResultStatus(\"FAILURE\");\r\n        return ;\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_GetMediaTime\':\r\n        pos = details.find(\'MediaTime:\');\r\n        value = details[pos:];\r\n        mediaTime = value[10:];\r\n        playTime = float(mediaTime);\r\n\r\n        compareMediaTime(tdkTestObj,playTime);\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"];\r\n                        src_element=[\"DVRSrc\"];\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetMediaTime\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to get mediaTime by getMediaTime API of DVRSource element.\r\nTest Case ID: CT_RMF_DVRSrc_07.				\r\nTest Type: Positive.',NULL,5,'				','\0'),(849,3,'RMF_DVRSrc_GetSetSpeed_06',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_GetSetSpeed_06\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nsetSpeed = 8.0;\r\n\r\ndef compareSpeed(tdkObj,speed):\r\n        global setSpeed\r\n\r\n        if speed == setSpeed:\r\n                print \"DVRSrc getSpeed() success\"\r\n                tdkObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                print \"DVRSrc getSpeed() failed\"\r\n                tdkObj.setResultStatus(\"FAILURE\");\r\n        return ;\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_GetSpeed\':\r\n        pos = details.find(\'Speed:\');\r\n        value = details[pos:];\r\n        speed = value[6:];\r\n        playSpeed = float(speed);\r\n\r\n        compareSpeed(tdkTestObj,playSpeed);\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        global setSpeed\r\n                        print \"Change Speed to \",setSpeed\r\n                        src_parameter=[\"rmfElement\",\"playSpeed\"];\r\n                        src_element=[\"DVRSrc\",setSpeed];\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"];\r\n                                src_element=[\"DVRSrc\"];\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to set the speed by setSpeed API of DVRSource element.\r\nTest Case ID: CT_RMF_DVRSrc_06.\r\nTest Type: Positive.				',NULL,3,'				','\0'),(850,5,'RMF_DVRSrc_GetSpeed_05',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_GetSpeed_05\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\n\r\ndef compareSpeed(tdkObj,speed):\r\n        defaultSpeed = 1.0\r\n        if speed == defaultSpeed:\r\n                print \"DVRSrc getSpeed() success\"\r\n                tdkObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                print \"DVRSrc getSpeed() failed\"\r\n                tdkObj.setResultStatus(\"FAILURE\");\r\n        return ;\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_GetSpeed\':\r\n        pos = details.find(\'Speed:\');\r\n        value = details[pos:];\r\n        speed = value[6:];\r\n        global playSpeed\r\n        playSpeed = float(speed);\r\n\r\n        compareSpeed(tdkTestObj,playSpeed);\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"];\r\n                        src_element=[\"DVRSrc\"];\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetSpeed\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to get the default speed by getSpeed API of DVRSource element.			\r\nTest Case ID: CT_RMF_DVRSrc_05.\r\nTest Type: Positive.',NULL,5,'				','\0'),(851,5,'RMF_DVRSrc_Open_10',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_Open_10\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nexpected_Failure = \"FAILURE\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        parametername.append(\"url\");\r\n        \r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        dvrLocator = \"ocap://\" +  streamDetails.getOCAPID();\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        if expected_Failure in result:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to call Open API by passing valid as ocap url as input to its parameters and Close a DVRsource element.\r\nTest Case ID: CT_RMF_DVRSrc_10.	\r\nTest Type: Negative.								',NULL,5,'				','\0'),(852,3,'RMF_DVRSrc_Open_11',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_Open_11\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nexpected_Failure = \"FAILURE\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"NULL\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        if expected_Failure in result:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to call Open API by passing NULL as input to its parameters and Close a DVRsource element.\r\nTest Case ID: CT_RMF_DVRSrc_11.\r\nTest Type: Negative.				',NULL,3,'				','\0'),(853,3,'RMF_DVRSrc_Open_12',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_Open_12\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nexpected_Failure = \"FAILURE\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        parametername.append(\"url\");\r\n        #Invalid url\r\n        dvrLocator = \"local/8728/dvr\";\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        if expected_Failure in result:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to call Open API by passing invalid url as input to its parameters and Close a DVRsource element.\r\nTest Case ID: CT_RMF_DVRSrc_12.\r\nTest Type: Negative.',NULL,3,'				','\0'),(854,3,'RMF_DVRSrc_Open_13',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_Open_13\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nexpected_Failure = \"FAILURE\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        parametername.append(\"url\");\r\n        #Invalid recordID\r\n        recordID = \"00000000\"        \r\n        dvrLocator = \"dvr://local/\" + recordID + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        if expected_Failure in result:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to call Open API by passing valid url but invalid record_id as input to its url parameter and Close a DVRsource element.\r\nTest Case ID: CT_RMF_DVRSrc_13.\r\nTest Type: Negative.				',NULL,3,'				','\0'),(855,3,'RMF_DVRSrc_Open_14',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_Open_14\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nexpected_Failure = \"FAILURE\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        #Invalid segment number.\r\n        segNum = \"500\"\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#\" + segNum\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        if expected_Failure in result:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to call Open API by passing valid url but invalid segmentNumber as input to its url parameter and Close a DVRsource element.\r\nTest Case ID: CT_RMF_DVRSrc_14.\r\nTest Type: Negative.				',NULL,3,'				','\0'),(856,3,'RMF_DVRSrc_Open_15',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_Open_15\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        print \"RecordId:\",recordID;\r\n        parametername.append(\"url\");\r\n        segName = recordingObj.getSegmentName(num - 1);\r\n        print \"segName:\",segName\r\n        dvrSegName = \"dvr://local/\" + str(segName)\r\n        print dvrSegName\r\n        parametervalue.append(dvrSegName);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to call Open API with valid url being framed with segmentName and Close a DVRsource element.\r\nTest Case ID: CT_RMF_DVRSrc_15.\r\nTest Type: Positive.				',NULL,3,'				','\0'),(857,3,'RMF_DVRSrc_Open_16',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_Open_16\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nexpected_Failure = \"FAILURE\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        parametername.append(\"url\");\r\n        #Invalid segment number.\r\n        segName = \"00000000000\"\r\n        dvrLocator = \"dvr://local/\" + segName\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        if expected_Failure in result:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to  call Open API by passing valid url but invalid segmentName as input to its url parameter and Close a DVRsource element.\r\nTest Case ID: CT_RMF_DVRSrc_16.\r\nTest Type: Negative.				',NULL,3,'				','\0'),(858,5,'RMF_DVRSrc_Play_03',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_Play_03\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nexpected_Failure = \"FAILURE\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Play\':\r\n            if expected_Failure in result:\r\n                    #if play fails with RMF_RESULT_NO_SINK, then set SUCCESS or else FAILURE\r\n                    tdkTestObj.setResultStatus(\"SUCCESS\");\r\n            else:\r\n                    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"];\r\n                                src_element=[\"DVRSrc\"];\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to play a DVRSource element without MPSink Element. \r\nTest Case ID: CT_RMF_DVRSrc_03.	\r\nTest Type: Negative.			',NULL,5,'				','\0'),(859,5,'RMF_DVRSrc_Play_04',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_Play_04\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nexpected_Failure = \"FAILURE\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        parametername.append(\"url\");\r\n        dvrLocator = \"dvr://local/\" + recordID[:-1] + \"#0\"\r\n        print dvrLocator\r\n        parametervalue.append(dvrLocator);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Play\':\r\n            if expected_Failure in result:\r\n                    #if play fails with RMF_RESULT_NO_SINK, then set SUCCESS or else FAILURE\r\n                    tdkTestObj.setResultStatus(\"SUCCESS\");\r\n            else:\r\n                    tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                playSpeed = 1.0;\r\n                                playTime = 0.0;\r\n                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"];\r\n                                src_element=[\"DVRSrc\",1,playSpeed,playTime];\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"DVRSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");			','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to play with speed and time parameter a DVRSource element without MPSink Element.\r\nTest Case ID: CT_RMF_DVRSrc_04.	\r\nTest Type: Negative.							',NULL,5,'				','\0'),(860,3,'RMF_DVRSrc_SetMediaTime_08',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRSrc_SetMediaTime_08\');\r\n\r\nexpected_Result=\"SUCCESS\"\r\nsetMediaTime = 0.0000;\r\nexpected_Failure = \"FAILURE\"\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Setmediatime\':\r\n        if expected_Failure in result:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[\"rmfElement\"]\r\n        src_element=[\"DVRSrc\"]\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        setMediaTime = 8.000\r\n                        print \"setmediaTime:\",setMediaTime\r\n                        src_parameter=[\"rmfElement\",\"mediaTime\"];\r\n                        src_element=[\"DVRSrc\",setMediaTime];\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[\"rmfElement\"]\r\n                        src_element=[\"DVRSrc\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[\"rmfElement\"]\r\n                src_element=[\"DVRSrc\"]\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests the RDK Mediaframework DVRSrc element to set mediaTime by setMediaTime API of DVRSource element.\r\nTest Case ID: CT_RMF_DVRSrc_08.\r\nTest Type: Negative.',NULL,3,'				','\0'),(862,9,'RMF_HNSrcMPSink_InvalidRewindSpeed_10',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-100.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_InvalidRewindSpeed_10\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    if teststep == \"RMF_Element_Setspeed\":\r\n        expectedresult =\"FAILURE\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    if teststep == \"RMF_Element_Setspeed\":\r\n        if \"FAILURE\" in result.upper():\r\n                result = \"SUCCESS\";\r\n        else:\r\n                result = \"FAILURE\";\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Check the get state of current pipeline\r\n                                                                        time.sleep(20);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                time.sleep(200);\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");			','ALLOCATED','These Script tests the RDK Mediaframework to Rewind the video with big numbers in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_10.		',NULL,5,'RDKTT-77		',''),(863,10,'RMF_HNSrcMPSink_InvalidSpeed_09',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[100.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_InvalidSpeed_09\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    if teststep == \"RMF_Element_Setspeed\":\r\n        expectedresult =\"FAILURE\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    if teststep == \"RMF_Element_Setspeed\":\r\n        if \"FAILURE\" in result.upper():\r\n	    result = \"SUCCESS\";\r\n	else:\r\n	    result = \"FAILURE\";\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Check the get state of current pipeline\r\n                                                                        time.sleep(20);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                time.sleep(200);\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n                                                 				','ALLOCATED','These Script tests the RDK Mediaframework to FF the video with positive big numbers in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_09.',NULL,5,'RDKTT-77			',''),(871,9,'RMF_HNSrc_MPSink_BufferClearing_17',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_BufferClearing_17\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global tunecounter\r\n    global Mediatime\r\n    global tdkTestObj\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        if tunecounter == 0:\r\n                streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        else:\r\n                streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        tunecounter=tunecounter+1;\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediatime=details.split(\":\");\r\n            print Mediatime[1];\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        tunecounter=0;\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(15);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                FirstStream_Mediatime=Mediatime[1];\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                if Expected_Result in result.upper():\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                                                                                        if Expected_Result in result.upper():\r\n                                                                                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                                                                                if Expected_Result in result.upper():\r\n                                                                                                                        #Selecting the source for MPSink\r\n                                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                                                                                        if Expected_Result in result.upper():\r\n\r\n                                                                                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                                                                                if Expected_Result in result.upper():\r\n                                                                                                                                        time.sleep(2);\r\n                                                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                                                        if Expected_Result in result.upper():\r\n                                                                                                                                                SecondStream_Mediatime=Mediatime[1];\r\n                                                                                                                                                if float(SecondStream_Mediatime) < float(FirstStream_Mediatime):\r\n                                                                                                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                                                                else:\r\n                                                                                                                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework video buffer clearing by changing channel in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_17.',NULL,5,'				','\0'),(872,7,'RMF_HNSrc_MPSink_Clearbuffering&CheckMediaTime_18',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-4.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_Clearbuffering&CheckMediaTime_18\');\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global tunecounter\r\n    global Mediatime\r\n    global tdkTestObj\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        if tunecounter == 0:\r\n                streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        else:\r\n                streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        tunecounter=tunecounter+1;\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediatime=details.split(\":\");\r\n            print Mediatime[1];\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        tunecounter=0;\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(10);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                #Rewind with 4x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                for x in range(0,10):\r\n                                                                                                        time.sleep(1);\r\n                                                          \r\n                                                                                                if Mediatime[1]<=0:\r\n                                                                                                        print Mediatime[1];\r\n                                                                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                                                                #result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework to clear the tsb buffer and check mediatime . Test Case ID: CT_RMF_HNSrc_MPSink_18.					',NULL,3,'				','\0'),(873,7,'RMF_HNSrc_MPSink_DVR_FF_16x_30',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[16.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DVR_FF_16x_30\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediatime=details.split(\":\");\r\n                print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediaspeed=details.split(\":\");\r\n                print Mediaspeed[1];\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(20);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #FF with 32x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(5);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n                                                                                                	Mediaspeed[1]=float(Mediaspeed[1]);\r\n                                                                                                	Mediatime[1]=float(Mediatime[1]);\r\n                                                                                                	initialmediatime=float(initialmediatime);\r\n                                                                                                	if (Mediatime[1] > initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                                                                                        	print \"success\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                	else:\r\n                                                                                                        	print \"failed\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n			\r\n','ALLOCATED','These Script tests the RDK Mediaframework to do 16x play on dvr content . Test Case ID: CT_RMF_HNSrc_MPSink_30.	',NULL,3,'				','\0'),(874,7,'RMF_HNSrc_MPSink_DVR_FF_32x_29',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[32.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DVR_FF_16x_30\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediatime=details.split(\":\");\r\n                print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediaspeed=details.split(\":\");\r\n                print Mediaspeed[1];\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(20);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #FF with 32x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(5);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n                                                                                                	Mediaspeed[1]=float(Mediaspeed[1]);\r\n                                                                                                	Mediatime[1]=float(Mediatime[1]);\r\n                                                                                                	initialmediatime=float(initialmediatime);\r\n                                                                                                	if (Mediatime[1] > initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                                                                                        	print \"success\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                	else:\r\n                                                                                                        	print \"failed\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n			\r\n','ALLOCATED','These Script tests the RDK Mediaframework to do 32x play on dvr content . Test Case ID: CT_RMF_HNSrc_MPSink_29.		',NULL,3,'				','\0'),(875,11,'RMF_HNSrc_MPSink_DVR_FF_4x_31',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[4.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DVR_FF_4x_31\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediatime=details.split(\":\");\r\n                print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediaspeed=details.split(\":\");\r\n                print Mediaspeed[1];\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(20);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #FF with 4x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(5);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n                                                                                                	Mediaspeed[1]=float(Mediaspeed[1]);\r\n                                                                                                	Mediatime[1]=float(Mediatime[1]);\r\n                                                                                                	initialmediatime=float(initialmediatime);\r\n                                                                                                	if (Mediatime[1] > initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                                                                                        	print \"success\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                	else:\r\n                                                                                                        	print \"failed\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n			\r\n\r\n','ALLOCATED','These Script tests the RDK Mediaframework to do 4x play on dvr content . Test Case ID: CT_RMF_HNSrc_MPSink_31.		',NULL,3,'				','\0'),(876,13,'RMF_HNSrc_MPSink_DVR_FF_64x_32',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[64.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DVR_FF_64x_32\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediatime=details.split(\":\");\r\n                print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediaspeed=details.split(\":\");\r\n                print Mediaspeed[1];\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(20);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #FF with 64x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(3);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n                                                                                                	Mediaspeed[1]=float(Mediaspeed[1]);\r\n                                                                                                	Mediatime[1]=float(Mediatime[1]);\r\n                                                                                                	initialmediatime=float(initialmediatime);\r\n                                                                                                	if (Mediatime[1] > initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                                                                                        	print \"success\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                	else:\r\n                                                                                                        	print \"failed\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n			\r\n','ALLOCATED','These Script tests the RDK Mediaframework to do 64x play on dvr content . Test Case ID: CT_RMF_HNSrc_MPSink_32.			',NULL,3,'				','\0'),(877,5,'RMF_HNSrc_MPSink_DVR_Play_26',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DVR_Play_26\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global tdkTestObj\r\n    global Mediastate\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep == \'RMF_Element_Getstate\':\r\n        if \"SUCCESS\" in result.upper():\r\n                if \"PLAYING\" in details.upper():\r\n                        result=\"SUCCESS\";\r\n                else:\r\n                        result=\"FAILURE\";\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                 #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(10);\r\n                                                                        #Check the get state of current pipeline\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n			','ALLOCATED','These Script tests the RDK Mediaframework to play the dvr content . Test Case ID: CT_RMF_HNSrc_MPSink_26.			',NULL,3,'				','\0'),(878,7,'RMF_HNSrc_MPSink_DVR_REW_16x_35',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-16.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DVR_REW_16x_35\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediatime=details.split(\":\");\r\n                print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediaspeed=details.split(\":\");\r\n                print Mediaspeed[1];\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                 #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(60);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #Rewind with 16x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(5);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n                                                                                                	Mediaspeed[1]=float(Mediaspeed[1]);\r\n                                                                                                	Mediatime[1]=float(Mediatime[1]);\r\n                                                                                                	initialmediatime=float(initialmediatime);\r\n                                                                                                	if (Mediatime[1] < initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                                                                                        	print \"success\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                	else:\r\n                                                                                                        	print \"failed\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n	\r\n','ALLOCATED','These Script tests the RDK Mediaframework to rewind with 16x speed on dvr content . Test Case ID: CT_RMF_HNSrc_MPSink_35.		',NULL,3,'				','\0'),(879,7,'RMF_HNSrc_MPSink_DVR_REW_32x_34',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-32.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DVR_REW_32x_34\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediatime=details.split(\":\");\r\n                print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediaspeed=details.split(\":\");\r\n                print Mediaspeed[1];\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                 #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(90);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #Rewind with 64x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(5);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n	                                                                                                Mediaspeed[1]=float(Mediaspeed[1]);\r\n        	                                                                                        Mediatime[1]=float(Mediatime[1]);\r\n                	                                                                                initialmediatime=float(initialmediatime);\r\n                        	                                                                        if (Mediatime[1] < initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                        	                                                                print \"success\"\r\n                                	                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                	                                                else:\r\n                                                        	                                                print \"failed\"\r\n                                                                	                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n','ALLOCATED','These Script tests the RDK Mediaframework to rewind with 32x speed on dvr content . Test Case ID: CT_RMF_HNSrc_MPSink_34.	',NULL,3,'				','\0'),(880,7,'RMF_HNSrc_MPSink_DVR_REW_4x_36',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-4.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DVR_REW_4x_36\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediatime=details.split(\":\");\r\n                print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediaspeed=details.split(\":\");\r\n                print Mediaspeed[1];\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                 #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(40);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #Rewind with 4x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(5);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n	                                                                                                Mediaspeed[1]=float(Mediaspeed[1]);\r\n        	                                                                                        Mediatime[1]=float(Mediatime[1]);\r\n                	                                                                                initialmediatime=float(initialmediatime);\r\n                        	                                                                        if (Mediatime[1] < initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                        	                                                                print \"success\"\r\n                                	                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                	                                                else:\r\n                                                        	                                                print \"failed\"\r\n                                                                	                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n','ALLOCATED','These Script tests the RDK Mediaframework to do 4x play on dvr content . Test Case ID: CT_RMF_HNSrc_MPSink_36.			',NULL,3,'				','\0'),(881,7,'RMF_HNSrc_MPSink_DVR_REW_64x_33',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-64.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DVR_REW_64x_33\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediatime=details.split(\":\");\r\n                print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediaspeed=details.split(\":\");\r\n                print Mediaspeed[1];\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                 #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(120);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #Rewind with 64x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(5);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n                                                                                           	     Mediaspeed[1]=float(Mediaspeed[1]);\r\n                                                                                                     Mediatime[1]=float(Mediatime[1]);\r\n                                                                                                     initialmediatime=float(initialmediatime);\r\n                                                                                                     if (Mediatime[1] < initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                                                                                         print \"success\"\r\n                                                                                                     	 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                     else:\r\n                                                                                                         print \"failed\"\r\n                                                                                                         tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n','ALLOCATED','These Script tests the RDK Mediaframework to do -64x play on dvr content . Test Case ID: CT_RMF_HNSrc_MPSink_33.					',NULL,3,'				','\0'),(882,13,'RMF_HNSrc_MPSink_FF_16x_22',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[16.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_FF_16x_22\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediatime=details.split(\":\");\r\n            print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediaspeed=details.split(\":\");\r\n            print Mediaspeed[1];\r\n\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n									#Pause the HNSRC-->MPSINK pipeline\r\n									result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n									if Expected_Result in result.upper():\r\n										#Get the Mediatime value\r\n										time.sleep(60);\r\n										result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n										if Expected_Result in result.upper():\r\n											initialmediatime=Mediatime[1]\r\n											#FF with 16x\r\n											result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n											if Expected_Result in result.upper():\r\n												result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n													time.sleep(5);\r\n													result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n													if Expected_Result in result.upper():			\r\n														Mediaspeed[1]=float(Mediaspeed[1]);\r\n														Mediatime[1]=float(Mediatime[1]);\r\n														initialmediatime=float(initialmediatime);\r\n														if (Mediatime[1] > initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n															print \"success\"\r\n															tdkTestObj.setResultStatus(\"SUCCESS\");\r\n														else:\r\n															print \"failed\"\r\n															tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n','ALLOCATED','These Script tests the RDK Mediaframework to do 16x play on live content . Test Case ID: CT_RMF_HNSrc_MPSink_22.			',NULL,3,'				','\0'),(883,7,'RMF_HNSrc_MPSink_FF_32x_28',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[32.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_FF_32x_28\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        Mediatime=details.split(\":\");\r\n        print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        Mediaspeed=details.split(\":\");\r\n        print Mediaspeed[1];\r\n\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Pause the HNSRC-->MPSINK pipeline\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                #Get the Mediatime value\r\n                                                                                time.sleep(120);\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        initialmediatime=Mediatime[1]\r\n                                                                                        #FF with 32x\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                if Expected_Result in result.upper():\r\n                                                                                                        time.sleep(5);\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                        Mediaspeed[1]=float(Mediaspeed[1]);\r\n                                                                                                        Mediatime[1]=float(Mediatime[1]);\r\n                                                                                                        initialmediatime=float(initialmediatime);\r\n                                                                                                        if (Mediatime[1] > initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                                                                                                print \"success\"\r\n                                                                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                        else:\r\n                                                                                                                print \"failed\"\r\n                                                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n				','ALLOCATED','These Script tests the RDK Mediaframework video trickplay for 32x on live tsb. Test Case ID: CT_RMF_HNSrc_MPSink_28.				',NULL,5,'				','\0'),(884,5,'RMF_HNSrc_MPSink_FF_4x_21',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[4.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_FF_4x_21\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        Mediatime=details.split(\":\");\r\n        print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        Mediaspeed=details.split(\":\");\r\n        print Mediaspeed[1];\r\n\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n																		#Pause the HNSRC-->MPSINK pipeline\r\n																		result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n																		if Expected_Result in result.upper():\r\n																			#Get the Mediatime value\r\n																			time.sleep(120);\r\n																			result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n																			if Expected_Result in result.upper():\r\n																					initialmediatime=Mediatime[1]\r\n																					#FF with 4x\r\n																					result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n																					if Expected_Result in result.upper():\r\n																							result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n																							if Expected_Result in result.upper():\r\n																									time.sleep(5);\r\n																									result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n																									Mediaspeed[1]=float(Mediaspeed[1]);\r\n																									Mediatime[1]=float(Mediatime[1]);\r\n																									initialmediatime=float(initialmediatime);\r\n																									if (Mediatime[1] > initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n																											print \"success\"\r\n																											tdkTestObj.setResultStatus(\"SUCCESS\");\r\n																									else:\r\n																											print \"failed\"\r\n																											tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework video trickplay for 4x on live tsb. Test Case ID: CT_RMF_HNSrc_MPSink_21.	',NULL,3,'				','\0'),(885,9,'RMF_HNSrc_MPSink_FF_64x_20',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[64.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_FF_64x_20\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediatime=details.split(\":\");\r\n            print Mediatime[1];\r\n\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediaspeed=details.split(\":\");\r\n            print Mediaspeed[1];\r\n\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n																		#Pause the HNSRC-->MPSINK pipeline\r\n																		result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n																		if Expected_Result in result.upper():\r\n																			#Get the Mediatime value\r\n																			time.sleep(60);\r\n																			result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n																			if Expected_Result in result.upper():\r\n																					initialmediatime=Mediatime[1]\r\n																					#FF with 32x\r\n																					result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n																					if Expected_Result in result.upper():\r\n																							result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n																							if Expected_Result in result.upper():\r\n																									time.sleep(5);\r\n																									result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n																									Mediaspeed[1]=float(Mediaspeed[1]);\r\n																									Mediatime[1]=float(Mediatime[1]);\r\n																									initialmediatime=float(initialmediatime);\r\n																									if (Mediatime[1] > initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n																											print \"success\"\r\n																											tdkTestObj.setResultStatus(\"SUCCESS\");\r\n																									else:\r\n																											print \"failed\"\r\n																											tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n				','ALLOCATED','These Script tests the RDK Mediaframework to do 64x play on live content . Test Case ID: CT_RMF_HNSrc_MPSink_20.	',NULL,5,'				','\0'),(886,7,'RMF_HNSrcMPSink_Video_Play_Position_04',495,'import tdklib;\r\ndetails=\"\"\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrcMPSink_Video_Play_Position_04\');\r\n\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Check the get state of current pipeline\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n\r\n                                                                                        #Get the Mediatime value\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n                                             \r\n','ALLOCATED','These Script tests the RDK Mediaframework to get  play position of video in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrcMPSink_04.				',NULL,3,'				','\0'),(887,7,'RMF_HNSrc_MPSink_InvalidMediaTime_13',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_InvalidMediaTime_13\');\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    if teststep == \"RMF_Element_Setmediatime\":\r\n        expectedresult =\"FAILURE\"\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    if teststep == \"RMF_Element_Setmediatime\":\r\n        if \"FAILURE\" in result.upper():\r\n                result = \"SUCCESS\";\r\n        else:\r\n                result = \"FAILURE\";\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n\r\n    return result\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(10);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                #Set the Mediatime value\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,Expected_Result,mediatime_parameter_name,mediatime_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        #Get the Mediatime value\r\n                                                                                        time.sleep(10);\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");		','ALLOCATED','These Script tests the RDK Mediaframework to set mediatime with positive big numbers in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_13.				',NULL,3,'RDKTT-77	',''),(888,9,'RMF_HNSrc_MPSink_InvalidMediaTime_14',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[-2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_InvalidMediaTime_14\');\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    if teststep == \"RMF_Element_Setmediatime\":\r\n        expectedresult =\"FAILURE\"\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    if teststep == \"RMF_Element_Setmediatime\":\r\n        if \"FAILURE\" in result.upper():\r\n                result = \"SUCCESS\";\r\n        else:\r\n                result = \"FAILURE\";\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n\r\n    return result\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(15);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                #Set the Mediatime value\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,Expected_Result,mediatime_parameter_name,mediatime_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        #Get the Mediatime value\r\n                                                                                        time.sleep(10);\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");						','ALLOCATED','These Script tests the RDK Mediaframework to set mediatime with negative big numbers in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_14.	',NULL,3,'RDKTT-77			',''),(889,5,'RMF_HNSrc_MPSink_Pause&CheckMediaTime_15',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_Pause&CheckMediaTime_14\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    if teststep == \"RMF_Element_Setmediatime\":\r\n        expectedresult =\"FAILURE\"\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    if teststep == \"RMF_Element_Setmediatime\":\r\n        if \"FAILURE\" in result.upper():\r\n                result = \"SUCCESS\";\r\n        else:\r\n                result = \"FAILURE\";\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n\r\n    return result\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(5);\r\n                                                                        #Pause the state of the pipeline\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        time.sleep(10);\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n		','ALLOCATED','These Script tests the RDK Mediaframework to check media time by pausing the pipeline . Test Case ID: CT_RMF_HNSrc_MPSink_15.',NULL,3,'				','\0'),(890,15,'RMF_HNSrcMPSink_Video_Pause_02',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSrcMPSink_Video_Pause_02\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details;\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Status of \"+ teststep+\":  %s\" %details; \r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                #waiting to maintain some buffer\r\n                                                                time.sleep(10);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Check the get state of current pipeline\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                #Pause the state of the pipeline\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        #Check the get state of current pipeline\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n','ALLOCATED','These Script tests the RDK Mediaframework video paused in HNSrc MPSink pipeline. \r\nTest Case ID: CT_RMF_HNSrc_MPSink_02.			',NULL,3,'				','\0'),(891,12,'RMF_HNSrcMPSink_Video_Play_01',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSRC_MPSINK_Video_Play_01\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(10);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework video playing in HNSrc MPSink pipeline. \r\nTest Case ID: CT_RMF_HNSrc_MPSink_01.						',NULL,4,'				','\0'),(892,15,'RMF_HNSrc_MPSink_Rewind&CheckSpeed_16',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-4.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_Rewind&CheckSpeed_16\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediaspeed\r\n    global tdkTestObj\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediaspeed=details.split(\":\");\r\n            print Mediaspeed[1];\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        tunecounter=0;\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(10);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                #Rewind with 4x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                for x in range(0,10):\r\n                                                                                                        time.sleep(1);\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                #Rewind with 4x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                for x in range(0,10):\r\n                                                                                                        time.sleep(1);\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                        if Expected_Result in result.upper():\r\n                                                                                                                if int(Mediaspeed[1]) == int(speed_parameter_value[0]):\r\n                                                                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                                else:\r\n                                                                                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework to check media time by REW  the pipeline . Test Case ID: CT_RMF_HNSrc_MPSink_16.',NULL,3,'				','\0'),(893,17,'RMF_HNSrc_MPSink_REW_16x_23',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-16.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_SetSpeed_16x_23\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediatime=details.split(\":\");\r\n            print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediaspeed=details.split(\":\");\r\n            print Mediaspeed[1];\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(30);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #Rewind with 4x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(3);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                if Expected_Result in result.upper():\r\n\r\n                                                                                                       Mediaspeed[1]=float(Mediaspeed[1]);\r\n\r\n                                                                                                       Mediatime[1]=float(Mediatime[1]);\r\n\r\n                                                                                                       initialmediatime=float(initialmediatime);\r\n\r\n                                                                                                       if (Mediatime[1]< initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n\r\n                                                                                                               print \"success\"\r\n\r\n                                                                                                               tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n                                                                                                       else:\r\n\r\n                                                                                                               print \"failed\"\r\n\r\n                                                                                                               tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n\r\n','ALLOCATED','These Script tests the RDK Mediaframework to REW the live video with 16x in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_23.',NULL,3,'				','\0'),(895,9,'RMF_HNSrc_MPSink_REW_4x_24',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[4.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_FF_4x_24\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediatime=details.split(\":\");\r\n            print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediaspeed=details.split(\":\");\r\n            print Mediaspeed[1];\r\n\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n									#Pause the HNSRC-->MPSINK pipeline\r\n									result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n									if Expected_Result in result.upper():\r\n										#Get the Mediatime value\r\n										time.sleep(60);\r\n										result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n										if Expected_Result in result.upper():\r\n											initialmediatime=Mediatime[1]\r\n											#FF with 4x\r\n											result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n											if Expected_Result in result.upper():\r\n												result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n													time.sleep(5);\r\n													result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n													if Expected_Result in result.upper():			\r\n														Mediaspeed[1]=float(Mediaspeed[1]);\r\n														Mediatime[1]=float(Mediatime[1]);\r\n														initialmediatime=float(initialmediatime);\r\n														if (Mediatime[1] > initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n															print \"success\"\r\n															tdkTestObj.setResultStatus(\"SUCCESS\");\r\n														else:\r\n															print \"failed\"\r\n															tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n','ALLOCATED','These Script tests the RDK Mediaframework to REW the live video with 4x in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_24.	',NULL,3,'				','\0'),(896,11,'RMF_HNSrc_MPSink_SetSpeed_64x_12',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,1280,0,720]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-64.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_SetSpeed_64x_12\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediatime=details.split(\":\");\r\n            print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediaspeed=details.split(\":\");\r\n            print Mediaspeed[1];\r\n\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(60);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #Rewind with 64x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(3);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n													Mediaspeed[1]=float(Mediaspeed[1]);\r\n                                                                                                	Mediatime[1]=float(Mediatime[1]);\r\n                                                                                                	initialmediatime=float(initialmediatime);\r\n                                                                                                	if (Mediatime[1]< initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                                                                                        	print \"success\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                	else:\r\n                                                                                                        	print \"failed\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n							\r\n','ALLOCATED','These Script tests the RDK Mediaframework to REW the live video with 64x in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_12.			',NULL,3,'				','\0'),(897,15,'RMF_HNSrcMPSink_Video_Skip_Backward_03',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[10,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrcMPSink_Video_Skip_Backward_03\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(10);\r\n                                                                        #Get the Mediatime value\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                #Set the Mediatime value\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,Expected_Result,mediatime_parameter_name,mediatime_parameter_value);\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n                obj.unloadModule(\"mediaframework\");\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;		','ALLOCATED','These Script tests the RDK Mediaframework video skip backward playing in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_03.			',NULL,3,'				','\0'),(898,8,'RMF_HNSrcMPSink_Video_Speed_08',495,'import tdklib;\r\ndetails=\"\"\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[1.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'CT_RMF_HNSrc_MPSink_08\');\r\n\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Check the get state of current pipeline\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n		','ALLOCATED','These Script tests the RDK Mediaframework trickplay function in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_08.					',NULL,3,'				','\0'),(899,7,'RMF_HNSrc_Open_Emptystring_06',495,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\",\"\"]\r\n\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_Open_06\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    if teststep == \"RMF_Element_Open\":\r\n        if \"FAILURE\" in result.upper():\r\n                result = \"SUCCESS\";\r\n        else:\r\n                result = \"FAILURE\";\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n                                                  ','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to set the empty string in to open method of RMF.\r\nTest Case ID: CT_RMF_HNSource_06.			',NULL,3,'				','\0'),(900,7,'RMF_HNSrc_Open_invalidurl_07',495,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\",\"\"]\r\n\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_Open_invalidurl_07\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    if teststep == \"RMF_Element_Open\":\r\n        expectedresult =\"FAILURE\"\r\n    #Execute the test case in STB\r\n\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    if teststep == \"RMF_Element_Open\":\r\n        if \"FAILURE\" in result.upper():\r\n            result = \"SUCCESS\";\r\n        else:\r\n            result = \"FAILURE\";\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n                                            ','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to set the invalid string in to open method of RMF.\r\nTest Case ID: CT_RMF_HNSource_07.					',NULL,3,'				','\0'),(901,5,'RMF_HNSrc_Open_validUrl_11',495,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_Open_ValidUrl_11\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"RMF_Element Status:  %s\" %result;\r\n    tdkTestObj.setResultStatus(result);\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Init status:  %s\" %result;\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                              \r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to set the valid http url in to open method of RMF.\r\nTest Case ID: CT_RMF_HNSource_11.						',NULL,3,'				','\0'),(902,21,'RMF_HNSrc_Open_vodurl_08',495,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_Open_vodurl_08\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    #Primitive test case which associated to this Script\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/hnStreamStart?live=vod://indemand.com/INTL0712000007101043?r=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to set the vod url in to open method of RMF.\r\nTest Case ID: CT_RMF_HNSource_08.					',NULL,3,'				','\0'),(903,11,'RMF_HNSrc_Play_DefaultSpeed_09',495,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,0]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_Play_DefaultSpeed_09\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    if teststep == \"RMF_Element_Play\":\r\n        expectedresult =\"FAILURE\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    if teststep == \"RMF_Element_Play\":\r\n        if \"FAILURE\" in result.upper():\r\n                result = \"SUCCESS\";\r\n        else:\r\n                result = \"FAILURE\";\r\n\r\n    print \"RMF_Element Status:  %s\" %result;\r\n    tdkTestObj.setResultStatus(result);\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Init status:  %s\" %result;\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                        if Expected_Result in result.upper():\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to set play with out any specific speed. \r\nTest Case ID: CT_RMF_HNSource_09.				',NULL,3,'			','\0'),(904,5,'RMF_HNSrc_Play_withoutopen_12',495,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_Play_withoutopen_10\');\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    if teststep == \"RMF_Element_Play\":\r\n        expectedresult =\"FAILURE\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    if teststep == \"RMF_Element_Play\":\r\n        if \"FAILURE\" in result.upper():\r\n                result = \"SUCCESS\";\r\n        else:\r\n                result = \"FAILURE\";\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Init status:  %s\" %result;\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                        print \"RMF_Element_Setspeed status:  %s\" %result;\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to try to play without opening the hnsrc element.\r\nTest Case ID: CT_RMF_HNSource_12.		',NULL,3,'				','\0'),(905,6,'RMF_HNSRC_Play_withoutsetsource_10',495,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSRC_Play_withoutsetsource_10\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID();\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    if teststep == \"RMF_Element_Play\":\r\n        expectedresult =\"FAILURE\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    if teststep == \"RMF_Element_Play\":\r\n        if \"FAILURE\" in result.upper():\r\n                result = \"SUCCESS\";\r\n        else:\r\n                result = \"FAILURE\";\r\n\r\n    print \"RMF_Element Status:  %s\" %result;\r\n    tdkTestObj.setResultStatus(result);\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Init status:  %s\" %result;\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                        if Expected_Result in result.upper():\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to set play with out  sink connected. \r\nTest Case ID: CT_RMF_HNSource_10.			',NULL,3,'				','\0'),(908,5,'RMF_HNSrc_SetGetSpeed_02',495,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[1.0,\"HNSrc\"]\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSRC_Setspeed_Getspeed_02\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n        print \"RMF_Element_Init status:  %s\" %parametername[item];\r\n        \r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    return result\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Init status:  %s\" %result;\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                        print \"RMF_Element_Setspeed status:  %s\" %result;\r\n                        if Expected_Result in result.upper():\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                print \"RMF_Element_Getspeed status:  %s\" %result;\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n        else:\r\n		                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to set and get speed.\r\nTest Case ID: CT_RMF_HNSrc_02.				',NULL,3,'				','\0'),(912,26,'RMF_MS_ContinousCH_Change_test',491,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_MS_ContinousCH_Change_test_27\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        i = 0;\r\n        for i in range(0,2):\r\n                print \"****************%d\" %i;\r\n                #Calling the RMFStreamer_LiveTune_Request function\r\n                tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_InterfaceTesting\');\r\n                streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n                #Framing URL for Request\r\n                url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n\r\n                print \"Request URL : %s\" %url;\r\n                tdkTestObj.addParameter(\"URL\",url);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n                print \"Live Tune Response of Json parameter : %s\" %actualresult;\r\n                #compare the actual result with expected result of Json response Parameter\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Json Response Parameter is Success\";\r\n                        details_url = tdkTestObj.getResultDetails();\r\n                        #Prmitive test case which associated to this Script\r\n                        tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_Player\');\r\n                        print \"Response URL : %s\" %details_url;\r\n                        playtime = \"30\";\r\n                        tdkTestObj.addParameter(\"VideostreamURL\",details_url);\r\n                        tdkTestObj.addParameter(\"play_time\",playtime);\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        \r\n                        print \"Live Tune Playback : %s\" %actualresult;\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                details = tdkTestObj.getResultDetails();\r\n                                print \"Live Playback is Success\";\r\n                                sleep(30);\r\n                                #Calling the RMFStreamer_LiveTune_Request function\r\n                                tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_InterfaceTesting\');\r\n                                streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n                                #Framing URL for Request\r\n                                url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n\r\n                                print \"Request URL : %s\" %url;\r\n                                tdkTestObj.addParameter(\"URL\",url);\r\n                                #Execute the test case in STB and pass the expected result\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the actual result of execution\r\n                                actualresult = tdkTestObj.getResult();\r\n                                \r\n                                print \"Live Tune Response of Json parameter : %s\" %actualresult;\r\n                                #compare the actual result with expected result of Json response Parameter\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"Json Response Parameter is Success\";\r\n                                        details_response = tdkTestObj.getResultDetails();\r\n                                        #Prmitive test case which associated to this Script\r\n                                        tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_Player\');\r\n                                        print \"Response URL : %s\" %ValidURL;\r\n                                        playtime = \"30\";\r\n                                        tdkTestObj.addParameter(\"VideostreamURL\",details_response);\r\n                                        tdkTestObj.addParameter(\"play_time\",playtime);\r\n                                        expectedresult=\"SUCCESS\";\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details3 = tdkTestObj.getResultDetails();\r\n                                        print \"Live Tune Playback : %s\" %actualresult;\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"Continous channel change Playback is Success\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"Continous channel change Playback is Failure\";\r\n\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"Json Response Parameter is Failure\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Live Playback is Failure\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Json response parameter is Failed\";\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script test the Live playback via streaming Interface by continuous channel change every 60 seconds. Test Case Id: CT_RMFStreamer_18				',NULL,3,'				','\0'),(913,33,'RMF_MS_ContionusDVR_Playback',493,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'RMF_MS_ContionusDVRPlayback_28\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"RMFStreamer module  %s\" %result;\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"RmfStreamer load successful\";\r\n         i = 0;\r\n         for i in range(0,3):\r\n                 print \"****************%d\" %i;\r\n                 #Prmitive test case which associated to this Script\r\n                 tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_Player\');\r\n                 #set the dvr play url\r\n                 streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n                 recordingObj = tdkTestObj.getRecordingDetails();\r\n                 num = recordingObj.getTotalRecordings();\r\n                 print \"Number of recordings: %d\"%num\r\n                 recordID = recordingObj.getRecordingId(num - 1);\r\n                 url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1];\r\n                 print \"The Play DVR Url Requested: %s\"%url\r\n                 tdkTestObj.addParameter(\"VideostreamURL\",url);\r\n                 #Execute the test case in STB\r\n                 expectedresult=\"SUCCESS\";\r\n                 tdkTestObj.executeTestCase(expectedresult);\r\n                 #Get the result of execution\r\n                 actualresult = tdkTestObj.getResult();\r\n\r\n                 print \"The DVR to play in normal speed : %s\" %actualresult;\r\n                 #compare the actual result with expected result\r\n                 if expectedresult in actualresult:\r\n                        #Set the result status of execution\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        details =  tdkTestObj.getResultDetails(); \r\n                        print \"DVR Playback in normal speed:[%s]\"%details;\r\n                        sleep(60);\r\n                        #Prmitive test case which associated to this Script\r\n                        tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_Player\');\r\n                        #set the dvr play url\r\n                        streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n                        recordingObj = tdkTestObj.getRecordingDetails();\r\n                        num = recordingObj.getTotalRecordings();\r\n                        print \"Number of recordings: %d\"%num\r\n                        recordID = recordingObj.getRecordingId(num - 1);\r\n                        url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-2];\r\n                        print \"The Play DVR Url Requested: %s\"%url\r\n                        tdkTestObj.addParameter(\"VideostreamURL\",url);\r\n                        #Execute the test case in STB\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        #Get the result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n                        \r\n                        print \"The DVR to play in normal speed  : %s\" %actualresult;\r\n                        #compare the actual result with expected result\r\n                        if expectedresult in actualresult:\r\n                                #Set the result status of execution\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                details =  tdkTestObj.getResultDetails();\r\n                                print \"DVR Playback in normal speed :[%s]\" %details;\r\n\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                details =  tdkTestObj.getResultDetails(); \r\n                                print \"DVR Play in normal speed Failed: [%s]\" %details;\r\n                 else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        details =  tdkTestObj.getResultDetails();\r\n                        print \"DVR Play in normal speed Failed:[%s]\" %details;\r\n\r\n         obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n         print \"Failed to RmfStreamer module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This script test the Dvr playback via streaming Interface by continuous channel change every 60 seconds. Test Case Id: CT_RMFStreamer_19				',NULL,8,'				','\0'),(920,16,'RMF_MS_LivePlayback_test',491,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_MS_LivePlayback_Test_25\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the RMFStreamer_LiveTune_Request function\r\n        tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_InterfaceTesting\');\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"URL\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        \r\n        print \"Live Tune Response of Json parameter : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                print \"Json Response Parameter is Success\";\r\n                #Prmitive test case which associated to this Script\r\n                tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_Player\');\r\n                print \"Response URL : %s\" %details;\r\n                playtime = \"30\";\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                tdkTestObj.addParameter(\"play_time\",playtime);\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details = tdkTestObj.getResultDetails();\r\n                print \"Live Tune Playback : %s\" %actualresult;\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Long Time Live Playback is Success: [%s]\"%details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Long Time Live Playback is Failure [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script test Live playback of HD/SD content  via streaming Interface. Test case ID:CT_RMFMediaStreamer_15				',NULL,5,'				','\0'),(921,15,'RMF_MS_LiveTune_Request',491,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_MS_LiveTune_Request\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the RMFStreamer_LiveTune_Request function\r\n        tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_InterfaceTesting\');\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"URL\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        \r\n        print \"Live Tune Response of Json parameter : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                \r\n                print \"Json Response Parameter is Success\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                \r\n                print \"Json response parameter is Failure\";\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting Web interface for Live tune.Test Case ID:CT_Mediastreamer_12				',NULL,1,'				','\0'),(922,16,'RMF_MS_LongTime_LivePlayback',493,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_MS_LongTime_LivePlayback_25\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the RMFStreamer_LiveTune_Request function\r\n        tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_InterfaceTesting\');\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"URL\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Live Tune Response of Json parameter : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                ValidURL = details;\r\n                print \"Json Response Parameter is Success\";\r\n                #Prmitive test case which associated to this Script\r\n                tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_Player\');\r\n                print \"Response URL : %s\" %ValidURL;\r\n                playtime = \"300\";\r\n                tdkTestObj.addParameter(\"VideostreamURL\",ValidURL);\r\n                tdkTestObj.addParameter(\"play_time\",playtime);\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details = tdkTestObj.getResultDetails();\r\n                print \"Live Tune Playback : %s\" %actualresult;\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Long Time Live Playback is Success: [%s]\"%details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Long Time Live Playback is Failure: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script test the Live playback of HD/SD content  via streaming Interface for a long period of time without changing the channel. CT_RMFStreamer_16				',NULL,15,'				','\0'),(923,20,'RMF_MS_RecordingPlayback',493,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n \r\nobj.configureTestCase(ip,port,\'RMF_MS_RecordingPlayback_26\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"RMFStreamer module :  %s\" %result;\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"RmfStreamer load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_Player\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1];\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"VideostreamURL\",url);\r\n         sleep(10);\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The DVR to play in normal speed : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"DVR Playback in normal speed: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"DVR Play in normal speed Failed :[%s]\"%details;\r\n\r\n         obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n         print \"Failed to RmfStreamer module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This scripts test the  Requesting  Recorded content playback via streaming Interface.\r\nTest case Id: CT_RMFStreamer_17				',NULL,5,'				','\0'),(930,19,'RMF_MS_Stress_LiveTune_Test',491,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_Stress_LiveTune_Test_24\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        i = 0;\r\n        for i in range(0,100):\r\n                print \"****************%d\" %i;\r\n                #Calling the RMFStreamer_LiveTune_Request function\r\n                tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_InterfaceTesting\');\r\n                streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n                #Framing URL for Request\r\n                url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=\"+streamDetails.getOCAPID();\r\n                print \"Request URL : %s\" %url;\r\n                tdkTestObj.addParameter(\"URL\",url);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                \r\n                print \"Live Tune Response of Json parameter : %s\" %actualresult;\r\n                #compare the actual result with expected result of Json response Parameter\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        details = tdkTestObj.getResultDetails();\r\n                        print \"Json Response Parameter is success\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Json response parameter is failed\";\r\n                        \r\n                time.sleep(100/1000);\r\n                #Calling the RMFStreamer_LiveTune_Request function\r\n                tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_InterfaceTesting\');\r\n                streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n                #Framing URL for Request\r\n                url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n\r\n                print \"Request URL : %s\" %url;\r\n                tdkTestObj.addParameter(\"URL\",url);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                \r\n                print \"Live Tune Response of Json parameter : %s\" %actualresult;\r\n                #compare the actual result with expected result of Json response Parameter\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        details = tdkTestObj.getResultDetails();\r\n                        print \"Json Response Parameter is SUCCESS\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Json response parameter is Failed\";\r\n                        print \"****************%d\" %i;\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting multiple Web interface request for Live tune.Test Case ID:CT_Mediastreamer_14				',NULL,3,'				','\0'),(931,16,'RMF_MS_Without_StreamInit',491,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediastreamer\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_Without_StreamInit_23\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Mediaastreamer module loading status :%s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of Mediastreamer module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        print \"Mediastreamer module loaded successfully\";\r\n        #Calling the RMFStreamer_LiveTune_Request function\r\n        tdkTestObj = obj.createTestStep(\'MS_RMFStreamer_InterfaceTesting\');\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/live=ocap://\"+streamDetails.getOCAPID();   \r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"URL\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"FAILURE\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        \r\n        print \"Live Tune Response of Json parameter : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                print \"Json Response Parameter is Failed\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                details = tdkTestObj.getResultDetails(); \r\n                print \"Json response parameter is Success\";\r\n        #unloading mediastreamer module\r\n        obj.unloadModule(\"mediastreamer\");\r\nelse:\r\n        print \"Failed to load mediastreamer module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This script tests Requesting Web interface for Live tune without VideoStreameInit in request url.Test Case ID:CT_Mediastreamer_13			',NULL,1,'This Test skipped, because it makes the agent application to crash				',''),(932,9,'RMF_HNSrc_MPSink_SetSpeed_32x_11',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-32.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_SetSpeed_32x_11\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediatime=details.split(\":\");\r\n            print Mediatime[1];\r\n    if teststep == \"RMF_Element_Getspeed\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediaspeed=details.split(\":\");\r\n            print Mediaspeed[1];\r\n\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(60);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=Mediatime[1]\r\n                                                                                #Rewind with 4x\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getspeed\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(3);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n												if Expected_Result in result.upper():\r\n													Mediaspeed[1]=float(Mediaspeed[1]);\r\n                                                                                                	Mediatime[1]=float(Mediatime[1]);\r\n                                                                                                	initialmediatime=float(initialmediatime);\r\n                                                                                                	if (Mediatime[1]< initialmediatime) and (Mediaspeed[1] == speed_parameter_value[0]):\r\n                                                                                                        	print \"success\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                	else:\r\n                                                                                                        	print \"failed\"\r\n                                                                                                        	tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n							\r\n','ALLOCATED','These Script tests the RDK Mediaframework to REW the live video with 32x in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_11.			',NULL,3,'				','\0'),(933,5,'RMF_HNSrc_MPSink_GetState_25',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_GetState_25\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global tdkTestObj\r\n    global Mediastate\r\n    global details\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep == \'RMF_Element_Getstate\':\r\n        if \'SUCCESS\'in result.upper()and \'PAUSE\' in details.upper() or \'PLAYING\' in details.upper():\r\n                result=\"SUCCESS\"\r\n        else:\r\n                result=\"FAILURE\"\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    return result\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                 #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(10);\r\n                                                                        #Check the get state of current pipeline\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                stateresult=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                tdkTestObj.setResultStatus(stateresult);\r\n\r\n                                        #Close the Hnsrc Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n			','ALLOCATED','These Script tests the RDK Mediaframework to get state while playing on live content . Test Case ID: CT_RMF_HNSrc_MPSink_25.		',NULL,3,'				','\0'),(942,4,'RMF_HNSrc_MPSink_Pause&Rewind_38',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[-4.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_Pause&Rewind_38\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global tdkTestObj\r\n    global Mediastate\r\n    global details\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep != \'RMF_Element_Getstate\':\r\n        tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    return result\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        time.sleep(10);\r\n                                                                        #Check the get state of current pipeline\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper() and \"PAUSE\" in details.upper():\r\n                                                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                                if Expected_Result in result.upper():\r\n                                                                                                        time.sleep(10);\r\n                                                                                                        stateresult=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                        if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                        else:\r\n                                                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                                        else:\r\n                                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                        else:\r\n                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        #Close the Hnsrc Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework to check state by pausing & REW the pipeline . Test Case ID: CT_RMF_HNSrc_MPSink_38.',NULL,51,'				','\0'),(943,10,'RMF_HNSrc_MPSink_Pause&FF_39',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[4.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_Pause&FF_39\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global tdkTestObj\r\n    global Mediastate\r\n    global details\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep != \'RMF_Element_Getstate\':\r\n        tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    return result\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                time.sleep(5);\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                if Expected_Result in result.upper() and \"PAUSE\" in details.upper():\r\n                                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Setspeed\',obj,Expected_Result,speed_parameter_name,speed_parameter_value);\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                time.sleep(10);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                else:\r\n                                                                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                                        else:\r\n                                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                                else:\r\n                                                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        #Close the Hnsrc Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework to check state by pausing & FF the pipeline . Test Case ID: CT_RMF_HNSrc_MPSink_39.',NULL,5,'				','\0'),(944,7,'RMF_HNSrc_MPSink_DoublePlay_40',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\nspeed_parameter_name=[\"playSpeed\",\"rmfElement\"]\r\nspeed_parameter_value=[4.0,\"HNSrc\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DoublePlay_40\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global tdkTestObj\r\n    global Mediastate\r\n    global details\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \'RMF_Element_Open\':\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n    if teststep != \'RMF_Element_Getstate\':\r\n        tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    return result\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                time.sleep(5);\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                        if Expected_Result in result.upper():\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                time.sleep(10);\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                                if Expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                                else:\r\n                                                                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                                        else:\r\n                                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                                else:\r\n                                                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        #Close the Hnsrc Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n\r\n\r\n			','ALLOCATED','These Script tests the RDK Mediaframework to Call the play method multiple times . Test Case ID: CT_RMF_HNSrc_MPSink_40.			',NULL,3,'				','\0'),(946,14,'IARMBUS_Request_resource_STRESS_56',11,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_56\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application registeres RPC\"\r\n                                i = 0;\r\n                                for i in range(0,10):\r\n                                        print \"****************%d\" %i;\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                        # Requesting decoder 0 resource\r\n                                        tdkTestObj.addParameter(\"resource_type\",1);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",1);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Allocated resource is successfully released\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n                                        time.sleep(10/1000);\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                        #Requesting decoder 0 resource\r\n                                        tdkTestObj.addParameter(\"resource_type\",2);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",2);\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value \r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Allocated  resource is successfully released\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n                        else:\r\n                               tdkTestObj.setResultStatus(\"FAILURE\");\r\n                               print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                         tdkTestObj.setResultStatus(\"FAILURE\");\r\n                         print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script tests Request multiple alternate resources for multiple times with every 100 milli seconds gap.				\r\nTEST CASE ID:CT_IARMBUS_56',NULL,3,'				','\0'),(947,22,'IARMBUS_IsConnect_STRESS_57',25,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_57\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS: Application is initialized with IARM Bus library\";\r\n                i = 0;\r\n                for i in range(0,10):\r\n                        print \"****************%d\" %i;\r\n                        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application is successfully connected with IARMBUS\";\r\n                                #calling IARMBUS API \"IARM_Bus_IsConnected\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_IsConnected\');\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details = tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_IsConnected\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: API-Is_Connected success\";\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details = tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Application successfully disconnected from IARM Bus\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n                                                print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_Bus_Isconnected failed. %s \" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n                        time.sleep(10/1000);\r\n                        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_Connect\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Application is successfully connected with IARMBUS\";\r\n                                #calling IARMBUS API \"IARM_Bus_IsConnected\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_IsConnected\');\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details = tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_IsConnected\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS: API-Is_Connected success\";\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        expectedresult=\"SUCCESS\"\r\n                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                        actualresult = tdkTestObj.getResult();\r\n                                        details = tdkTestObj.getResultDetails();\r\n                                        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n                                        if expectedresult in actualresult:\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                print \"SUCCESS: Application successfully disconnected from IARM Bus\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n                                                print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_Bus_Isconnected failed. %s \" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','This test script tests Connecting and Disconnect  IARMBUS for multiple times with gap of every 100 milli seconds				\r\nTEST CASE ID:CT_IARMBUS_57',NULL,3,'				','\0'),(948,4,'RMF_HNSrc_MPSink_Startoftsb_27',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[0.0,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_Startoftsb_27\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediatime=details.split(\":\");\r\n            print Mediatime[1];\r\n\r\n    return result\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(60);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,Expected_Result,mediatime_parameter_name,mediatime_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        time.sleep(10);\r\n                                                                                        initialmediatime=Mediatime[1]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        if Expected_Result in result.upper():\r\n												Mediatime[1]=float(Mediatime[1]);\r\n                                                                                        	initialmediatime=float(initialmediatime);\r\n                                                                                        	if (Mediatime[1] < initialmediatime) and (Mediatime[1] > 0.0):\r\n                                                                                                	print \"success\"\r\n                                                                                                	tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                        	else:\r\n                                                                                                	print \"failed\"\r\n                                                                                                	tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n			\r\n','ALLOCATED','These Script tests the RDK Mediaframework to check for start of tsb  in HNSrc MPSink pipeline. Test Case ID: CT_RMF_HNSrc_MPSink_27.				',NULL,3,'				','\0'),(949,10,'RMF_HNSrc_MPSink_DVRReplay_37',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[0.0,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\n\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_DVRReplay_37\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    #Primitive test case which associated to this Script\r\n    global Mediatime\r\n    global tdkTestObj\r\n    global Mediaspeed\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        #Primitive test case which associated to this Script\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        recordingObj = tdkTestObj.getRecordingDetails();\r\n        num = recordingObj.getTotalRecordings();\r\n        print \"Number of recordings: %d\"%num\r\n        recordID = recordingObj.getRecordingId(num - 1);\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\'+recordID[:-1]+\'&0\';\r\n        print url;\r\n        open_parameter_value.append(url);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n            Mediatime=details.split(\":\");\r\n            print Mediatime[1];\r\n\r\n    return result\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(60);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,Expected_Result,mediatime_parameter_name,mediatime_parameter_value);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        time.sleep(10);\r\n                                                                                        initialmediatime=Mediatime[1]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                        Mediatime[1]=float(Mediatime[1]);\r\n                                                                                        initialmediatime=float(initialmediatime);\r\n                                                                                        if (Mediatime[1] < initialmediatime) and (Mediatime[1] > 0.0):\r\n                                                                                                print \"success\"\r\n                                                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                        else:\r\n                                                                                                print \"failed\"\r\n                                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework to check the DVR content replay . Test Case ID: CT_RMF_HNSrc_MPSink_37.				',NULL,3,'				','\0'),(950,12,'RMF_HNSrc_MPSink_LivetsbReset_19',495,'import tdklib;\r\nimport time;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nsink_element=[\"MPSink\"]\r\nsink_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2000,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nvideorec_parameter_name=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\nvideorec_parameter_value=[0,0,720,0,1280]\r\nsetsource_parameter_name=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\nsetsource_parameter_value=[\"HNSrc\",\"MPSink\"]\r\n#ip = \"192.168.30.65\"\r\n#port = 8087\r\nip = <ipaddress>\r\nport = <port>\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nobj.configureTestCase(ip,port,\'RMF_HNSrc_MPSink_LivetsbReset_19\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global Mediatime\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    details = tdkTestObj.getResultDetails();\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    print \"Details of \"+ teststep+\":  %s\" %details;\r\n    if teststep == \"RMF_Element_Getmediatime\":\r\n        if \"SUCCESS\" in result.upper():\r\n                Mediatime=details.split(\":\");\r\n                print Mediatime[1];\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        #Creating the Hnsrc instance\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                #Creating the MPSink instance\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                if Expected_Result in result.upper():\r\n                        #Initiazing the Hnsrc Element\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                        if Expected_Result in result.upper():\r\n                                 #Initiazing the MPSink Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                if Expected_Result in result.upper():\r\n                                        #Opening the Hnsrc Element with playurl\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                                        if Expected_Result in result.upper():\r\n                                                #Setting the MPSink Element with x,y co-ordiantes\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,Expected_Result,videorec_parameter_name,videorec_parameter_value);\r\n                                                if Expected_Result in result.upper():\r\n                                                        #Selecting the source for MPSink\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,Expected_Result,setsource_parameter_name,setsource_parameter_value);\r\n                                                        if Expected_Result in result.upper():\r\n                                                                #Play the HNSRC-->MPSINK pipeline\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,Expected_Result,play_parameter_name,play_parameter_value);\r\n                                                                if Expected_Result in result.upper():\r\n                                                                        #Get the Mediatime value\r\n                                                                        time.sleep(5);\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                        if Expected_Result in result.upper():\r\n                                                                                initialmediatime=float(Mediatime[1]);\r\n                                                                                time.sleep(5400);\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                                                                if Expected_Result in result.upper():\r\n                                                                                        Mediatime[1]=float(Mediatime[1]);\r\n                                                                                        if Mediatime[1] < initialmediatime:\r\n                                                                                                print \"success\"\r\n                                                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                                        else:\r\n                                                                                                print \"failure\"\r\n                                                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n                                                #Close the Hnsrc Element\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                                        #Terminating the MPSink Element\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,sink_parameter,sink_element);\r\n                                #Terminating the HNSrc Element\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                        #Removing the MPSink Element Instances\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,sink_parameter,sink_element);\r\n                #Removing the HNSrc Element Instances\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework to clearing the lib buffer by watching it for 75 mins . Test Case ID: CT_RMF_HNSrc_MPSink_19.',NULL,95,'				','\0'),(951,18,'RMF_HNSrc_MPSink_SetGetmediaTime_03',495,'import tdklib;\r\nsrc_element=[\"HNSrc\"]\r\nExpected_Result=\"SUCCESS\"\r\nsrc_parameter=[\"rmfElement\"]\r\nopen_parameter_name=[\"rmfElement\",\"url\"]\r\nopen_parameter_value=[\"HNSrc\"]\r\nmediatime_parameter_name=[\"mediaTime\",\"rmfElement\"]\r\nmediatime_parameter_value=[2,\"HNSrc\"]\r\nplay_parameter_name=[\"rmfElement\",\"defaultPlay\",\"playTime\",\"playSpeed\"]\r\nplay_parameter_value=[\"HNSrc\",0,0.0,1.0]\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSRC_SetMediaTime_GetMediaTime_03\');\r\n\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n    if teststep == \"RMF_Element_Open\":\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \'http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\'+streamDetails.getOCAPID()+\'&tsb=1\';\r\n        print \"PLAY URL : %s\" %url;\r\n        open_parameter_value.append(url);\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    tdkTestObj.setResultStatus(result);\r\n    print \"Status of \"+ teststep+\":  %s\" %result;\r\n    return result\r\n\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif Expected_Result in loadModuleStatus.upper():\r\n\r\n        #Prmitive test case which associated to this Script\r\n        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n        if Expected_Result in result.upper():\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,Expected_Result,src_parameter,src_element);\r\n                if Expected_Result in result.upper():\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,Expected_Result,open_parameter_name,open_parameter_value);\r\n                        if Expected_Result in result.upper():\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Setmediatime\',obj,Expected_Result,mediatime_parameter_name,mediatime_parameter_value);\r\n                                if Expected_Result in result.upper():\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Getmediatime\',obj,Expected_Result,src_parameter,src_element);\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,Expected_Result,src_parameter,src_element);\r\n                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,Expected_Result,src_parameter,src_element);\r\n                print \"RMF_Element_Term status:  %s\" %result;\r\n        else:\r\n                print \"Status of RMF_Element_Create_Instance:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','These Script tests the RDK Mediaframework HNSrc element to set and getMediatime without sink element Test Case ID: CT_RMF_HNSrc_03				',NULL,1,'				','\0'),(952,22,'IARMBUS_RegUnReg_STRESS_51',22,'#use tdklib library,which provides a wrapper for tdk testcase script\r\n#Test component to be tested\r\nimport tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_51\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Iarmbus module loading status :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling IARMBUS API \"IARM_Bus_Init\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        expectedresult=\"SUCCESS/FAILURE\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_Init\r\n        if (\"SUCCESS\" in actualresult or (\"FAILURE\" in actualresult and \"INVALID_PARAM\" in details)):\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n                #calling IARMBUS API \"IARM_Bus_Connect\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of IARM_Bus_Connect\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                        #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                        expectedresult=\"SUCCESS\"\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterCall\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS :Register call success\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                # Requesting resource\r\n                                tdkTestObj.addParameter(\"resource_type\",1);\r\n                                expectedresult=\"SUCCESS\"\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                #Check for SUCCESS/FAILURE return value of IARMBUS_RequestResource\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                        for i in range(0,3):\r\n                                                print i;\r\n                                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                                # Register for IR Key event.\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                expectedresult=\"SUCCESS\";\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS :Event Handler not registered\";\r\n                                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                                        expectedresult=\"SUCCESS\";\r\n                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                        actualresult = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                        if expectedresult in actualresult:\r\n                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        else:\r\n                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler success %s\" %details;\r\n                                                time.sleep(100/1000);\r\n                                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                                # Register for IR Key event.\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                expectedresult=\"SUCCESS\";\r\n                                                tdkTestObj.executeTestCase(expectedresult);\r\n                                                actualresult = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler\r\n                                                if expectedresult in actualresult:\r\n                                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                        print \"SUCCESS :Event Handler not registered\";\r\n                                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                                        expectedresult=\"SUCCESS\";\r\n                                                        tdkTestObj.executeTestCase(expectedresult);\r\n                                                        actualresult = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler\r\n                                                        if expectedresult in actualresult:\r\n                                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        else:\r\n                                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler success %s\" %details;\r\n\r\n                                                else:\r\n                                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                        print \"FAILURE: IARM_Bus_RegisterEventHandler failed %s\" %details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership failed. %s\" %details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: IARM_Bus_RegisterCall failed. %s\" %details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: IARM_Bus_Connect failed. %s\" %details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Init failed. %s \" %details;\r\n        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n        tdkTestObj.addParameter(\"resource_type\",1);\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_ReleaseResource\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Allocated  resource is successfully released\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed. %s\" %details;\r\n        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n        expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: IARM_Bus_Disconnect failed. %s \" %details;\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the iarmbus module\r\n        obj.unloadModule(\"iarmbus\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','ALLOCATED','This test script tests Register and deregistering event handler for every 100milli seconds for \'\'n\'\'  times.				\r\nTEST CASE ID: CT_IARMBUS_51',NULL,3,'				','\0'),(954,3,'E2E_rmfapp_record_and_quit',512,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"rmfapp\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_rmfapp_record_and_quit\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nif \"SUCCESS\" in result.upper():\r\n    print \"rmf app module loaded successfully\"\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n    #Prmitive test case which associated to this Script\r\n    tdkTestObj = obj.createTestStep(\'E2E_rmfapp_record_url\');\r\n    \r\n    streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n    cmd = \'record -id 11770011 -duration 1 -title test_dvr http://\' + streamDetails.getGatewayIp() + \':8080/vldms/tuner?ocap_locator=ocap://\' + streamDetails.getOCAPID();\r\n\r\n    print streamDetails.getOCAPID()\r\n\r\n    print \"Request record URL : %s\" %cmd;\r\n    tdkTestObj.addParameter(\"rmfapp_command\",cmd);\r\n\r\n    expectedresult=\"Test Suite Executed\"\r\n\r\n    print \"Sending command to CLI interface of application...\"\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n\r\n    if expectedresult in result:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"SUCCESS: command was processed by rmfApp application.\"\r\n    else:\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        details=tdkTestObj.getResultDetails();\r\n        print \"FAILURE: rmfApp failed. Details: %s\" %details;\r\n\r\n    time.sleep(60) #delay so that playback can be observed.\r\n\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    if \".log\" in logpath:\r\n       #Transferring the application logs\r\n       tdkTestObj.transferLogs( logpath, \"false\" );\r\n    else:\r\n       print \"Log path is not available and transfer of logs will not be initialised\";\r\n\r\n    obj.unloadModule(\"rmfapp\");\r\n\r\nelse:\r\n    print \"Failed to load rmfapp module\"\r\n    #Set the module loading status\r\n    obj.setLoadModuleStatus(\"FAILURE\");\r\n','ALLOCATED','E2E_rmfapp_record_and_quit: To initiate the recording from rmfApp.				',NULL,10,'				','\0'),(970,3,'RMF_DVRManager_GetRecordingInfoById_17',523,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetRecordingInfoById_17\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvr Mgr module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    #Prmitive test case which associated to this Script   \r\n    tdkTestObj= obj.createTestStep(\'RMF_DVRManager_CheckRecordingInfoById\');\r\n\r\n    #since it is negative test case.\r\n    expectedRes = \"FAILURE\"\r\n\r\n    recordingId = \"0\"\r\n    print \"Requested record ID: %s\"%recordingId\r\n    tdkTestObj.addParameter(\"recordingId\",recordingId);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"FAILURE\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRManager GetRecordingInfoById_17 Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRManager GetRecordingInfoById_17 Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','FREE','This is a negative test case for get recording Info by Id functionality of DVR Manager class.\r\nTest Case ID: CT_RMF_DVRMgr_17\r\nTest Type: Negative				',NULL,3,'				','\0'),(971,3,'RMF_DVRManager_GetRecordingInfoByIndex_16',522,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport random;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_DVRManager_GetRecordingInfoByIndex_16\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n\r\nprint \"Mediaframework Dvrsink module loading status :%s\" %result;\r\n\r\n#Check for SUCCESS/FAILURE of Mediaframework module\r\nif \"SUCCESS\" in result.upper():\r\n    obj.setLoadModuleStatus(\"SUCCESS\");\r\n    \r\n   #Prmitive test case which associated to this Script   \r\n    tdkTestObj= obj.createTestStep(\'RMF_DVRManager_CheckRecordingInfoByIndex\');\r\n\r\n    #since it is negative test case.\r\n    expectedRes = \"FAILURE\"\r\n    index = 1000\r\n    print \"Requested index : %d\" %index;\r\n    tdkTestObj.addParameter(\"index\",index);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedRes);\r\n\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n    details = tdkTestObj.getResultDetails();\r\n    if \"FAILURE\" in result.upper():\r\n        #Set the result status of execution\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        print \"DVRMgr GetRecordingInfoByIndex _16 Successful: [%s]\" %details;\r\n    else:\r\n         tdkTestObj.setResultStatus(\"FAILURE\");\r\n         print \"DVRMgr GetRecordingInfoByIndex_16 Failed: [%s]\"%details;\r\n\r\n    #unloading mediastreamer module\r\n    obj.unloadModule(\"mediaframework\");\r\nelse:\r\n    print \"Failed to load mediaframework module\";\r\n    obj.setLoadModuleStatus(\"FAILURE\");','FREE','This is a negative test cases for get recording info by index functionality of DVR Manager class.\r\nTest Case ID: CT_RMF_DVRMgr_16\r\nTest Type: Negative				',NULL,3,'				','\0'),(982,1,'SM_DisplaySetting_SetZoomSettings',142,'# This will not test the actual functionality of setZoomSettings API.Because this API is\r\n# not yet implemented in servicemanager components itself.\r\n\r\n#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_10\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        serviceName=\"homeNetworkingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                print \"Registered Service:%s\" %serviceName;\r\n                tdkTestObj = obj.createTestStep(\'SM_DisplaySetting_SetZoomSettings\');\r\n                expectedresult=\"SUCCESS\"\r\n                # This needs to be modified once the implementation is done in SM component\r\n                videoDisplay=\"videoDisplay\";\r\n                # This needs to be modified once the implementation is done in SM component\r\n                zoomLevel=\"zoomLevel\";\r\n                tdkTestObj.addParameter(\"videoDisplay\",videoDisplay);\r\n                tdkTestObj.addParameter(\"zoomLevel\",zoomLevel);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult= tdkTestObj.getResult();\r\n                zoomdetails= tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of SM_DisplaySetting_SetZoomSettings\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS: Application succesfully executes SM_DisplaySetting_SetZoomSettings API\";\r\n                        print zoomdetails;\r\n                        if zoomLevel in zoomdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the zoom levels are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Bothe the zoom levels are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Application Failed to execute SM_DisplaySetting_SetZoomSettings API\";\r\n                # calling SM_UnRegisterService to unregister service\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script gets and sets the Zoom settings using display settings service\r\nTest Case ID: CT_SM_10				',NULL,2,'This scripting has not developed as this functionality has not been implemented by Service Manager module.				',''),(983,1,'SM_SetResolution test',141,'# This will not test the actual functionality of setCurrentResolution API.Because this API is\r\n# not yet implemented in servicemanager components itself.\r\n\r\n#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_11\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        serviceName=\"homeNetworkingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                print \"Registered Service:%s\" %serviceName;\r\n                tdkTestObj = obj.createTestStep(\'SM_DisplaySetting_SetCurrentResolution\');\r\n                expectedresult=\"SUCCESS\"\r\n                # This needs to be modified once the implementation is done in SM component\r\n                videoDisplay=\"videoDisplay\";\r\n                # This needs to be modified once the implementation is done in SM component\r\n                resolution=\"Resolution\";\r\n                tdkTestObj.addParameter(\"videoDisplay\",videoDisplay);\r\n                tdkTestObj.addParameter(\"resolution\",resolution);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult= tdkTestObj.getResult();\r\n                resolutiondetails= tdkTestObj.getResultDetails();\r\n                #Check for SUCCESS/FAILURE return value of SM_DisplaySetting_SetCurrentResolution\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS: Application succesfully executes SM_DisplaySetting_SetCurrentResolution API\";\r\n                        print resolutiondetails;\r\n                        if resolution in resolutiondetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: Both the resolutions are same\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Bothe the resolutions are not same\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Application Failed to execute SM_DisplaySetting_SetCurrentResolution API\";\r\n                # calling SM_UnRegisterService to unregister service\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script gets and sets the resolution using display settings service\r\nTest Case ID: CT_SM_11				',NULL,2,'This scripting has not developed as this functionality has not been implemented by Service Manager module				',''),(984,1,'SM_EnableMdvr test',137,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_13\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        serviceName=\"homeNetworkingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                print \"Registered Service:%s\" %serviceName;\r\n                tdkTestObj = obj.createTestStep(\'SM_HN_EnableMDVR\');\r\n                expectedresult=\"SUCCESS\"\r\n                enable=1;\r\n                tdkTestObj.addParameter(\"enable\",enable);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult= tdkTestObj.getResult();\r\n                mdvrdetails= tdkTestObj.getResultDetails();\r\n                enable=\"%s\" %enable;\r\n                #Check for SUCCESS/FAILURE return value of SM_HN_EnableMDVR\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS: Application succesfully executes SM_HN_EnableMDVR API\";\r\n                        print mdvrdetails;\r\n                        if enable in mdvrdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: MDVR enabled successfully\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Failed to enable MDVR\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Application Failed to execute SM_HN_EnableMDVR API\";\r\n                # calling SM_UnRegisterService to unregister service\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script enables or disables MDVR using Home Networking service\r\nTest Case ID: CT_SM_13						',NULL,2,'This scripting has not developed as this functionality has not been implemented by Service Manager module.				',''),(985,1,'SM_EnableVpop test',136,'#use tdklib library,which provides a wrapper for tdk testcase script\r\n#This script will not give the expected result,As it has issue with the component.\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"servicemanager\",\"1.3\");\r\n#Ip address of the selected STB for testing\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_SM_12\');\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %loadmodulestatus ;\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #calling ServiceManger - registerService API\r\n        tdkTestObj = obj.createTestStep(\'SM_RegisterService\');\r\n        expectedresult=\"SUCCESS\"\r\n        serviceName=\"homeNetworkingService\";\r\n        tdkTestObj.addParameter(\"service_name\",serviceName);\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        actualresult = tdkTestObj.getResult();\r\n        #Check for SUCCESS/FAILURE return value of SM_RegisterService\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"SUCCESS :Application successfully registered a service with serviceManger\";\r\n                print \"Registered Service:%s\" %serviceName;\r\n                tdkTestObj = obj.createTestStep(\'SM_HN_EnableVPOP\');\r\n                expectedresult=\"SUCCESS\"\r\n                enable=1;\r\n                tdkTestObj.addParameter(\"enable\",enable);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult= tdkTestObj.getResult();\r\n                vpopdetails= tdkTestObj.getResultDetails();\r\n                enable=\"%s\" %enable;\r\n                #Check for SUCCESS/FAILURE return value of SM_HN_EnableVPOP\r\n                if expectedresult in actualresult:\r\n                        print \"SUCCESS: Application succesfully executes SM_HN_EnableVPOP API\";\r\n                        print vpopdetails;\r\n                        if enable in vpopdetails:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SUCCESS: vpop enabled successfully\";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"FAILURE: Failed to enable vpop\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Application Failed to execute SM_HN_EnableVPOP API\";\r\n                # calling SM_UnRegisterService to unregister service\r\n                tdkTestObj = obj.createTestStep(\'SM_UnRegisterService\');\r\n                expectedresult=\"SUCCESS\"\r\n                tdkTestObj.addParameter(\"service_name\",serviceName);\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                #Check for SUCCESS/FAILURE return value of SM_UnRegisterService\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SUCCESS :Application successfully unRegisteres a service\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"FAILURE: Failed to unRegister the service\" ;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"FAILURE: Application failed to register a service\";\r\n        print \"[TEST EXECUTION RESULT] : %s\" %actualresult;\r\n        #Unload the servicemanager module\r\n        obj.unloadModule(\"servicemanager\");\r\nelse:\r\n        print\"Load module failed\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script enables or disables VPOP using Home Networking service\r\nTest Case ID: CT_SM_12				',NULL,2,'This scripting has not developed as this functionality has not been implemented by Service Manager module.				',''),(986,20,'RMFMS_ScheduleRecording_12',540,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\nimport random;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"Recorder\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_ScheduleRecording_12\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Recorder module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Recorder module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        obj.initiateReboot();\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'Recorder_ScheduleRecording\');\r\n        rec_id = random.randint(10000, 500000);\r\n        recording_id = str(rec_id);\r\n        duration = \"180000\";\r\n        start_time = \"0\";\r\n        utctime=tdkTestObj.getUTCTime();\r\n        tdkTestObj.addParameter(\"UTCTime\",utctime);\r\n        tdkTestObj.addParameter(\"Duration\",duration);\r\n        tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n        tdkTestObj.addParameter(\"Start_time\",start_time);\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid = streamDetails.getOCAPID();\r\n        Id = re.search(r\"\\w\\w\\w\\w\",validid);\r\n        if Id:\r\n                print \"ocapid : %s\" %validid;\r\n                tdkTestObj.addParameter(\"Source_id\",validid);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the Actual result of streaming Interface\r\n                actualresult = tdkTestObj.getResult();\r\n                Jsonurldetails = tdkTestObj.getResultDetails();\r\n                print \"Result of scheduling : %s\" %actualresult;\r\n                print \"Jsonurldetails is : %s\" %Jsonurldetails;\r\n                RequestURL = Jsonurldetails.replace(\"\\\\\",\"\");\r\n                print \"RequestURL  is : %s\" %RequestURL ;\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                        status_expected = \"acknowledgement\";\r\n                        print \"Recorder received the requested recording url\";\r\n                        time.sleep(30);\r\n                        status_actual =tdkTestObj.initiateRecorderApp(RequestURL);\r\n                        print \"Status string is: %s\"%status_actual;\r\n                        if status_expected in status_actual:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"TDK_Server received the Json Message\";\r\n                                #Prmitive test case which associated to this Script\r\n                                tdkTestObj = obj.createTestStep(\'Recorder_checkRecording_status\');\r\n                                PATTERN = validid;\r\n                                tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the Actual result of streaming Interface\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"In script **********************\"\r\n                                patterndetails = tdkTestObj.getResultDetails();\r\n                                print \"Pattern details is : %s\" %patterndetails;\r\n                                duration_int = int(duration);\r\n                                duration_sec = duration_int/1000;\r\n                                duration_string = str(duration_sec);\r\n                                print duration_string;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        if (PATTERN in patterndetails)and(duration_string in patterndetails):\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                #Getting the mplayer log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Successfully scheduled a Recording\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                #Getting the mplayer log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Recording is not completed with requested duration\";\r\n                                else:\r\n                                        print \"Failed to schedule a Recording\";\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to Receive Json Message-Please check precondition\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Recorder Failed to receive the requested request-Please check precondition\";\r\n                #unloading Recorder module\r\n                obj.unloadModule(\"Recorder\");\r\n        else:\r\n                print \"getSourceId is failed\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\nelse:\r\n        print \"Failed to load Recorder module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This test is to check scheduling current recording.\r\nTest Case Id: CT_Recorder_01\r\n				',NULL,10,'This test causes the RMFStreamer to crash and reboot the box. This is a bug in RDK				',''),(987,9,'RMFMS_ScheduleRecording_InvalidSRC_13',540,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\nimport random;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"Recorder\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_ScheduleRecording_InvalidSRC_13\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Recorder module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Recorder module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        obj.initiateReboot();\r\n        #Primitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'Recorder_ScheduleRecording\');\r\n        rec_id = random.randint(10000, 500000);\r\n        recording_id = str(rec_id);\r\n        duration = \"180000\";\r\n        start_time = \"0\";\r\n        validid = \"0x@@\";\r\n        utctime=tdkTestObj.getUTCTime();\r\n        tdkTestObj.addParameter(\"UTCTime\",utctime);\r\n        tdkTestObj.addParameter(\"Duration\",duration);\r\n        tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n        tdkTestObj.addParameter(\"Start_time\",start_time);\r\n        tdkTestObj.addParameter(\"Source_id\",validid);\r\n        #Execute the test case in STB\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the Actual result of streaming Interface\r\n        actualresult = tdkTestObj.getResult();\r\n        Jsonurldetails = tdkTestObj.getResultDetails();\r\n        print \"Result of scheduling : %s\" %actualresult;\r\n        print \"Jsonurldetails is : %s\" %Jsonurldetails;\r\n        RequestURL = Jsonurldetails.replace(\"\\\\\",\"\");\r\n        print \"RequestURL  is : %s\" %RequestURL ;\r\n        #compare the actual result with expected result\r\n        if \"SUCCESS\" in actualresult:\r\n                status_expected = \"acknowledgement\";\r\n                print \"Recorder received the requested recording url\";\r\n                time.sleep(30);\r\n                status_actual =tdkTestObj.initiateRecorderApp(RequestURL);\r\n                print \"Status string is: %s\"%status_actual;\r\n                if status_expected in status_actual:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"TDK_Server received the Json Message\";\r\n                        #Prmitive test case which associated to this Script\r\n                        tdkTestObj = obj.createTestStep(\'Recorder_checkRecording_status\');\r\n                        PATTERN = \"Complete\";\r\n                        tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n                        #Execute the test case in STB\r\n                        expectedresult=\"FAILURE\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        #Get the Actual result of streaming Interface\r\n                        actualresult = tdkTestObj.getResult();\r\n                        print \"In script **********************\"\r\n                        patterndetails = tdkTestObj.getResultDetails();\r\n                        print \"Pattern details is : %s\" %patterndetails;\r\n                        duration_int = int(duration);\r\n                        duration_sec = duration_int/1000;\r\n                        duration_string = str(duration_sec);\r\n                        print duration_string;\r\n                        #compare the actual result with expected result\r\n                        if expectedresult in actualresult:\r\n                                if (PATTERN in patterndetails)and(duration_string in patterndetails):\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"Successfully scheduled a Recording\";\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"Recording is not scheduled with requested duration\";\r\n                        else:\r\n                                print \"Failed to schedule a Recording\";\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Receive Json Message\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Recorder Failed to receive the requested recording url\";\r\n        #unloading Recorder module\r\n        obj.unloadModule(\"Recorder\");\r\nelse:\r\n        print \"Failed to load Recorder module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This test is to check scheduling current recording with Invalid sourceID.\r\nTest Case Id: CT_Recorder_02				',NULL,10,'This test causes the RMFStreamer to crash and reboot the box. This is a bug in RDK				',''),(988,8,'RMFMS_Schedule_Big_Recording_14',540,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\nimport random;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"Recorder\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_Schedule_Big_Recording_14\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Recorderer module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Recorder module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        obj.initiateReboot();\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'Recorder_ScheduleRecording\');\r\n        rec_id = random.randint(10000, 500000);\r\n        recording_id = str(rec_id);\r\n        duration = \"7200000\";\r\n        start_time = \"0\";\r\n        utctime=tdkTestObj.getUTCTime();\r\n        tdkTestObj.addParameter(\"UTCTime\",utctime);\r\n        tdkTestObj.addParameter(\"Duration\",duration);\r\n        tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n        tdkTestObj.addParameter(\"Start_time\",start_time);\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid = streamDetails.getOCAPID();\r\n        Id = re.search(r\"\\w\\w\\w\\w\",validid);\r\n        if Id:\r\n                print \"ocapid : %s\" %validid;\r\n                tdkTestObj.addParameter(\"Source_id\",validid);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the Actual result of streaming Interface\r\n                actualresult = tdkTestObj.getResult();\r\n                Jsonurldetails = tdkTestObj.getResultDetails();\r\n                print \"Result of scheduling : %s\" %actualresult;\r\n                print \"Jsonurldetails is : %s\" %Jsonurldetails;\r\n                RequestURL = Jsonurldetails.replace(\"\\\\\",\"\");\r\n                print \"RequestURL  is : %s\" %RequestURL ;\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                        status_expected = \"acknowledgement\";\r\n                        print \"Recorder received the requested recording url\";\r\n                        time.sleep(30);\r\n                        status_actual =tdkTestObj.initiateRecorderApp(RequestURL);\r\n                        print \"Status string is: %s\"%status_actual;\r\n                        if status_expected in status_actual:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"TDK_Server received the Json Message\";\r\n                                #Prmitive test case which associated to this Script\r\n                                tdkTestObj = obj.createTestStep(\'Recorder_checkRecording_status\');\r\n                                PATTERN = validid;\r\n                                tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the Actual result of streaming Interface\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"In script **********************\"\r\n                                patterndetails = tdkTestObj.getResultDetails();\r\n                                print \"Pattern details is : %s\" %patterndetails;\r\n                                duration_int = int(duration);\r\n                                duration_sec = duration_int/1000;\r\n                                duration_string = str(duration_sec);\r\n                                print duration_string;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        if (PATTERN in patterndetails)and(duration_string in patterndetails):\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Successfully scheduled a big Recording\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Recording is not scheduled  with requested duration\";\r\n                                else:\r\n                                        print \"Failed to schedule a Recording\";\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to Receive Json Message-please check precondition\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Recorder Failed to receive the request-Please check precondition\";\r\n                #unloading Recorder module\r\n                obj.unloadModule(\"Recorder\");\r\n        else:\r\n                print \"getSourceId is failed\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\nelse:\r\n        print \"Failed to load Recorder module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This test is to check scheduling current recording for many hours.\r\nTest Case Id: CT_Recorder_03				',NULL,10,'This test causes the RMFStreamer to crash and reboot the box. This is a bug in RDK				',''),(989,6,'RMFMS_Schedule_FutureRecording_15',540,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\nimport random;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"Recorder\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_Schedule_FutureRecording_15\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Recorder module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Recorder module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        obj.initiateReboot();\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'Recorder_ScheduleRecording\');\r\n        rec_id = random.randint(10000, 500000);\r\n        recording_id = str(rec_id);\r\n        duration = \"180000\";\r\n        start_time = \"100\";\r\n        utctime=tdkTestObj.getUTCTime();\r\n        tdkTestObj.addParameter(\"UTCTime\",utctime);\r\n        tdkTestObj.addParameter(\"Duration\",duration);\r\n        tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n        tdkTestObj.addParameter(\"Start_time\",start_time);\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid = streamDetails.getOCAPID();\r\n        Id = re.search(r\"\\w\\w\\w\\w\",validid);\r\n        if Id:\r\n                print \"ocapid : %s\" %validid;\r\n                tdkTestObj.addParameter(\"Source_id\",validid);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the Actual result of streaming Interface\r\n                actualresult = tdkTestObj.getResult();\r\n                Jsonurldetails = tdkTestObj.getResultDetails();\r\n                print \"Result of scheduling : %s\" %actualresult;\r\n                print \"Jsonurldetails is : %s\" %Jsonurldetails;\r\n                RequestURL = Jsonurldetails.replace(\"\\\\\",\"\");\r\n                print \"RequestURL  is : %s\" %RequestURL ;\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                        status_expected = \"acknowledgement\";\r\n                        print \"Recorder received the requested recording url\";\r\n                        time.sleep(30);\r\n                        status_actual =tdkTestObj.initiateRecorderApp(RequestURL);\r\n                        print \"Status string is: %s\"%status_actual;\r\n                        if status_expected in status_actual:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"TDK_Server received the Json Message\";\r\n                                #Prmitive test case which associated to this Script\r\n                                tdkTestObj = obj.createTestStep(\'Recorder_checkRecording_status\');\r\n                                PATTERN = validid;\r\n                                tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the Actual result of streaming Interface\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"In script **********************\"\r\n                                patterndetails = tdkTestObj.getResultDetails();\r\n                                print \"Pattern details is : %s\" %patterndetails;\r\n                                duration_int = int(duration);\r\n                                duration_sec = duration_int/1000;\r\n                                duration_string = str(duration_sec);\r\n                                print duration_string;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        if (PATTERN in patterndetails)and(duration_string in patterndetails):\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Successfully scheduled a Recording\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Future Recording is not schedule\";\r\n                                else:\r\n                                        print \"Failed to schedule a Recording\";\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to Receive Json Message\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Recorder Failed to receive the requested recording url\";\r\n                #unloading Recorder module\r\n                obj.unloadModule(\"Recorder\");\r\n        else:\r\n                print \"getSourceId is failed\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\nelse:\r\n        print \"Failed to load Recorder module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This test is to check scheduling Future recording.\r\nTest Case Id: CT_Recorder_04\r\n				',NULL,10,'This test causes the RMFStreamer to crash and reboot the box. This is a bug in RDK				',''),(990,6,'RMFMS_Schedule_ZeroSize_Recording_16',540,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\nimport random;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"Recorder\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_Schedule_ZeroSize_Recording_16\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Recorder module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Recorder module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        obj.initiateReboot();\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'Recorder_ScheduleRecording\');\r\n        rec_id = random.randint(10000, 500000);\r\n        recording_id = str(rec_id);\r\n        duration = \"0\";\r\n        start_time = \"100\";\r\n        utctime=tdkTestObj.getUTCTime();\r\n        tdkTestObj.addParameter(\"UTCTime\",utctime);\r\n        tdkTestObj.addParameter(\"Duration\",duration);\r\n        tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n        tdkTestObj.addParameter(\"Start_time\",start_time);\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid = streamDetails.getOCAPID();\r\n        Id = re.search(r\"\\w\\w\\w\\w\",validid);\r\n        if Id:\r\n                print \"ocapid : %s\" %validid;\r\n                tdkTestObj.addParameter(\"Source_id\",validid);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the Actual result of streaming Interface\r\n                actualresult = tdkTestObj.getResult();\r\n                Jsonurldetails = tdkTestObj.getResultDetails();\r\n                print \"Result of scheduling : %s\" %actualresult;\r\n                print \"Jsonurldetails is : %s\" %Jsonurldetails;\r\n                RequestURL = Jsonurldetails.replace(\"\\\\\",\"\");\r\n                print \"RequestURL  is : %s\" %RequestURL ;\r\n                #compare the actual result with expected result\r\n                if \"SUCCESS\" in actualresult:\r\n                        status_expected = \"acknowledgement\";\r\n                        print \"Recorder received the requested recording url\";\r\n                        time.sleep(30);\r\n                        status_actual =tdkTestObj.initiateRecorderApp(RequestURL);\r\n                        print \"Status string is: %s\"%status_actual;\r\n                        if status_expected in status_actual:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"TDK_Server received the Json Message\";\r\n                                #Prmitive test case which associated to this Script\r\n                                tdkTestObj = obj.createTestStep(\'Recorder_checkRecording_status\');\r\n                                PATTERN = validid;\r\n                                tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"FAILURE\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the Actual result of streaming Interface\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"In script **********************\"\r\n                                patterndetails = tdkTestObj.getResultDetails();\r\n                                print \"Pattern details is : %s\" %patterndetails;\r\n                                duration_int = int(duration);\r\n                                duration_sec = duration_int/1000;\r\n                                duration_string = str(duration_sec);\r\n                                print duration_string;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        if (PATTERN in patterndetails)and(duration_string in patterndetails):\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Successfully scheduled a Recording\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Future Recording is not schedule\";\r\n                                else:\r\n                                        print \"Failed to schedule a Recording\";\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to Receive Json Message\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Recorder Failed to receive the requested recording url\";\r\n                #unloading Recorder module\r\n                obj.unloadModule(\"Recorder\");\r\n        else:\r\n                print \"getSourceId is failed\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\nelse:\r\n        print \"Failed to load Recorder module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This test is to check scheduling a zero size recording .\r\nTest Case Id: CT_Recorder_05\r\n				',NULL,10,'This test causes the RMFStreamer to crash and reboot the box. This is a bug in RDK				',''),(991,6,'RMFMS_Schedule_SmallDuration_Recording_17',540,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\nimport random;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"Recorder\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_Schedule_SmallDuration_Recording_17\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Recorder module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Recorder module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        obj.initiateReboot();\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'Recorder_ScheduleRecording\');\r\n        rec_id = random.randint(10000, 500000);\r\n        recording_id = str(rec_id);\r\n        duration = \"20\";\r\n        start_time = \"100\";\r\n        utctime=tdkTestObj.getUTCTime();\r\n        tdkTestObj.addParameter(\"UTCTime\",utctime);\r\n        tdkTestObj.addParameter(\"Duration\",duration);\r\n        tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n        tdkTestObj.addParameter(\"Start_time\",start_time);\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid = streamDetails.getOCAPID();\r\n        Id = re.search(r\"\\w\\w\\w\\w\",validid);\r\n        if Id:\r\n                print \"ocapid : %s\" %validid;\r\n                tdkTestObj.addParameter(\"Source_id\",validid);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the Actual result of streaming Interface\r\n                actualresult = tdkTestObj.getResult();\r\n                Jsonurldetails = tdkTestObj.getResultDetails();\r\n                print \"Result of scheduling : %s\" %actualresult;\r\n                print \"Jsonurldetails is : %s\" %Jsonurldetails;\r\n                RequestURL = Jsonurldetails.replace(\"\\\\\",\"\");\r\n                print \"RequestURL  is : %s\" %RequestURL ;\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                        status_expected = \"acknowledgement\";\r\n                        print \"Recorder received the requested recording url\";\r\n                        time.sleep(30);\r\n                        status_actual =tdkTestObj.initiateRecorderApp(RequestURL);\r\n                        print \"Status string is: %s\"%status_actual;\r\n                        if status_expected in status_actual:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"TDK_Server received the Json Message\";\r\n                                #Prmitive test case which associated to this Script\r\n                                tdkTestObj = obj.createTestStep(\'Recorder_checkRecording_status\');\r\n                                PATTERN = validid;\r\n                                tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the Actual result of streaming Interface\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"In script **********************\"\r\n                                patterndetails = tdkTestObj.getResultDetails();\r\n                                print \"Pattern details is : %s\" %patterndetails;\r\n                                duration_int = int(duration);\r\n                                duration_sec = duration_int/1000;\r\n                                duration_string = str(duration_sec);\r\n                                print duration_string;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        if (PATTERN in patterndetails)and(duration_string in patterndetails):\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Successfully scheduled a Recording\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Future Recording is not schedule\";\r\n                                else:\r\n                                        print \"Failed to schedule a Recording\";\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to Receive Json Message-Please check pre-condition\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Recorder Failed to receive the request-Please check pre-condition\";\r\n                #unloading Recorder module\r\n                obj.unloadModule(\"Recorder\");\r\n        else:\r\n                print \"getSourceId is failed\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\nelse:\r\n        print \"Failed to load Recorder module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This test is to check scheduling current recording for small duration.\r\nTest Case Id: CT_Recorder_6\r\n				',NULL,10,'This test causes the RMFStreamer to crash and reboot the box. This is a bug in RDK				',''),(992,6,'RMFMS_Schedule_MinDuration_Recording_18',540,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\nimport random;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"Recorder\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_Schedule_MinDuration_Recording_18\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Recorder module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Recorder module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        obj.initiateReboot();\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'Recorder_ScheduleRecording\');\r\n        rec_id = random.randint(10000, 500000);\r\n        recording_id = str(rec_id);\r\n        duration = \"1\";\r\n        start_time = \"100\";\r\n        utctime=tdkTestObj.getUTCTime();\r\n        tdkTestObj.addParameter(\"UTCTime\",utctime);\r\n        tdkTestObj.addParameter(\"Duration\",duration);\r\n        tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n        tdkTestObj.addParameter(\"Start_time\",start_time);\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid = streamDetails.getOCAPID();\r\n        Id = re.search(r\"\\w\\w\\w\\w\",validid);\r\n        if Id:\r\n                print \"ocapid : %s\" %validid;\r\n                tdkTestObj.addParameter(\"Source_id\",validid);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the Actual result of streaming Interface\r\n                actualresult = tdkTestObj.getResult();\r\n                Jsonurldetails = tdkTestObj.getResultDetails();\r\n                print \"Result of scheduling : %s\" %actualresult;\r\n                print \"Jsonurldetails is : %s\" %Jsonurldetails;\r\n                RequestURL = Jsonurldetails.replace(\"\\\\\",\"\");\r\n                print \"RequestURL  is : %s\" %RequestURL ;\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                        status_expected = \"acknowledgement\";\r\n                        print \"Recorder received the requested recording url\";\r\n                        time.sleep(30);\r\n                        status_actual =tdkTestObj.initiateRecorderApp(RequestURL);\r\n                        print \"Status string is: %s\"%status_actual;\r\n                        if status_expected in status_actual:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"TDK_Server received the Json Message\";\r\n                                #Prmitive test case which associated to this Script\r\n                                tdkTestObj = obj.createTestStep(\'Recorder_checkRecording_status\');\r\n                                PATTERN = validid;\r\n                                tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the Actual result of streaming Interface\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"In script **********************\"\r\n                                patterndetails = tdkTestObj.getResultDetails();\r\n                                print \"Pattern details is : %s\" %patterndetails;\r\n                                duration_int = int(duration);\r\n                                duration_sec = duration_int/1000;\r\n                                duration_string = str(duration_sec);\r\n                                print duration_string;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        if (PATTERN in patterndetails)and(duration_string in patterndetails):\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Successfully scheduled a Recording\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Future Recording is not schedule\";\r\n                                else:\r\n                                        print \"Failed to schedule a Recording\";\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to Receive Json Message-Please check pre-condtion\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Recorder Failed to receive the request, Please check pre-condition\";\r\n                #unloading Recorder module\r\n                obj.unloadModule(\"Recorder\");\r\n        else:\r\n                print \"getSourceId is failed\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\nelse:\r\n        print \"Failed to load Recorder module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This test is to check scheduling a recording for minimum duration.\r\nTest Case Id: CT_Recorder_7\r\n				',NULL,10,'This test causes the RMFStreamer to crash and reboot the box. This is a bug in RDK				',''),(993,6,'RMFMS_Schedule_NegDuration_Recording_19',540,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\nimport random;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"Recorder\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_Schedule_NegDuration_Recording_19\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Recorder module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Recorder module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        obj.initiateReboot();\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'Recorder_ScheduleRecording\');\r\n        rec_id = random.randint(10000, 500000);\r\n        recording_id = str(rec_id);\r\n        duration = \"-20\";\r\n        start_time = \"100\";\r\n        utctime=tdkTestObj.getUTCTime();\r\n        tdkTestObj.addParameter(\"UTCTime\",utctime);\r\n        tdkTestObj.addParameter(\"Duration\",duration);\r\n        tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n        tdkTestObj.addParameter(\"Start_time\",start_time);\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid = streamDetails.getOCAPID();\r\n        Id = re.search(r\"\\w\\w\\w\\w\",validid);\r\n        if Id:\r\n                print \"ocapid : %s\" %validid;\r\n                tdkTestObj.addParameter(\"Source_id\",validid);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the Actual result of streaming Interface\r\n                actualresult = tdkTestObj.getResult();\r\n                Jsonurldetails = tdkTestObj.getResultDetails();\r\n                print \"Result of scheduling : %s\" %actualresult;\r\n                print \"Jsonurldetails is : %s\" %Jsonurldetails;\r\n                RequestURL = Jsonurldetails.replace(\"\\\\\",\"\");\r\n                print \"RequestURL  is : %s\" %RequestURL ;\r\n                #compare the actual result with expected result\r\n                if \"SUCCESS\" in actualresult:\r\n                        status_expected = \"acknowledgement\";\r\n                        print \"Recorder received the requested recording url\";\r\n                        time.sleep(30);\r\n                        status_actual =tdkTestObj.initiateRecorderApp(RequestURL);\r\n                        print \"Status string is: %s\"%status_actual;\r\n                        if status_expected in status_actual:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"TDK_Server received the Json Message\";\r\n                                #Prmitive test case which associated to this Script\r\n                                tdkTestObj = obj.createTestStep(\'Recorder_checkRecording_status\');\r\n                                PATTERN = validid;\r\n                                tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"FAILURE\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the Actual result of streaming Interface\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"In script **********************\"\r\n                                patterndetails = tdkTestObj.getResultDetails();\r\n                                print \"Pattern details is : %s\" %patterndetails;\r\n                                duration_int = int(duration);\r\n                                duration_sec = duration_int/1000;\r\n                                duration_string = str(duration_sec);\r\n                                print duration_string;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        if (PATTERN in patterndetails)and(duration_string in patterndetails):\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Successfully scheduled a Recording\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Recording is not scheduled for negative duration\";\r\n                                else:\r\n                                        print \"Failed to schedule a Recording\";\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to Receive Json Message\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Recorder Failed to receive the requested recording url\";\r\n                #unloading Recorder module\r\n                obj.unloadModule(\"Recorder\");\r\n        else:\r\n                print \"getSourceId is failed\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\nelse:\r\n        print \"Failed to load Recorder module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This test is to check scheduling recording with negative duration.\r\nTest Case Id: CT_Recorder_08				',NULL,10,'This test causes the RMFStreamer to crash and reboot the box. This is a bug in RDK				',''),(994,6,'RMFMS_Schedule_NegStartTime_Recording_20',540,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport re;\r\nimport random;\r\nimport time;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"Recorder\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMFMS_Schedule_NegStartTime_Recording_20\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"Recorder module loading status :%s\" %loadmodulestatus ;\r\n#Check for SUCCESS/FAILURE of Recorder module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        obj.initiateReboot();\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'Recorder_ScheduleRecording\');\r\n        rec_id = random.randint(10000, 500000);\r\n        recording_id = str(rec_id);\r\n        duration = \"180000\";\r\n        start_time = \"-20\";\r\n        utctime=tdkTestObj.getUTCTime();\r\n        tdkTestObj.addParameter(\"UTCTime\",utctime);\r\n        tdkTestObj.addParameter(\"Duration\",duration);\r\n        tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n        tdkTestObj.addParameter(\"Start_time\",start_time);\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Adding ocapid parameter\r\n        validid = streamDetails.getOCAPID();\r\n        Id = re.search(r\"\\w\\w\\w\\w\",validid);\r\n        if Id:\r\n                print \"ocapid : %s\" %validid;\r\n                tdkTestObj.addParameter(\"Source_id\",validid);\r\n                #Execute the test case in STB\r\n                expectedresult=\"FAILURE\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the Actual result of streaming Interface\r\n                actualresult = tdkTestObj.getResult();\r\n                Jsonurldetails = tdkTestObj.getResultDetails();\r\n                print \"Result of scheduling : %s\" %actualresult;\r\n                print \"Jsonurldetails is : %s\" %Jsonurldetails;\r\n                RequestURL = Jsonurldetails.replace(\"\\\\\",\"\");\r\n                print \"RequestURL  is : %s\" %RequestURL ;\r\n                #compare the actual result with expected result\r\n                if \"SUCCESS\" in actualresult:\r\n                        status_expected = \"acknowledgement\";\r\n                        print \"Recorder received the requested recording url\";\r\n                        time.sleep(30);\r\n                        status_actual =tdkTestObj.initiateRecorderApp(RequestURL);\r\n                        print \"Status string is: %s\"%status_actual;\r\n                        if status_expected in status_actual:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"TDK_Server received the Json Message\";\r\n                                #Prmitive test case which associated to this Script\r\n                                tdkTestObj = obj.createTestStep(\'Recorder_checkRecording_status\');\r\n                                PATTERN = validid;\r\n                                tdkTestObj.addParameter(\"Recording_Id\",recording_id);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the Actual result of streaming Interface\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"In script **********************\"\r\n                                patterndetails = tdkTestObj.getResultDetails();\r\n                                print \"Pattern details is : %s\" %patterndetails;\r\n                                duration_int = int(duration);\r\n                                duration_sec = duration_int/1000;\r\n                                duration_string = str(duration_sec);\r\n                                print duration_string;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        if (PATTERN in patterndetails)and(duration_string in patterndetails):\r\n                                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Successfully scheduled a Recording\";\r\n                                        else:\r\n                                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                                #Getting the log file from DUT\r\n                                                logpath=tdkTestObj.getLogPath();\r\n                                                print \"Log path : %s\" %logpath;\r\n                                                tdkTestObj.transferLogs(logpath,\"false\");\r\n                                                print \"Future Recording is not schedule\";\r\n                                else:\r\n                                        print \"Failed to schedule a Recording\";\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to Receive Json Message\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Recorder Failed to receive the requested recording url\";\r\n                #unloading Recorder module\r\n                obj.unloadModule(\"Recorder\");\r\n        else:\r\n                print \"getSourceId is failed\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\nelse:\r\n        print \"Failed to load Recorder module\";\r\n        #Set the module loading status\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This test is to check schedule a recording with negative start time.\r\nTest Case Id: CT_Recorder_9				',NULL,10,'This test causes the RMFStreamer to crash and reboot the box. This is a bug in RDK				',''),(995,2,'E2E_RMF_DVR_TrickPlay_01',556,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status : %s\" %result;\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=4.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback of Fast Forward is tested with 4x Speed from starting point of the video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load tdkintegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_01: To verify the video playback when Fast Forward is done at 4x speed from the starting point of the video								',NULL,5,'				','\0'),(997,4,'E2E_RMF_DVR_TrickPlay_02',556,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_02\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loaded: %s\" %result;\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"e2e rmf module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=8.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when Fast Forward is done at 8x Speed from starting point of the video : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load tdkintegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_02: To verify the video playback when Fast Forward is done at 8x speed from the starting point of the video						',NULL,5,'				','\0'),(998,2,'E2E_RMF_DVR_TrickPlay_03',556,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_03\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %result;\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"tdkintegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=16.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when Fast Forward is done at 16x Speed from starting point of the video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_03: To verify the video playback when Fast Forward is done at 16x speed from the starting point of the video.							',NULL,5,'				','\0'),(999,2,'E2E_RMF_DVR_TrickPlay_04',556,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_04\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :%s\" %result;\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"Tdkintegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=32.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when Fast Forward is done at 32x Speed from starting point of the video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load tdkintegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_04: To verify the video playback when Fast Forward is done at 32x speed from the starting point of the video.				',NULL,5,'				','\0'),(1000,0,'E2E_RMF_DVR_TrickPlay_05',556,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nprint \"E2e rmf scirpt called\"\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_05\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %result;\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=64.00&time_pos=0.00\'\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when Fast Forward is done at 64x Speed from starting point of the video : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_05: To verify the video playback when Fast Forward is done at 64x speed from the starting point of the video.								',NULL,5,'				','\0'),(1001,0,'E2E_RMF_DVR_TrickPlay_06',548,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#set the trick play speed\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_06\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status: %s\" %result;\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR\');\r\n\r\n         trickPlayRate = 4.0\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play rate: %f\"%trickPlayRate\r\n         tdkTestObj.addParameter(\"speed\",trickPlayRate);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when fast forward is done at 4x speed from the middle of the video : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback 4x speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback 4x speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_06: To verify the video playback when Fast Forward is done at 4x speed from the middle of the playback.						',NULL,5,'				','\0'),(1003,0,'E2E_RMF_DVR_TrickPlay_07',548,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_07\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKintegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n         #set the trick play speed\r\n         trickPlayRate = 8.0\r\n         print \"The trick play rate: %f\"%trickPlayRate\r\n         tdkTestObj.addParameter(\"speed\",trickPlayRate);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when fast forward is done at 8x speed from the middle of the video : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback 8x speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback 8x speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_07: To verify the video playback when Fast Forward is done at 8x speed from the middle of the playback.								',NULL,5,'				','\0'),(1005,2,'E2E_RMF_DVR_TrickPlay_08',548,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_08\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKintegratin module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #set the trick play speed\r\n         trickPlayRate = 16.0\r\n         print \"The trick play rate: %f\"%trickPlayRate\r\n         tdkTestObj.addParameter(\"speed\",trickPlayRate);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when fast forward is done at 16x speed from the middle of the video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback 16x speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback 16x speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKintegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_08: To verify the video playback when Fast Forward is done at 16x speed from the middle of the playback.								',NULL,5,'				','\0'),(1006,0,'E2E_RMF_DVR_TrickPlay_09',548,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_09\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #set the trick play speed\r\n         trickPlayRate = 32.0\r\n         print \"The trick play rate: %f\"%trickPlayRate\r\n         tdkTestObj.addParameter(\"speed\",trickPlayRate);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when fast forward is done at 32x speed from the middle of the video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback 32x speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback 32x speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_09: To verify the video playback when Fast Forward is done at 32x speed from the middle of the playback.								',NULL,5,'				','\0'),(1007,0,'E2E_RMF_DVR_TrickPlay_10',548,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_10\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         trickPlayRate = 64.0\r\n\r\n         print \"The trick play rate: %f\"%trickPlayRate\r\n         tdkTestObj.addParameter(\"speed\",trickPlayRate);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when fast forward is done at 64x speed from the middle of the video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback 64x speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback 64x speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_10: To verify the video playback when Fast Forward is done at 64x speed from the middle of the playback.								',NULL,5,'				','\0'),(1008,0,'E2E_RMF_DVR_TrickPlay_13',548,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_13\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #set the trick play speed\r\n         trickPlayRate = -4.0\r\n         print \"The trick play rate: %f\"%trickPlayRate\r\n         tdkTestObj.addParameter(\"speed\",trickPlayRate);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when fast rewind is done at -4x speed from the middle of the video:%s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback -4x speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback -4x speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_13: To verify the video playback when Fast rewind is done at -4x speed from the middle of the playback.							',NULL,5,'				','\0'),(1009,0,'E2E_RMF_DVR_TrickPlay_14',548,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_14\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"e2e rmf module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n         #set the trick play speed\r\n         trickPlayRate = -8.0\r\n         print \"The trick play rate: %f\"%trickPlayRate\r\n         tdkTestObj.addParameter(\"speed\",trickPlayRate);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when fast rewind is done at -8x speed from the middle of the video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback -8x speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback -8x speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_14: To verify the video playback when Fast rewind is done at -8x speed from the middle of the playback.				',NULL,5,'				','\0'),(1010,0,'E2E_RMF_DVR_TrickPlay_15',548,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_15\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #set the trick play speed\r\n         trickPlayRate = -16.0\r\n\r\n         print \"The trick play rate: %f\"%trickPlayRate\r\n         tdkTestObj.addParameter(\"speed\",trickPlayRate);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when fast rewind is done at -16x speed from the middle of the video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback -16x speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback -16x speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_15: To verify the video playback when Fast rewind is done at -16x speed from the middle of the playback.					',NULL,5,'				','\0'),(1011,0,'E2E_RMF_DVR_TrickPlay_16',548,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_15\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #set the trick play speed\r\n         trickPlayRate = -16.0\r\n         print \"The trick play rate: %f\"%trickPlayRate\r\n         tdkTestObj.addParameter(\"speed\",trickPlayRate);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when fast rewind is done at -16x speed from the middle of the video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback -16x speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback -16x speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_16: To verify the video playback when Fast rewind is done at -32x speed from the middle of the playback.								',NULL,5,'				','\0'),(1012,0,'E2E_RMF_DVR_TrickPlay_17',548,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_17\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #set the trick play speed\r\n         trickPlayRate = -64.0\r\n         print \"The trick play rate: %f\"%trickPlayRate\r\n         tdkTestObj.addParameter(\"speed\",trickPlayRate);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR playback when fast rewind is done at -64x speed from the middle of the video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Playback -64x speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Playback -64x speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_17: To verify the video playback when Fast rewind is done at -64x speed from the middle of the playback.				',NULL,5,'				','\0'),(1013,0,'E2E_RMF_DVR_TrickPlay_18',549,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_18\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_RewindFromEndPoint\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n         #Rewind speed\r\n         rSpeed = -4.00\r\n         print \"The Rewind Speed Requested: %f\"%rSpeed;\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rSpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Rewind form end Point : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Rewind From end point Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Rewind From end point Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\"); ','FREE','E2E_RMF_DVR_TrickPlay_18: To verify the video playback when Rewind is done at 4x speed from the end point of the video				',NULL,5,'				','\0'),(1014,0,'E2E_RMF_DVR_TrickPlay_19',549,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_19\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_RewindFromEndPoint\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #Rewind speed\r\n         rSpeed = -8.00\r\n         print \"The Rewind Speed Requested: %f\"%rSpeed;\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rSpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Rewind form end Point : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Rewind From end point Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Rewind From end point Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_19: To verify the video playback when Rewind is done at 8x speed from the end point of the video.								',NULL,5,'				','\0'),(1015,0,'E2E_RMF_DVR_TrickPlay_20',549,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_19\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_RewindFromEndPoint\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #Rewind speed\r\n         rSpeed = -8.00\r\n         print \"The Rewind Speed Requested: %f\"%rSpeed;\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rSpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Rewind from end Point: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Rewind From end point Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Rewind From end point Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_20: To verify the video playback when Rewind is done at 16x speed from the end point of the video.				',NULL,5,'				','\0'),(1016,0,'E2E_RMF_DVR_TrickPlay_21',549,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_21\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_RewindFromEndPoint\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #Rewind speed\r\n         rSpeed = -32.00\r\n         print \"The Rewind Speed Requested: %f\"%rSpeed;\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rSpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Rewind form end Point: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Rewind From end point Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Rewind From end point Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_21: To verify the video playback when Rewind is done at 32x speed from the end point of the video.				',NULL,5,'				','\0'),(1017,0,'E2E_RMF_DVR_TrickPlay_22',549,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_22\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_TrickPlay_RewindFromEndPoint\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         #Rewind speed\r\n         rSpeed = -64.00\r\n         print \"The Rewind Speed Requested: %f\"%rSpeed;\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rSpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Rewind from end Point : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Rewind From end point Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Rewind From end point Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_22: To verify the video playback when Rewind is done at 64x speed from the end point of the video.				',NULL,5,'				','\0'),(1018,0,'E2E_RMF_DVR_TrickPlay_25',536,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_25\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Pause\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Pause on the video which is playing : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Pause on the video playing Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Pause on the video playing Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"TDKIntegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_25: To verify pause on a video which is playing.					',NULL,5,'				','\0'),(1019,0,'E2E_RMF_DVR_TrickPlay_26',542,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_26\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Pause_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=0.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Play on the video which is paused: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play on the video paused Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play on the video paused Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_26: To verify play on a video which is paused.				',NULL,5,'				','\0'),(1020,0,'E2E_RMF_DVR_TrickPlay_27',539,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_27\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Pause_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Play Pause Play on the video playback : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play Pause Play Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play Pause Play Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_27: To verify the pause and play by playing the video from the starting point and pausing it after sometime and then again playing it till the end				',NULL,5,'				','\0'),(1021,0,'E2E_RMF_DVR_TrickPlay_28',544,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Number of times the pause/play should repeat.\r\nrepeatCount = 5;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_28\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Pause_Play_Repeat\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The Number of times repeat requested: %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Pause Play repeating number of times on the video playback: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Pause Play multiple times Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Pause Play multiple times Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_28: To verify the pause/play in a video playback by doing pause and play multiple times between the starting and end point of the video				',NULL,5,'				','\0'),(1022,0,'E2E_RMF_DVR_TrickPlay_29',555,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Number of times the pause/play should repeat.\r\nskipNumOfSec = 30;\r\n\r\n#Number of repeatation\r\nrepeatCount = 1;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_29\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Skip_Forward_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The number of seconds to be skiped from strating of video: %d\"%skipNumOfSec\r\n         tdkTestObj.addParameter(\"seconds\",skipNumOfSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Skip number of seconds from starting point of video : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Skip number of seconds Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Skip number of seconds Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_29: To verify the video playback when Skip forward is done once from the starting point of the video.				',NULL,5,'				','\0'),(1024,2,'E2E_RMF_DVR_TrickPlay_31',554,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Number of times the pause/play should repeat.\r\nskipNumOfSec = 30;\r\n\r\n#Number of repeatation\r\nrepeatCount = 1;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_31\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Skip_Forward_From_Middle\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The number of seconds to be skiped from strating of video: %d\"%skipNumOfSec\r\n         tdkTestObj.addParameter(\"seconds\",skipNumOfSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Skip number of seconds from middle of video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Skip number of seconds from middle of video Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Skip number of seconds from middle of video Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_31:To verify the video playback when Skip forward is done once from the middle of the video playback.				',NULL,5,'				','\0'),(1025,0,'E2E_RMF_DVR_TrickPlay_32',554,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Number of times the pause/play should repeat.\r\nskipNumOfSec = 10;\r\n\r\n#Number of repeatation\r\nrepeatCount = 5;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_32\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Skip_Forward_From_Middle\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The number of seconds to be skiped from middle of video: %d\"%skipNumOfSec\r\n         tdkTestObj.addParameter(\"seconds\",skipNumOfSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Skip number of seconds from middle of video done multiple times : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Skip number of seconds from middle of video multiple time Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Skip number of seconds from middle of video multiple time Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_32: To verify the video playback when Skip forward is done multile times from the middle of the video playback.					',NULL,5,'				','\0'),(1026,0,'E2E_RMF_DVR_TrickPlay_33',553,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Number of times the pause/play should repeat.\r\nskipNumOfSec = 30;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_33\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Skip_Forward_From_End\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The number of seconds to be skiped from end of video: %d\"%skipNumOfSec\r\n         tdkTestObj.addParameter(\"seconds\",skipNumOfSec);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Skip number of seconds from end of video: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Skip number of seconds from end of video Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Skip number of seconds from end of video Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_33: To verify the video playback when Skip forward is done after the video has reached the end point.				',NULL,5,'				','\0'),(1027,0,'E2E_RMF_DVR_TrickPlay_34',550,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Number of times the pause/play should repeat.\r\nskipNumOfSec = 30;\r\n\r\n#Number of repeatation\r\nrepeatCount = 1;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_34\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Skip_Backward_From_End\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The number of seconds to be skiped from end of video: %d\"%skipNumOfSec\r\n         tdkTestObj.addParameter(\"seconds\",skipNumOfSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Skip number of seconds from End of video :%s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Skip number of seconds from end of video Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Skip number of seconds from end of video Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_34: To verify the video playback when Skip backward is done once after the video has reached the end point.				',NULL,5,'				','\0'),(1028,0,'E2E_RMF_DVR_TrickPlay_35',550,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Number of times the pause/play should repeat.\r\nskipNumOfSec = 10;\r\n\r\n#Number of repeatation\r\nrepeatCount = 5;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_35\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKintegration module load successful\";\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Skip_Backward_From_End\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The number of seconds to be skiped from end of video: %d\"%skipNumOfSec\r\n         tdkTestObj.addParameter(\"seconds\",skipNumOfSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Skip number of seconds from end multiple times : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Skip number of seconds from end multiple times Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Skip number of seconds from end multiple times Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKintegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_35: To verify the video playback when Skip backward is done multiple times after the video has reached the end point.				',NULL,5,'				','\0'),(1029,0,'E2E_RMF_DVR_TrickPlay_36',551,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Number of times the pause/play should repeat.\r\nskipNumOfSec = 10;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_36\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Skip_Backward_From_Middle\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The number of seconds to be skiped from end of video: %d\"%skipNumOfSec\r\n         tdkTestObj.addParameter(\"seconds\",skipNumOfSec);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Skip number of seconds from middle: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Skip number of seconds from middle Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Skip number of seconds from middle Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKintegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_36: To verify the video playback when Skip backward is done once from the middle of the video playback. 				',NULL,5,'				','\0'),(1030,0,'E2E_RMF_DVR_TrickPlay_37',552,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Number of times the pause/play should repeat.\r\nskipNumOfSec = 20;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_37\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKintegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Skip_Backward_From_Starting\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The number of seconds to be skiped from strating of video: %d\"%skipNumOfSec\r\n         tdkTestObj.addParameter(\"seconds\",skipNumOfSec);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Skip number of seconds from starting point of video  : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Skip number of seconds from starting Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Skip number of seconds from starting Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKintegrationmodule\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_37: To verify the video playback when Skip backward is done at the starting point of the video.				',NULL,5,'				','\0'),(1031,0,'E2E_RMF_DVR_TrickPlay_38',547,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for rewind\r\nrewindPlaySpeed = -4;\r\n\r\n#Set the trick play speed for forward\r\nforwardPlaySpeed = 4\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_38\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Rewind_Forward\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed rewind requested: %f\"%rewindPlaySpeed\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rewindPlaySpeed);\r\n\r\n         print \"The trick play speed for forward requested: %f\"%forwardPlaySpeed\r\n         tdkTestObj.addParameter(\"forwardSpeed\",forwardPlaySpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play in normal speed and rewind and forward in 4x speed: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play in 1.0 and rewind forward in 4x Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play in normal speed and rewind forward in 4x Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_38: To verify the transition in the video playback by allowing the video to play for sometime and then rewind the video for sometime and then do Fast Forward at 4x speed.					',NULL,5,'				','\0'),(1032,0,'E2E_RMF_DVR_TrickPlay_39',547,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for rewind\r\nrewindPlaySpeed = -4;\r\n\r\n#Set the trick play speed(any speed: 4x, 8x, 16x, 32x, 64x) for forward\r\nforwardPlaySpeed = 8\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_39\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Rewind_Forward\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed rewind requested: %f\"%rewindPlaySpeed\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rewindPlaySpeed);\r\n\r\n         print \"The trick play speed for forward requested: %f\"%forwardPlaySpeed\r\n         tdkTestObj.addParameter(\"forwardSpeed\",forwardPlaySpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play in normal speed and rewind in -4x and forward in any speed: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play in 1.0 and rewind in -4x and forward in any speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play in normal speed and rewind in -4x and forward in any speed Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_39: To verify the transition in the video playback by allowing the video to play for sometime and then rewind the video to the starting point and then do Fast Forward at various speeds.				',NULL,5,'				','\0'),(1033,0,'E2E_RMF_DVR_TrickPlay_40',535,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for rewind\r\nrewindPlaySpeed = -4;\r\n\r\n#Set the trick play speed for forward\r\nforwardPlaySpeed = 4\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_40\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Forward_Rewind\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed rewind requested: %f\"%rewindPlaySpeed\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rewindPlaySpeed);\r\n\r\n         print \"The trick play speed for forward requested: %f\"%forwardPlaySpeed\r\n         tdkTestObj.addParameter(\"forwardSpeed\",forwardPlaySpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play in normal speed and forward and rewind in 4x speed : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play in 1.0 and forward rewind in 4x Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play in normal speed and forward rewind in 4x Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_40: To verify the transition in the video playback by allowing the video to play for sometime and then fast forward the video for sometime and then do rewind at 4x speed.				',NULL,5,'				','\0'),(1034,0,'E2E_RMF_DVR_TrickPlay_41',535,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for forward\r\nforwardPlaySpeed = 4\r\n\r\n#Set the trick play speed(any speed: 4x, 8x, 16x, 32x, 64x)  for rewind\r\nrewindPlaySpeed = -8;\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_41\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Forward_Rewind\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed for forward requested: %f\"%forwardPlaySpeed\r\n         tdkTestObj.addParameter(\"forwardSpeed\",forwardPlaySpeed);\r\n\r\n         print \"The trick play speed rewind requested: %f\"%rewindPlaySpeed\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rewindPlaySpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play in normal speed and  forward in 4x speed rewind in any speed: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play in 1.0 and forward in 4x and rewind in any speed Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play in normal speed and forward in 4x and rewind in any speed  Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_41: To verify the transition in the video playback by allowing the video to play for sometime and then do Fast Forward to the ending point and then do Rewind at various speeds.				',NULL,5,'				','\0'),(1035,0,'E2E_RMF_DVR_TrickPlay_43',543,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for forward\r\nforwardPlaySpeed = 4\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_43\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_FF_FR_Pause_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed for forward requested: %f\"%forwardPlaySpeed\r\n         tdkTestObj.addParameter(\"trickPlayRate\",forwardPlaySpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play in normal speed, forward in 4x, pause and play: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play in normal speed, forward in 4x, pause and play Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play in normal speed, forward in 4x, pause and play Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_43: To verify the transition in the video playback by allowing the video to play for sometime, then doing Fast Forward at 4x speed and then pause & play the video.				',NULL,5,'				','\0'),(1036,0,'E2E_RMF_DVR_TrickPlay_44',543,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for forward\r\nrewindPlaySpeed = -4\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_44\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKintegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_FF_FR_Pause_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed for rewind requested: %f\"%rewindPlaySpeed\r\n         tdkTestObj.addParameter(\"trickPlayRate\",rewindPlaySpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play in normal speed, rewind in -4x, pause and play: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play in normal speed, rewind in -4x, pause and play Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play in normal speed, rewind in -4x, pause and play Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_44: To verify the transition in the video playback by allowing the video to play for sometime, then doing Rewind at 4x speed and then pause & play the video.				',NULL,5,'				','\0'),(1037,0,'E2E_RMF_DVR_TrickPlay_45',537,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for forward\r\nforwardPlaySpeed = 4\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_45\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Pause_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed for forward requested: %f\"%forwardPlaySpeed\r\n         tdkTestObj.addParameter(\"trickPlayRate\",forwardPlaySpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play in normal speed, pause and forward in 4x: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play in normal speed, pause and forward in 4x Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play in normal speed, pause and forward in 4x Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_45: To verify the transition in the video playback by allowing the video to play for sometime, then pause the video and then do Fast Forward at 4x speed while the video is paused.					',NULL,5,'				','\0'),(1038,0,'E2E_RMF_DVR_TrickPlay_46',537,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for forward\r\nrewindPlaySpeed = -4.0\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_46\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Pause_FF_FR\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed for rewind requested: %f\"%rewindPlaySpeed\r\n         tdkTestObj.addParameter(\"trickPlayRate\",rewindPlaySpeed);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play in normal speed, pause and rewind in -4x : %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play in normal speed, pause and rewind in -4x Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play in normal speed, pause and rewind in -4x Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_46: To verify the transition in the video playback by allowing the video to play for sometime, then pause the video and then do Fast Rewind at 4x speed while the video is paused.					',NULL,5,'				','\0'),(1039,0,'E2E_RMF_DVR_TrickPlay_48',545,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the Number of seconds to skipforward.\r\nskipForwardSec = 10\r\n\r\n#Set the Number of seconds to skipbackward.\r\nskipBackwardSec = 10\r\n\r\n#Number of repeatation\r\nrepeatCount = 5;\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_48\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"Tdkintegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Pause_Play_SF_SB\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The number of seconds to skip forward requested: %d\"%skipForwardSec\r\n         tdkTestObj.addParameter(\"sfSeconds\",skipForwardSec);\r\n\r\n         print \"The number of seconds to skip backward requested: %d\"%skipBackwardSec\r\n         tdkTestObj.addParameter(\"sbSeconds\",skipBackwardSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play, pause, play and skip forward/backward multiple times: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR to play, pause, play and skip forward/backward multiple times Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR to play, pause, play and skip forward/backward multiple times Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_48: To verify the video playback by playing the video from the starting point and pausing it after sometime and again playing the video and then doing a (skip forward/skip backward) multiple times.				',NULL,5,'				','\0'),(1040,0,'E2E_RMF_DVR_TrickPlay_49',534,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for forward\r\nforwardPlaySpeed = 4;\r\n\r\n#Set the trick play speed for rewind\r\nrewindPlaySpeed = -4;\r\n\r\n#Set the Number of seconds to skipforward.\r\nskipForwardSec = 10\r\n\r\n#Set the Number of seconds to skipbackward.\r\nskipBackwardSec = 10\r\n\r\n#Number of repeatation\r\nrepeatCount = 1;\r\n\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_49\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_FF_FR_SF_SB\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed forward requested: %f\"%forwardPlaySpeed\r\n         tdkTestObj.addParameter(\"forwardSpeed\",forwardPlaySpeed);\r\n\r\n         print \"The trick play speed rewind requested: %f\"%rewindPlaySpeed\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rewindPlaySpeed);\r\n\r\n         print \"The number of seconds to skip forward requested: %d\"%skipForwardSec\r\n         tdkTestObj.addParameter(\"sfSeconds\",skipForwardSec);\r\n\r\n         print \"The number of seconds to skip backward requested: %d\"%skipBackwardSec\r\n         tdkTestObj.addParameter(\"sbSeconds\",skipBackwardSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_49: To verify the video playback when (Fast Forward/Rewind) is done at 4x speed from the starting point of the video and then (Skip Forward/Skip Backward) is done once.				',NULL,5,'				','\0'),(1041,0,'E2E_RMF_DVR_TrickPlay_50',534,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for forward\r\nforwardPlaySpeed = 4;\r\n\r\n#Set the trick play speed for rewind\r\nrewindPlaySpeed = -4;\r\n\r\n#Set the Number of seconds to skipforward.\r\nskipForwardSec = 10\r\n\r\n#Set the Number of seconds to skipbackward.\r\nskipBackwardSec = 10\r\n\r\n#Number of repeatation\r\nrepeatCount = 5;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_50\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"Tdkintegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_FF_FR_SF_SB\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed forward requested: %f\"%forwardPlaySpeed\r\n         tdkTestObj.addParameter(\"forwardSpeed\",forwardPlaySpeed);\r\n\r\n         print \"The trick play speed rewind requested: %f\"%rewindPlaySpeed\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rewindPlaySpeed);\r\n\r\n         print \"The number of seconds to skip forward requested: %d\"%skipForwardSec\r\n         tdkTestObj.addParameter(\"sfSeconds\",skipForwardSec);\r\n\r\n         print \"The number of seconds to skip backward requested: %d\"%skipBackwardSec\r\n         tdkTestObj.addParameter(\"sbSeconds\",skipBackwardSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds multiple time: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds multiple time Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds multiple time Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_50: To verify the video playback when (Fast Forward/Rewind) is done at 4x speed from the starting point of the video and then (Skip Forward/Skip Backward) is done multiple times.					',NULL,5,'				','\0'),(1042,0,'E2E_RMF_DVR_TrickPlay_51',534,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for forward\r\nforwardPlaySpeed = 16;\r\n\r\n#Set the trick play speed for rewind\r\nrewindPlaySpeed = -4;\r\n\r\n#Set the Number of seconds to skipforward.\r\nskipForwardSec = 10\r\n\r\n#Set the Number of seconds to skipbackward.\r\nskipBackwardSec = 10\r\n\r\n#Number of repeatation\r\nrepeatCount = 1;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_51\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"Tdkintegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_FF_FR_SF_SB\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed forward requested: %f\"%forwardPlaySpeed\r\n         tdkTestObj.addParameter(\"forwardSpeed\",forwardPlaySpeed);\r\n\r\n         print \"The trick play speed rewind requested: %f\"%rewindPlaySpeed\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rewindPlaySpeed);\r\n\r\n         print \"The number of seconds to skip forward requested: %d\"%skipForwardSec\r\n         tdkTestObj.addParameter(\"sfSeconds\",skipForwardSec);\r\n\r\n         print \"The number of seconds to skip backward requested: %d\"%skipBackwardSec\r\n         tdkTestObj.addParameter(\"sbSeconds\",skipBackwardSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_51: To verify the playback of a long duration video when (Fast Forward/Rewind) is done at various speeds from the starting point of the video and then (Skip Forward/Skip Backward) is done once.				',NULL,5,'				','\0'),(1043,0,'E2E_RMF_DVR_TrickPlay_52',534,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Set the trick play speed for forward\r\nforwardPlaySpeed = 16;\r\n\r\n#Set the trick play speed for rewind\r\nrewindPlaySpeed = -4;\r\n\r\n#Set the Number of seconds to skipforward.\r\nskipForwardSec = 10\r\n\r\n#Set the Number of seconds to skipbackward.\r\nskipBackwardSec = 10\r\n\r\n#Number of repeatation\r\nrepeatCount = 5;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_52\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"Tdkintegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_FF_FR_SF_SB\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The trick play speed forward requested: %f\"%forwardPlaySpeed\r\n         tdkTestObj.addParameter(\"forwardSpeed\",forwardPlaySpeed);\r\n\r\n         print \"The trick play speed rewind requested: %f\"%rewindPlaySpeed\r\n         tdkTestObj.addParameter(\"rewindSpeed\",rewindPlaySpeed);\r\n\r\n         print \"The number of seconds to skip forward requested: %d\"%skipForwardSec\r\n         tdkTestObj.addParameter(\"sfSeconds\",skipForwardSec);\r\n\r\n         print \"The number of seconds to skip backward requested: %d\"%skipBackwardSec\r\n         tdkTestObj.addParameter(\"sbSeconds\",skipBackwardSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR to play, Forward/rewind and Skip forward/backward number of seconds Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_52: To verify the playback of a long duration video when (Fast Forward/Rewind) is done at various speeds from the starting point of the video and then (Skip Forward/Skip Backward) is done multiple times.				',NULL,5,'				','\0'),(1044,0,'E2E_RMF_DVR_TrickPlay_54',538,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_54\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Pause_Pause\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Play, Pause and Pause on video playback:%s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play, Pause and Pause on video playback Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play, Pause and Pause on video playback Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_54: To verify the dvr pause on already paused playback.				',NULL,5,'				','\0'),(1045,0,'E2E_RMF_DVR_TrickPlay_55',546,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_55\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"Tdkintegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Play_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=32.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Play and Play on video playback on video playback:%s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Play and Play on video playback Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Play and Play on video playback Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_55: To verify the dvr play on already playing playback.				',NULL,5,'				','\0'),(1046,5,'E2E_Rmf_LinearTV_H.264_AAC_26',556,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_H.264_AAC_26\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"TDKIntegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is Failure\";\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests the playback of H.264 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_26				',NULL,5,'				','\0'),(1047,6,'E2E_Rmf_LinearTV_H.264_AC3_25',556,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_H.264_AC3_25\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"TDKIntegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n               #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n                print \"The E2E LinearTv Play :%s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                \r\n                print \"Json response Failure\";\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of H.264 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_25					',NULL,5,'				','\0'),(1048,2,'E2E_Rmf_LinearTV_H.264_MP3_27',556,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_H.264_MP3_27\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"TDKIntegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is Failure\";\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests the playback of H.264 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_27				',NULL,5,'				','\0'),(1049,2,'E2E_Rmf_LinearTV_H.264_WAV_28',556,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_H.264_WAV_28\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"TDKIntegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play  : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is success\";\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests the playback of H.264 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_28				',NULL,5,'				','\0'),(1050,4,'E2E_Rmf_LinearTV_MPEG2_AAC_19',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_MPEG2_AAC_19\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"LinearTV module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"Tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is Failure\";\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests the playback of MPEG2 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_19 				',NULL,5,'				','\0'),(1051,2,'E2E_Rmf_LinearTV_MPEG2_AC3_17',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_MPEG2_AC3_17\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is success\";\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG2 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_17				',NULL,5,'				','\0'),(1052,2,'E2E_Rmf_LinearTV_MPEG2_MP3_21',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_MPEG2_MP3_21\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is success\";\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG2 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_21				',NULL,5,'				','\0'),(1053,2,'E2E_Rmf_LinearTV_MPEG2_WAV_23',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_MPEG2_WAV_23\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is success\";\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG2 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_23 				',NULL,5,'				','\0'),(1054,2,'E2E_Rmf_LinearTV_MPEG4_AAC_20',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_MPEG4_AAC_20\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is success\";\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");				','FREE','This script tests the playback of MPEG4 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_20 				',NULL,5,'				','\0'),(1055,2,'E2E_Rmf_LinearTV_MPEG4_AC3_18',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_MPEG4_AC3_18\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is success\";\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG4 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_18				',NULL,5,'				','\0'),(1056,2,'E2E_Rmf_LinearTV_MPEG4_MP3_22',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_MPEG4_MP3_22\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is success\";\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG4 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_22					',NULL,5,'				','\0'),(1057,6,'E2E_Rmf_LinearTV_MPEG4_WAV_24',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_MPEG4_WAV_24\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is success\";\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG4 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_24				',NULL,5,'				','\0'),(1058,0,'E2E_RMF_LinearTV_TuneHD_02',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneHD_02\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"Tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response Parameter is success\";\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n                obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests tuning of a  HD service in End-to-End scenario\r\nTest Case ID: E2E_LinearTV_02					',NULL,5,'				','\0'),(1059,2,'E2E_Rmf_LinearTV_TuneHD-HD_06',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_TuneHD-HD_06\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"TDKIntegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                details =  tdkTestObj.getResultDetails();\r\n                print \"The E2E LinearTv Play HD Tune : %s\" %actualresult;\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                        #Set the result status of execution\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n                        #Stream details for tuning\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'04\');\r\n                        #Framing URL for Request\r\n                        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n\r\n                        print \"Result of Json Response : %s\" %actualresult;\r\n                        #compare the actual result with expected result of Json response Parameter\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                details = tdkTestObj.getResultDetails();\r\n                                #Remove unwanted part from URL\r\n                                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                                ValidURL = PLAYURL[-1];\r\n                                print \"Json Response Parameter is success\";\r\n                                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n                                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details =  tdkTestObj.getResultDetails();\r\n                                print \"The E2E LinearTv Play SD-SD: %s\" %actualresult;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        #Set the result status of execution\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"E2E LinearTv HD-HD Playback Failed: [%s]\"%details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"E2E LinearTv SD Playback Failed: [%s]\"%details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        else:\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load TDKIntegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of an HD service from another HD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_06 				',NULL,5,'				','\0');
INSERT INTO `script` VALUES (1060,2,'E2E_Rmf_LinearTV_TuneHD-SD_05',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_TuneHD-SD_05\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"TDKIntegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                details =  tdkTestObj.getResultDetails();\r\n                print \"The E2E LinearTv Play HD Tune : %s\" %actualresult;\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                        #Set the result status of execution\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n                        #Stream details for tuning\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'04\');\r\n                        #Framing URL for Request\r\n                        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n\r\n                        print \"Result of Json Response : %s\" %actualresult;\r\n                        #compare the actual result with expected result of Json response Parameter\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                details = tdkTestObj.getResultDetails();\r\n                                #Remove unwanted part from URL\r\n                                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                                ValidURL = PLAYURL[-1];\r\n                                print \"Json Response Parameter is success\";\r\n                                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n                                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n                                details =  tdkTestObj.getResultDetails();\r\n                                print \"The E2E LinearTv Play HD-SD : %s\" %actualresult;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        #Set the result status of execution\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"E2E LinearTv HD-SD Playback Failed: [%s]\"%details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        else:\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load TDKIntegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of an HD service from another SD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_05					',NULL,5,'				','\0'),(1061,2,'E2E_Rmf_LinearTV_TuneSD-HD_04',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_TuneSD-HD_04\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"TKIntegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n                print \"The E2E LinearTv Play SD Tune : %s\" %actualresult;\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                        #Set the result status of execution\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        details =  tdkTestObj.getResultDetails();\r\n                        print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n                        #Stream details for tuning\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n                        #Framing URL for Request\r\n                        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n\r\n                        print \"Result of Json Response : %s\" %actualresult;\r\n                        #compare the actual result with expected result of Json response Parameter\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                details = tdkTestObj.getResultDetails();\r\n                                #Remove unwanted part from URL\r\n                                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                                ValidURL = PLAYURL[-1];\r\n                                print \"Json Response Parameter is success\";\r\n                                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n                                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n\r\n                                print \"The E2E LinearTv Play SD-HD Tuning: %s\" %actualresult;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        #Set the result status of execution\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        details =  tdkTestObj.getResultDetails();\r\n                                        print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        details =  tdkTestObj.getResultDetails();\r\n                                        print \"E2E LinearTv SD-HD Playback Failed: [%s]\"%details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                details =  tdkTestObj.getResultDetails();\r\n                                print \"E2E LinearTv SD Playback Failed: [%s]\"%details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        else:\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load TDKintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of an SD service from another HD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_04				',NULL,5,'				','\0'),(1062,6,'E2E_Rmf_LinearTV_TuneSD-SD_03',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_TuneSD-SD_03\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"TKIntegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n                print \"The E2E LinearTv Play SD Tune : %s\" %actualresult;\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                        #Set the result status of execution\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        details =  tdkTestObj.getResultDetails();\r\n                        print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n                        #Stream details for tuning\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n                        #Framing URL for Request\r\n                        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n\r\n                        print \"Result of Json Response : %s\" %actualresult;\r\n                        #compare the actual result with expected result of Json response Parameter\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                details = tdkTestObj.getResultDetails();\r\n                                #Remove unwanted part from URL\r\n                                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                                ValidURL = PLAYURL[-1];\r\n                                print \"Json Response Parameter is success\";\r\n                                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n                                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n                                #Execute the test case in STB\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                actualresult = tdkTestObj.getResult();\r\n\r\n                                print \"The E2E LinearTv Play SD-SD Tuning: %s\" %actualresult;\r\n                                #compare the actual result with expected result\r\n                                if expectedresult in actualresult:\r\n                                        #Set the result status of execution\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        details =  tdkTestObj.getResultDetails();\r\n                                        print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        details =  tdkTestObj.getResultDetails();\r\n                                        print \"E2E LinearTv SD-HD Playback Failed: [%s]\"%details;\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                details =  tdkTestObj.getResultDetails();\r\n                                print \"E2E LinearTv SD Playback Failed: [%s]\"%details;\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n        else:\r\n                print \"Json Response Parameter is Failure\";\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of an SD service from another SD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_03				',NULL,5,'				','\0'),(1063,0,'E2E_Rmf_LinearTV_TuneSD_01',541,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD_01\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"Tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response Parameter is success\";\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is Failure\";\r\n\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of a  SD service in End-to-End scenario\r\nTest Case ID: E2E_LinearTV_01				',NULL,5,'				','\0'),(1064,5,'E2E_LinearTV_TuneSD_01',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD_01\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of TDKIntegrationmodule\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"TDKIntegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        \r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"SD channel Tuned and played Successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to tune and play SD Channel\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading TDKintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load TDKIntegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of a  SD service in End-to-End scenario\r\nTest Case ID: E2E_LinearTV_01 				',NULL,5,'				','\0'),(1067,3,'E2E_LinearTV_TuneHD_02',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_LinearTV_TuneHD_02\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"tdkintegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"HD channel Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and Play the HD channel\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Error code Response is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of a  HD service in End-to-End scenario\r\nTest Case ID: E2E_LinearTV_02 				',NULL,5,'				','\0'),(1068,3,'E2E_LinearTV_TuneSD-SD_03',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD-SD_03\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"tdkintegration module loaded successfully\";\r\n        #Calling LinearTV_GetURL function to send request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result in execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Pre condition-Json Response received successfully\";\r\n                #Calling LinearTV_Play_URL function to play the SD Channel\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result in execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Pre condition-SD channel Tuned and played successfully\";\r\n\r\n                        #Calling LinearTV_GetURL function to send request url\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'03\');\r\n                        url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url2);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        #Get the result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        #Remove unwanted part from URL\r\n                        PLAYURL2 = details.split(\"[RESULTDETAILS]\");\r\n                        print \"PLAYURL2 = \"+PLAYURL2[-1];\r\n                        print \"Result of Json Response : %s\" %actualresult;\r\n#compare the actual result with expected result of Json response Parameter\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SD-SD channel tune response received successfully\";\r\n                                #Calling LinearTV_Play_URL function to play the SD Channel\r\n                                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL2[-1]);\r\n                                #Execute the test case in STB and pass the expected result\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the actual result of execution\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"Result of Player : %s\" %actualresult;\r\n                                #compare the actual result with expected result of playing video\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SD-SD channel tuned and played successfully\";\r\n\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"Failed to tune and play SD-SD channel\";\r\n\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to receive tune response SD-SD channel\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Pre condition-Failed to Tune and Play the SD channel\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Pre condition-Json response parameter is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of an SD service from another SD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_03				',NULL,5,'				','\0'),(1069,3,'E2E_LinearTV_TuneSD-HD_04',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD-HD_04\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"Tdkintegration module loaded successfully\";\r\n        #Calling LinearTV_GetURL function to send request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Pre condition-Json Response received successfully\";\r\n                #Calling LinearTV_Play_URL function to play the video\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Pre condition-SD channel Tuned and played successfully\";\r\n\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n                        url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url2);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n                        print \"Result of Player : %s\" %actualresult\r\n                        details = tdkTestObj.getResultDetails();\r\n                        #Remove unwanted part from URL\r\n                        PLAYURL2 = url.split(\"[RESULTDETAILS]\");\r\n                        print \"PLAYURL2 = \"+PLAYURL2[-1];\r\n                        #compare the actual result with expected result of Json response Parameter\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"SD-HD channel tune response received successfully\";\r\n                                #Calling LinearTV_Play_URL function to play the video\r\n                                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL2[-1]);\r\n                                #Execute the test case in STB and pass the expected result\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the actual result of execution\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"Result of Json Response : %s\" %actualresult;\r\n                                #compare the actual result with expected result of playing video\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"SD-HD channel tuned and played successfully\";\r\n\r\n\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"Failed to tune and play SD-HD channel\";\r\n\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to receive tune response SD-HD channel\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Pre condition-Failed to Tune and Play the SD channel\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Pre condition-Json response parameter is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of an SD service from another HD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_04 				',NULL,5,'				','\0'),(1070,3,'E2E_LinearTV_TuneHD-SD_05',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneHD-SD_05\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"tdkintegration module loaded successfully\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_GetURL function to send request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Pre condition-Json Response received successfully\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Pre condition-HD channel Tuned and played successfully\";\r\n\r\n                        #Calling LinearTV_GetURL function to send request url\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n                        url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url2);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        #Remove unwanted part from URL\r\n                        PLAYURL2 = url.split(\"[RESULTDETAILS]\");\r\n                        print \"PLAY URL2 = \"+PLAYURL2[-1];\r\n                        print \"Result of Json Response : %s\" %actualresult;\r\n                        #compare the actual result with expected result of Json response Parameter\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"HD-SD channel tune response received successfully\";\r\n                                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL2[-1]);\r\n                                #Execute the test case in STB and pass the expected result\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the actual result of execution\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"Result of Player : %s\" %actualresult;\r\n                                #compare the actual result with expected result of playing video\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"HD-SD channel tuned and played successfully\";\r\n\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"Failed to tune and play HD-SD channel\";\r\n\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to receive tune response HD-SD channel\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Pre condiition-Failed to Tune and Play the HD channel\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Pre condition-Json response parameter is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of an HD service from another SD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_05 				',NULL,5,'				','\0'),(1071,3,'E2E_LinearTV_TuneHD-HD_06',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneHD-HD_06\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"tdkintegration module loaded successfully\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Pre condition-Json Response received successfully\";\r\n                #Calling LinearTV_Play_URL function to play the HD Channel\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Pre condition-SD channel Tuned and played successfully\";\r\n\r\n                        #Calling LinearTV_GetURL function to send request url\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n                        streamDetails = tdkTestObj.getStreamDetails(\'03\');\r\n                        url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                        print \"Request URL : %s\" %url;\r\n                        tdkTestObj.addParameter(\"Validurl\",url2);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n                        print \"Result of Player : %s\" %actualresult;\r\n                        details = tdkTestObj.getResultDetails();\r\n                        #Remove unwanted part from URL\r\n                        PLAYURL2 = details.split(\"[RESULTDETAILS]\");\r\n                        print \"PLAY URL2 = \"+PLAYURL2[-1];\r\n                        #compare the actual result with expected result of Json response Parameter\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"HD-HD channel tune response received successfully\";\r\n                                #Calling LinearTV_Play_URL function to play the HD Channel\r\n                                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL2[-1]);\r\n                                #Execute the test case in STB and pass the expected result\r\n                                expectedresult=\"SUCCESS\";\r\n                                tdkTestObj.executeTestCase(expectedresult);\r\n                                #Get the actual result of execution\r\n                                actualresult = tdkTestObj.getResult();\r\n                                print \"Result of Player : %s\" %actualresult;\r\n                                #compare the actual result with expected result of playing video\r\n                                if expectedresult in actualresult:\r\n                                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                        print \"HD-HD channel tuned and played successfully\";\r\n\r\n                                else:\r\n                                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                        print \"Failed to tune and play HD-HD channel\";\r\n\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to receive tune response HD-HD channel\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Pre condition-Failed to Tune and Play the HD channel\";\r\n                        #Getting the Mplayer log file from DUT\r\n                        logpath=tdkTestObj.getLogPath();\r\n                        print \"Log path : %s\" %logpath;\r\n                        tdkTestObj.transferLogs(logpath,\"false\");\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Pre condition-Json response parameter is Failed\";\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests tuning of an HD service from another HD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_06				',NULL,5,'				','\0'),(1072,5,'E2E_LinearTV_MPEG_AC3_17',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_AC3_17\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response Parameter is success\";\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL = \"+PLAYURL[-1];\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"MPEG2/AC3 streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and  play MPEG2/AC3 streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG2 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_17				',NULL,5,'				','\0'),(1073,3,'E2E_LinearTV_MPEG4_AC3_18',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG4_AC3_18\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"MPEG2/AC3 streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and  play MPEG2/AC3 streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG4 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_18				',NULL,5,'				','\0'),(1074,5,'E2E_LinearTV_MPEG2_AAC_19',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_AAC_19\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'03\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL = \"+PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"MPEG2/AAC streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and  play MPEG2/AAC streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG2 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_19				',NULL,5,'				','\0'),(1075,5,'E2E_LinearTV_MPEG4_AAC_20',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG4_AAC_20\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n               #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL = \"+PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"MPEG4/AAC streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and  play MPEG4/AAC streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG4 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_20				',NULL,5,'				','\0'),(1076,5,'E2E_LinearTV_MPEG2_MP3_21',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_MP3_21\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"tdkintegration module loaded successfully\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'05\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL = \"+PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as PLAYURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"MPEG2/MP3 streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and  play MPEG2/MP3 streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG2 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_21				',NULL,5,'				','\0'),(1077,5,'E2E_LinearTV_MPEG4_MP3_22',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_LinearTV_MPEG4_MP3_22\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'06\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL = \"+PLAYURL[-1]; \r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"MPEG4/MP3 streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and  play MPEG4/MP3 streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\")\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG4 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_22				',NULL,5,'				','\0'),(1078,5,'E2E_LinearTV_MPEG2_WAV_23',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_WAV_23\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL = \"+PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expexted result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"MPEG2/WAV streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and  play MPEG2/WAV streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG2 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_23				',NULL,5,'				','\0'),(1079,5,'E2E_LinearTV_MPEG4_WAV_24',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_LinearTV_MPEG4_WAV_24\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"Tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"tdkintegration module loaded successfully\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'08\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response Parameter is success\";\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL = \"+PLAYURL[-1];\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"MPEG4/WAV streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and  play MPEG4/WAV streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of MPEG4 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_24  				',NULL,5,'				','\0'),(1080,5,'E2E_LinearTV_H.264_AC3_25',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_AC3_25\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'09\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL = \"+PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"H.264/AC3 streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\")\r\n                        print \"Failed to Tune and  play H.264/AC3 streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\")\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading \"tdkintegration\" module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of H.264 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_25				',NULL,5,'				','\0'),(1081,17,'E2E_LinearTV_H.264_AAC_26',528,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_Rmf_LinearTV_H.264_AAC_26\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        print \"TDKIntegration module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_RMFLinearTV_GetURL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                ValidURL = PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_LinearTv_Dvr_Play\');\r\n\r\n                tdkTestObj.addParameter(\"playUrl\",ValidURL);\r\n\r\n                #Execute the test case in STB\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n\r\n\r\n                print \"The E2E LinearTv Play : %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result\r\n                if expectedresult in actualresult:\r\n                      #Set the result status of execution\r\n                      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n                      print \"E2E LinearTv Playback Successful: [%s]\"%details;\r\n                else:\r\n                      tdkTestObj.setResultStatus(\"FAILURE\");\r\n                      details =  tdkTestObj.getResultDetails();\r\n                      print \"E2E LinearTv Playback Failed: [%s]\"%details;\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json Response Parameter is Failure\";\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests the playback of H.264 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_26				',NULL,5,'				','\0'),(1082,5,'E2E_LinearTV_H.264_MP3_27',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_MP3_27\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'11\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL = \"+PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"H.264/MP3 streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and  play H.264/MP3 streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests the playback of H.264 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_27				',NULL,5,'				','\0'),(1083,5,'E2E_LinearTV_H.264_WAV_28',529,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_WAV_28\');\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'12\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request URL : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n\r\n        print \"Result of Json Response : %s\" %actualresult;\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                details = tdkTestObj.getResultDetails();\r\n                #Remove unwanted part from URL\r\n                PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL = \"+PLAYURL[-1];\r\n                print \"Json Response Parameter is success\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of Player : %s\" %actualresult;\r\n                #compare the actual result with expected result of playing video\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"H.264/WAV streams Tuned and played successfully\";\r\n\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to Tune and  play H.264/WAV streams\";\r\n\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response parameter is Failed\";\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load TDKIntegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of H.264 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_28 				',NULL,5,'				','\0'),(1084,0,'E2E_RMF_DVR_TrickPlay_30',555,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with corresponding Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\n\r\n#Number of times the pause/play should repeat.\r\nskipNumOfSec = 10;\r\n\r\n#Number of repeatation\r\nrepeatCount = 5;\r\n\r\nobj.configureTestCase(ip,port,\'E2E_RMF_DVR_TrickPlay_30\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getLoadModuleResult();\r\n\r\nif \"SUCCESS\" in result.upper():\r\n         obj.setLoadModuleStatus(\"SUCCESS\");\r\n         print \"TDKIntegration module load successful\";\r\n\r\n         #Prmitive test case which associated to this Script\r\n         tdkTestObj = obj.createTestStep(\'TDKE2E_Rmf_Dvr_Skip_Forward_Play\');\r\n\r\n         #set the dvr play url\r\n         streamDetails = tdkTestObj.getStreamDetails(\"01\");\r\n\r\n         recordingObj = tdkTestObj.getRecordingDetails();\r\n         num = recordingObj.getTotalRecordings();\r\n         print \"Number of recordings: %d\"%num\r\n         recordID = recordingObj.getRecordingId(num - 1);\r\n\r\n         url = \'http://\'+ streamDetails.getGatewayIp() + \':8080/vldms/dvr?rec_id=\' + recordID[:-1] + \'&0&play_speed=1.00&time_pos=0.00\'\r\n\r\n         print \"The Play DVR Url Requested: %s\"%url\r\n         tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n         print \"The number of seconds to be skiped from strating of video: %d\"%skipNumOfSec\r\n         tdkTestObj.addParameter(\"seconds\",skipNumOfSec);\r\n\r\n         print \"The number of repeatation requested is %d\"%repeatCount\r\n         tdkTestObj.addParameter(\"rCount\",repeatCount);\r\n\r\n         #Execute the test case in STB\r\n         expectedresult=\"SUCCESS\";\r\n         tdkTestObj.executeTestCase(expectedresult);\r\n\r\n         #Get the result of execution\r\n         actualresult = tdkTestObj.getResult();\r\n         details =  tdkTestObj.getResultDetails();\r\n\r\n         print \"The E2E DVR Skip number of seconds from starting point of video done multiple time: %s\" %actualresult;\r\n\r\n         #compare the actual result with expected result\r\n         if expectedresult in actualresult:\r\n                 #Set the result status of execution\r\n                 tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                 print \"E2E DVR Skip number of seconds multiple time from starting of video Successful: [%s]\"%details;\r\n         else:\r\n                 tdkTestObj.setResultStatus(\"FAILURE\");\r\n                 print \"E2E DVR Skip number of seconds multiple time from starting of video Failed: [%s]\"%details;\r\n\r\n         obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n         print \"Failed to load TDKIntegration module\";\r\n         obj.setLoadModuleStatus(\"FAILURE\");','FREE','E2E_RMF_DVR_TrickPlay_30: To verify the video playback when Skip forward is done multiple times from the starting point of the video				',NULL,5,'				','\0'),(1085,9,'E2E_DVR_Invalid_TimePosition_13',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port, \'E2E_DVR_Invalid_TimePosition_13\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"TDKIntegration module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'E2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"time_pos=-3000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \" mplayer_actualresult :%s\" % mplayer_actualresult;\r\n\r\n\r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        print \"****\"\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load TDKIntegration\";\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests rewind operation sequentially on all recorded urls at the speed -300x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID: E2E_ DVRTrickPlay_13 				',NULL,5,'				','\0'),(1086,5,'E2E_DVRTrickPlay_Fwd_0.5x_03',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVRTrickPlay_Fwd_0.5x_03\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"tdkintegration module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'12\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n\r\n        #Calling \'E2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&play_speed=0.500000&time_pos=8000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \"mplayer_actualresult :%s\" % mplayer_actualresult;\r\n\r\n\r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load tdkintegration\"\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests fast forward operation sequentially on all recorded urls at the speed 0.5x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID: E2E_DVRTrickPlay_Fwd_0.5x_03 				',NULL,5,'				','\0'),(1087,7,'E2E_DVRTrickPlay_Fwd_15x_07',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_DVRTrickPlay_Fwd_15x_07\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"tdkintegration module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n        #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );   \r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&play_speed=15.000000&time_pos=8000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \"mplayer_actualresult :%s\"%mplayer_actualresult;\r\n\r\n       \r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load tdkintegration\";\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests forward operation sequentially on all recorded urls at the speed 15x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID: E2E_DVRTrickPlay_Fwd_15x_07				',NULL,5,'				','\0'),(1088,7,'E2E_DVRTrickPlay_Fwd_30x_09',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_DVRTrickPlay_Fwd_30x_09\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"tdkintegration module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n  \r\n        #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&play_speed=30.000000&time_pos=8000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \"mplayer_actualresult :%s\" %mplayer_actualresult;\r\n\r\n        \r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n          Url_Array.append(\'SUCCESS\');\r\n        else:\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n          Url_Array.append(\'FAILURE\');\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     print \"Url : %s\" %Url;\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load tdkintegration\";\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests forward operation sequentially on all recorded urls at the speed 30x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID: E2E_DVRTrickPlay_Fwd_30x_09 					',NULL,5,'				','\0'),(1089,11,'E2E_DVRTrickPlay_Fwd_4x_05',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKTDKE2E_DVRTrickPlay__Fwd_4x_05\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"tdkintegration module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    \r\n        #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKTDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&play_speed=4.000000&time_pos=8000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \" mplayer_actualresult :%s\" % mplayer_actualresult;\r\n\r\n        \r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load tdkintegration\";\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests rewind operation sequentially on all recorded urls at the speed 4x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID : E2E_DVRTrickPlay_Fwd_4x_05				',NULL,5,'				','\0'),(1090,3,'E2E_DVRTrickPlay_Fwd_60x_11',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_DVRTrickPlay_Fwd_60x_11\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"TDKE2E module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"TDKE2E module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n       for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&play_speed=60.000000&time_pos=8000\";\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \"mplayer_actualresult :%s\" % mplayer_actualresult;\r\n\r\n        #Get the log path of the Dvr Trickplay Test\r\n        logpath =tdkTestObj.getLogPath();\r\n        print \"Log Path :%s\"%logpath;\r\n\r\n        #Transferring the Dvr Trickplay Test Logs\r\n        tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load Dvr Trickplay\";\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests fast farword operation sequentially on all recorded urls at the speed 60x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID: E2E_DVRTrickPlay_Fwd_60x_11				',NULL,5,'				','\0'),(1091,7,'E2E_DVRTrickPlay_Invalid_PlaySpeed_12',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_DVRTrickPlay_Invalid_PlaySpeed_12\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"tdkintegration module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );   \r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&time_pos=-0.768\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \"mplayer_actualresult :%s\" %mplayer_actualresult;\r\n\r\n       \r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load tdkintegration\"\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests invalid time position scenario in playback feature.\r\nTest Case ID : E2E_DVRTrickPlay_Invalid_PlaySpeed_12				',NULL,5,'				','\0'),(1092,7,'E2E_DVRTrickPlay_Rwd_0.5x_02',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_DVRTrickPlay_Rwd_0.5x_02\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"TDKE2E module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"TDKE2E module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n    \r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&play_speed=-0.5000000&time_pos=8000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \" mplayer_actualresult :%s\" % mplayer_actualresult ;\r\n\r\n        \r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load Dvr Trickplay\"\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests slow rewind operation sequentially on all recorded urls at the speed 0.5x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID : E2E_DVRTrickPlay_Rwd_0.5x_02				',NULL,5,'				','\0'),(1093,11,'E2E_DVRTrickPlay_Rwd_15x_06',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_DVRTrickPlay_Rwd_15x_06\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"TDKE2E module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"TDKE2E module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&play_speed=-15.000000&time_pos=8000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \"mplayer_actualresult :%s\" %mplayer_actualresult;\r\n\r\n     \r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        print \"**\"\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load Dvr Trickplay\";\r\n  obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests rewind operation sequentially on all recorded urls at the speed 15x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID : E2E_DVRTrickPlay_Rwd_15x_06				',NULL,5,'				','\0'),(1094,7,'E2E_DVRTrickPlay_Rwd_30x_08',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_DVRTrickPlay_Rwd_30x_08\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"TDKE2E module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"TDKE2E module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&play_speed=-30.000000&time_pos=8000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \" mplayer_actualresult :%s\" % mplayer_actualresult;\r\n\r\n\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load Dvr Trickplay\";\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests rewind operation sequentially on all recorded urls at the speed 30x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID: E2E_DVRTrickPlay_Rwd_30x_08						',NULL,5,'				','\0'),(1095,7,'E2E_DVRTrickPlay_Rwd_4x_04',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_DVRTrickPlay_Rwd_4x_04\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"TDKE2E module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"TDKE2E module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&play_speed=-4.000000&time_pos=8000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \" mplayer_actualresult :%s\" % mplayer_actualresult;\r\n\r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load Dvr Trickplay\"\r\n  obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests rewind operation sequentially on all recorded urls at the speed 4x than normal speed for playback  in End-to-End scenario.\r\nTest Case ID : E2E_DVRTrickPlay_Rwd_4x_04				',NULL,5,'				','\0'),(1096,9,'E2E_DVRTrickPlay_Rwd_60x_10',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'TDKE2E_DVRTrickPlay_Rwd_60x_10\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"TDKE2E module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"TDKE2E module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"&play_speed=-60.000000&time_pos=8000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \"mplayer_actualresult :%s\" %mplayer_actualresult;\r\n\r\n\r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     print \"Url value: %s\" %Url;\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCEESS\");\r\n\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load Dvr Trickplay\";\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests rewind operation sequentially on all recorded urls at the speed 60x than normal speed for playback in End-to-End scenario.\r\nTest Case ID : E2E_DVRTrickPlay_Rwd_60x_10				',NULL,5,'				','\0'),(1097,1,'E2E_DVR_PlayBack_01',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVR_PlayBack_01\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"tdkintegration module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'E2E_PlayURL\' function to send the url\r\n        playurl=urlList[url];\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \"mplayer_actualresult :%s\" %mplayer_actualresult;\r\n\r\n        #Get the log path of the Dvr Trickplay Test\r\n        logpath =tdkTestObj.getLogPath();\r\n        print \"Log Path :%s\"%logpath;\r\n\r\n        #Transferring the Dvr Trickplay Test Logs\r\n        tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n          Url_Array.append(\'SUCCESS\');\r\n        else:\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n          Url_Array.append(\'FAILURE\');\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n    print \"Array result : %s\" %Url_Array[list];\r\n    Url=Url_Array[list];\r\n    if Url == \"FAILURE\":\r\n      tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load tdkintegration\"\r\n  obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests playback feature on all recorded content.\r\nTest Case ID: E2E_DVR_PlayBack_01					',NULL,5,'				','\0'),(1098,3,'E2E_DVR_Skip_Fwd_15',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVR_Skip_Fwd_15\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"tdkintegration module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'E2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'E2E_Play_URL\');\r\n\r\n        #Calling \'E2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"time_pos=30000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \" mplayer_actualresult :%s\" % mplayer_actualresult;\r\n\r\n        #Get the log path of the Dvr Trickplay Test\r\n        logpath =tdkTestObj.getLogPath();\r\n        print \"Log Path :%s\"%logpath;\r\n\r\n        #Transferring the Dvr Trickplay Test Logs\r\n        tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load tdkintegration\";\r\n  obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This testcase tests skip forward operation than normal stream speed in reverse direction for playback.\r\nTest Case ID: E2E_ DVR_Skip_Fwd_15				',NULL,5,'				','\0'),(1099,3,'E2E_DVR_Skip_Rwd_14',530,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport dvrlib;\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_DVR_Skip_Rwd_14\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus =obj.getLoadModuleResult();\r\nprint \"tdkintegration module loading status :  %s\" %loadmodulestatus ;\r\nif \"Success\" in loadmodulestatus:\r\n  obj.setLoadModuleStatus(\"SUCCESS\");\r\n  print \"tdkintegration module loaded successfully\";\r\n\r\n  #Prmitive test case which associated to this Script\r\n  tdkTestObj = obj.createTestStep(\'TDKE2E_Get_Record_URLS\');\r\n  streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n  #Framing URL for slow rewind Request\r\n  url=\"http://\"+streamDetails.getGatewayIp()+\":8080/vldms/info/recordingurls\"\r\n  print \"RecordURL : %s\" %url;\r\n\r\n  #Configuring the test object for test execution\r\n  tdkTestObj.addParameter(\"RecordURL\",url);\r\n\r\n  #Execute the test case in STB\r\n  Recording_urls_expectedresult=\"SUCCESS\";\r\n  tdkTestObj.executeTestCase(Recording_urls_expectedresult);\r\n\r\n  #Get the result of execution\r\n  Recording_urls_actualresult = tdkTestObj.getResult();\r\n  print \"Dvr TrickPlay Result : %s\" %Recording_urls_actualresult;\r\n\r\n  Url_Array = [];\r\n  if Recording_urls_expectedresult in Recording_urls_actualresult:\r\n    #Get the log path of the Dvr Test\r\n    logpath =tdkTestObj.getLogPath();\r\n    print \"Log Path :%s\"%logpath;\r\n\r\n    #Transferring the Dvr_Trick Play Test Logs\r\n    tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n    #Get the list of recorded urls and details from the logpath\r\n    dvrObj = tdkTestObj.getDVRDetails(logpath);\r\n    urlList= dvrObj.getURLList();\r\n\r\n    #Find total number of recorded contents available\r\n    Total_Num_Urls=len(urlList)\r\n    print Total_Num_Urls;\r\n    if (Total_Num_Urls > 0):\r\n      #Parsing each recorded contents\r\n      for url in range(len(urlList)):\r\n        print urlList[url];\r\n\r\n        #Prmitive test case which associated to play the Script\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_Play_URL\');\r\n\r\n        #Calling \'TDKE2E_PlayURL\' function to send the url\r\n        playurl=urlList[url]+\"time_pos=-30000\";\r\n\r\n        #Configuring the test object for play url test execution\r\n        tdkTestObj.addParameter(\"videoStreamURL\",playurl);\r\n\r\n        #Execute the test case in STB\r\n        mplayer_expectedresult=\"SUCCESS\"\r\n        tdkTestObj.executeTestCase(mplayer_expectedresult);\r\n\r\n        #Get the result of execution\r\n        mplayer_actualresult = tdkTestObj.getResult();\r\n        print \" mplayer_actualresult :%s\" % mplayer_actualresult;\r\n\r\n        #Get the log path of the Dvr Trickplay Test\r\n        logpath =tdkTestObj.getLogPath();\r\n        print \"Log Path :%s\"%logpath;\r\n\r\n        #Transferring the Dvr Trickplay Test Logs\r\n        tdkTestObj.transferLogs( logpath, \"false\" );\r\n\r\n        if mplayer_expectedresult in mplayer_actualresult:\r\n          Url_Array.append(\'SUCCESS\');\r\n          tdkTestObj.setResultStatus(\"SUCCESS\");\r\n        else:\r\n          Url_Array.append(\'FAILURE\');\r\n          tdkTestObj.setResultStatus(\"FAILURE\");\r\n    else:\r\n      print \"There is no recorded items to play\";\r\n      tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  else:\r\n    tdkTestObj.setResultStatus(\"FAILURE\");\r\n\r\n  for list in range(len(Url_Array)-1):\r\n     print \"Array result : %s\" %Url_Array[list];\r\n     Url=Url_Array[list];\r\n     print \"Url : %s\" %Url;\r\n     if Url == \"FAILURE\":\r\n        tdkTestObj.setResultStatus(\"FAILURE\");\r\n     else:\r\n        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n\r\n  #Unload the Dvr Trickplay test module\r\n  obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n  print \"Failed to load Dvr Trickplay\";\r\n  obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests rewind operation than normal stream speed in reverse direction for playback.\r\nTest Case ID:E2E_DVR_Skip_Rwd_14 				',NULL,5,'				','\0'),(1101,3,'E2E_RMF_RF_Video_18',558,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\n\r\n#Add ip and portnumber of the gateway box\r\nxg1_ip = \"192.168.30.65\"\r\nxg1_port = \"8080\"\r\n\r\nrequest_url = \"http://\" + xg1_ip + \":\" + xg1_port + \"/vldms/tuner?ocap_locator=ocap://\"\r\n\r\n#Add the ocap_ids for channel tuning.\r\nocap_ids = [\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\"];\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_Simultaneous_ChannelChange(IP,portnumber,args=(),kwargs={}):\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_18\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_Simultaneous_ChannelChange\');\r\n\r\n       for ocapId in ocap_ids:\r\n           #set the tuning url\r\n           url = request_url + ocapId\r\n\r\n           print \" \"\r\n           print \"The Play Url Requested: %s\"%url\r\n           tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n           #Execute the test case in STB\r\n           expectedresult=\"SUCCESS\";\r\n           tdkTestObj.executeTestCase(expectedresult);\r\n\r\n           #Get the result of execution\r\n           actualresult = tdkTestObj.getResult();\r\n           details =  tdkTestObj.getResultDetails();\r\n           print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n           print \"Channel tuning \" + actualresult\r\n           tdkTestObj.setResultStatus(actualresult);\r\n           print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n           print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n\r\n\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"\r\n\r\n','FREE','E2E_RMF_RF_Video_18: To verify the fast channel change when 4 HD services  & 1 SD services  are decoded simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'	This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network						',''),(1102,2,'E2E_RMF_RF_Video_17',558,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\n\r\n#Add ip and portnumber of the gateway box\r\nxg1_ip = \"192.168.30.65\"\r\nxg1_port = \"8080\"\r\n\r\nrequest_url = \"http://\" + xg1_ip + \":\" + xg1_port + \"/vldms/tuner?ocap_locator=ocap://\"\r\n\r\n#Add the ocap_ids for channel tuning.\r\nocap_ids = [\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\"];\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_Simultaneous_ChannelChange(IP,portnumber,args=(),kwargs={}):\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_17\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_Simultaneous_ChannelChange\');\r\n\r\n       for ocapId in ocap_ids:\r\n           #set the tuning url\r\n           url = request_url + ocapId\r\n\r\n           print \" \"\r\n           print \"The Play Url Requested: %s\"%url\r\n           tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n           #Execute the test case in STB\r\n           expectedresult=\"SUCCESS\";\r\n           tdkTestObj.executeTestCase(expectedresult);\r\n\r\n           #Get the result of execution\r\n           actualresult = tdkTestObj.getResult();\r\n           details =  tdkTestObj.getResultDetails();\r\n           print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n           print \"Channel tuning \" + actualresult\r\n           tdkTestObj.setResultStatus(actualresult);\r\n           print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n           print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n\r\n\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_17: To verify the fast channel change when 3 HD services  & 2 SD services  are decoded simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'	This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network						',''),(1103,2,'E2E_RMF_RF_Video_16',558,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\n\r\n#Add ip and portnumber of the gateway box\r\nxg1_ip = \"192.168.30.65\"\r\nxg1_port = \"8080\"\r\n\r\nrequest_url = \"http://\" + xg1_ip + \":\" + xg1_port + \"/vldms/tuner?ocap_locator=ocap://\"\r\n\r\n#Add the ocap_ids for channel tuning.\r\nocap_ids = [\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\"];\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_Simultaneous_ChannelChange(IP,portnumber,args=(),kwargs={}):\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_16\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_Simultaneous_ChannelChange\');\r\n\r\n       for ocapId in ocap_ids:\r\n           #set the tuning url\r\n           url = request_url + ocapId\r\n\r\n           print \" \"\r\n           print \"The Play Url Requested: %s\"%url\r\n           tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n           #Execute the test case in STB\r\n           expectedresult=\"SUCCESS\";\r\n           tdkTestObj.executeTestCase(expectedresult);\r\n\r\n           #Get the result of execution\r\n           actualresult = tdkTestObj.getResult();\r\n           details =  tdkTestObj.getResultDetails();\r\n           print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n           print \"Channel tuning \" + actualresult\r\n           tdkTestObj.setResultStatus(actualresult);\r\n           print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n           print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n\r\n\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_16: To verify the fast channel change when 4 SD services  & 1 HD services  are decoded simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'		This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network					',''),(1104,2,'E2E_RMF_RF_Video_01',557,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\nURL1 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa3\'\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\nURL2 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa1\'\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_simultuning(IP,portnumber,args=(),kwargs={}):\r\n\r\n   print \"URL = \" + str(kwargs[\"URL\"])\r\n   URL = str(kwargs[\"URL\"])\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_01\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_simultuning\');\r\n\r\n       #set the dvr play url\r\n       url = URL\r\n       print \"The Play Url Requested: %s\"%url\r\n       tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n       #Execute the test case in STB\r\n       expectedresult=\"SUCCESS\";\r\n       tdkTestObj.executeTestCase(expectedresult);\r\n       #Get the result of execution\r\n       actualresult = tdkTestObj.getResult();\r\n       details =  tdkTestObj.getResultDetails();\r\n       print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n       print \"Box with IP: %s\"%ip\r\n       print \"Channel tuning \" + actualresult\r\n       tdkTestObj.setResultStatus(actualresult);\r\n       print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n       print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL1})\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL2})\r\n\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_01: To verify that all six client boxes  [XI3 ] can watch up to six linear TV channels simultaneously without any issues. \r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'			This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network	',''),(1105,2,'E2E_RMF_RF_Video_02',557,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\nURL1 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa1\'\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\nURL2 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa1\'\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\n\r\ndef TDKE2E_Linear_simultuning(IP,portnumber,args=(),kwargs={}):\r\n\r\n   print \"URL = \" + str(kwargs[\"URL\"])\r\n   URL = str(kwargs[\"URL\"])\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_02\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_simultuning\');\r\n\r\n       #set the dvr play url\r\n       url = URL\r\n       print \"The Play Url Requested: %s\"%url\r\n       tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n       #Execute the test case in STB\r\n       expectedresult=\"SUCCESS\";\r\n       tdkTestObj.executeTestCase(expectedresult);\r\n       #Get the result of execution\r\n       actualresult = tdkTestObj.getResult();\r\n       details =  tdkTestObj.getResultDetails();\r\n       print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n       print \"Box with IP: %s\"%ip\r\n       print \"Channel tuning \" + actualresult\r\n       tdkTestObj.setResultStatus(actualresult);\r\n       print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n       print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL1})\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL2})\r\n\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_02: To verify one SD service & 5 HD services are playing from six XI3 boxes simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca ntework',''),(1106,2,'E2E_RMF_RF_Video_03',557,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\nURL1 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa3\'\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\nURL2 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa1\'\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_simultuning(IP,portnumber,args=(),kwargs={}):\r\n\r\n   print \"URL = \" + str(kwargs[\"URL\"])\r\n   URL = str(kwargs[\"URL\"])\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_03\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_simultuning\');\r\n\r\n       #set the dvr play url\r\n       url = URL\r\n       print \"The Play Url Requested: %s\"%url\r\n       tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n       #Execute the test case in STB\r\n       expectedresult=\"SUCCESS\";\r\n       tdkTestObj.executeTestCase(expectedresult);\r\n       #Get the result of execution\r\n       actualresult = tdkTestObj.getResult();\r\n       details =  tdkTestObj.getResultDetails();\r\n       print \"Simultaneus tuning from client boxes [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n       print \"Box with IP: %s\"%ip\r\n       print \"Channel tuning \" + actualresult\r\n       tdkTestObj.setResultStatus(actualresult);\r\n       print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n       print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL1})\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL2})\r\n\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"\r\n','FREE','E2E_RMF_RF_Video_03: To verify 2 SD service & 4 HD services are playing from six XI3 boxes simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'			This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network\r\n	',''),(1107,3,'E2E_RMF_RF_Video_04',557,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\nURL1 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa3\'\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\nURL2 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa1\'\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_simultuning(IP,portnumber,args=(),kwargs={}):\r\n\r\n   print \"URL = \" + str(kwargs[\"URL\"])\r\n   URL = str(kwargs[\"URL\"])\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_04\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_simultuning\');\r\n\r\n       #set the dvr play url\r\n       url = URL\r\n       print \"The Play Url Requested: %s\"%url\r\n       tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n       #Execute the test case in STB\r\n       expectedresult=\"SUCCESS\";\r\n       tdkTestObj.executeTestCase(expectedresult);\r\n       #Get the result of execution\r\n       actualresult = tdkTestObj.getResult();\r\n       details =  tdkTestObj.getResultDetails();\r\n       print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n       print \"Box with IP: %s\"%ip\r\n       print \"Channel tuning \" + actualresult\r\n       tdkTestObj.setResultStatus(actualresult);\r\n       print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n       print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL1})\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL2})\r\n\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_04: To verify 3 SD service & 3 HD services are playing from six XI3 boxes simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'		This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network		',''),(1108,2,'E2E_RMF_RF_Video_05',557,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\nURL1 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa3\'\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\nURL2 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa1\'\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_simultuning(IP,portnumber,args=(),kwargs={}):\r\n\r\n   print \"URL = \" + str(kwargs[\"URL\"])\r\n   URL = str(kwargs[\"URL\"])\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_05\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_simultuning\');\r\n\r\n       #set the dvr play url\r\n       url = URL\r\n       print \"The Play Url Requested: %s\"%url\r\n       tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n       #Execute the test case in STB\r\n       expectedresult=\"SUCCESS\";\r\n       tdkTestObj.executeTestCase(expectedresult);\r\n       #Get the result of execution\r\n       actualresult = tdkTestObj.getResult();\r\n       details =  tdkTestObj.getResultDetails();\r\n       print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n       print \"Box with IP: %s\"%ip\r\n       print \"Channel tuning \" + actualresult\r\n       tdkTestObj.setResultStatus(actualresult);\r\n       print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n       print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL1})\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL2})\r\n\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_05: To verify 4 SD service & 2 HD services are playing from six XI3 boxes simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes				',NULL,5,'	This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network			',''),(1109,2,'E2E_RMF_RF_Video_06',557,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\nURL1 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa3\'\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\nURL2 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa1\'\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef E2E_Linear_simultuning(IP,portnumber,args=(),kwargs={}):\r\n\r\n   print \"URL = \" + str(kwargs[\"URL\"])\r\n   URL = str(kwargs[\"URL\"])\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'E2E_RMF_RF_Video_06\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'E2E_RMF_Linear_simultuning\');\r\n\r\n       #set the dvr play url\r\n       url = URL\r\n       print \"The Play Url Requested: %s\"%url\r\n       tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n       #Execute the test case in STB\r\n       expectedresult=\"SUCCESS\";\r\n       tdkTestObj.executeTestCase(expectedresult);\r\n       #Get the result of execution\r\n       actualresult = tdkTestObj.getResult();\r\n       details =  tdkTestObj.getResultDetails();\r\n       print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n       print \"Box with IP: %s\"%ip\r\n       print \"Channel tuning \" + actualresult\r\n       tdkTestObj.setResultStatus(actualresult);\r\n       print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n       print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,E2E_Linear_simultuning,kwargs={\"URL\":URL1})\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,E2E_Linear_simultuning,kwargs={\"URL\":URL2})\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"\r\n','FREE','E2E_RMF_RF_Video_06: To verify 5 SD service & 1 HD services are playing from six XI3 boxes simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes.					',NULL,5,'	This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network			',''),(1110,2,'E2E_RMF_RF_Video_07',557,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\nURL1 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa3\'\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\nURL2 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa1\'\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_simultuning(IP,portnumber,args=(),kwargs={}):\r\n\r\n   print \"URL = \" + str(kwargs[\"URL\"])\r\n   URL = str(kwargs[\"URL\"])\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_07\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_simultuning\');\r\n\r\n       #set the dvr play url\r\n       url = URL\r\n       print \"The Play Url Requested: %s\"%url\r\n       tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n       #Execute the test case in STB\r\n       expectedresult=\"SUCCESS\";\r\n       tdkTestObj.executeTestCase(expectedresult);\r\n       #Get the result of execution\r\n       actualresult = tdkTestObj.getResult();\r\n       details =  tdkTestObj.getResultDetails();\r\n       print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n       print \"Box with IP: %s\"%ip\r\n       print \"Channel tuning \" + actualresult\r\n       tdkTestObj.setResultStatus(actualresult);\r\n       print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n       print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL1})\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL2})\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"\r\n','FREE','E2E_RMF_RF_Video_07: To verify 6 HD services are playing from six XI3 boxes simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network							',''),(1111,2,'E2E_RMF_RF_Video_08',557,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\nURL1 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa3\'\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\nURL2 = \'http://192.168.30.80:8080/vldms/tuner?ocap_locator=ocap://0xa1\'\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_simultuning(IP,portnumber,args=(),kwargs={}):\r\n\r\n   print \"URL = \" + str(kwargs[\"URL\"])\r\n   URL = str(kwargs[\"URL\"])\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_08\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_simultuning\');\r\n\r\n       #set the dvr play url\r\n       url = URL\r\n       print \"The Play Url Requested: %s\"%url\r\n       tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n       #Execute the test case in STB\r\n       expectedresult=\"SUCCESS\";\r\n       tdkTestObj.executeTestCase(expectedresult);\r\n       #Get the result of execution\r\n       actualresult = tdkTestObj.getResult();\r\n       details =  tdkTestObj.getResultDetails();\r\n       print \"Simultaneus tuning from client box [: %s\" %actualresult;\r\n       print \"Box with IP: %s\"%ip\r\n       print \"Channel tuning \" + actualresult\r\n       tdkTestObj.setResultStatus(actualresult);\r\n       print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n       print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL1})\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_simultuning,kwargs={\"URL\":URL2})\r\n\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_08: To verify 6 SD services are playing from six XI3 boxes simultaneously.	\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network							',''),(1112,2,'E2E_RMF_RF_Video_09',558,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\n\r\n#Add ip and portnumber of the gateway box\r\nxg1_ip = \"192.168.30.65\"\r\nxg1_port = \"8080\"\r\n\r\nrequest_url = \"http://\" + xg1_ip + \":\" + xg1_port + \"/vldms/tuner?ocap_locator=ocap://\"\r\n\r\n#Add the ocap_ids for channel tuning.\r\nocap_ids = [\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\",\"0xa1\",\"0x9d\"];\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_Simultaneous_ChannelChange(IP,portnumber,args=(),kwargs={}):\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_09\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_Simultaneous_ChannelChange\');\r\n\r\n       for ocapId in ocap_ids:\r\n           #set the tuning url\r\n           url = request_url + ocapId\r\n\r\n           print \" \"\r\n           print \"The Play Url Requested: %s\"%url\r\n           tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n           #Execute the test case in STB\r\n           expectedresult=\"SUCCESS\";\r\n           tdkTestObj.executeTestCase(expectedresult);\r\n\r\n           #Get the result of execution\r\n           actualresult = tdkTestObj.getResult();\r\n           details =  tdkTestObj.getResultDetails();\r\n           print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n           tdkTestObj.setResultStatus(actualresult);\r\n           if \"SUCCESS\" in actualresult:\r\n               result = eval(details)\r\n               print \"Channel Tuning Time:  \" + result[\"tuningtime\"] +\" in ms (milli seconds).\"\r\n               print \"Box with IP: %s\"%ip\r\n               print \"Simultaneous tuning: \" + actualresult + \" [\" + result[\"summary\"] + \"]\"\r\n               print \" \"\r\n           else:\r\n               print \"Channel Tuning Time:  0 in ms (milli seconds).\"\r\n               print \"Box with IP: %s\"%ip\r\n               print \"Simultaneous tuning: \" + actualresult + \" [\" + details + \"]\"\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n\r\n\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_09: To verify tuning time for channel change.\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'	This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network						',''),(1113,2,'E2E_RMF_RF_Video_12',558,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\n\r\n#Add ip and portnumber of the gateway box\r\nxg1_ip = \"192.168.30.65\"\r\nxg1_port = \"8080\"\r\n\r\nrequest_url = \"http://\" + xg1_ip + \":\" + xg1_port + \"/vldms/tuner?ocap_locator=ocap://\"\r\n\r\n#Add the ocap_ids for channel tuning.\r\nocap_ids = [\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\"];\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_Simultaneous_ChannelChange(IP,portnumber,args=(),kwargs={}):\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_12\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_Simultaneous_ChannelChange\');\r\n\r\n       for ocapId in ocap_ids:\r\n           #set the tuning url\r\n           url = request_url + ocapId\r\n\r\n           print \" \"\r\n           print \"The Play Url Requested: %s\"%url\r\n           tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n           #Execute the test case in STB\r\n           expectedresult=\"SUCCESS\";\r\n           tdkTestObj.executeTestCase(expectedresult);\r\n\r\n           #Get the result of execution\r\n           actualresult = tdkTestObj.getResult();\r\n           details =  tdkTestObj.getResultDetails();\r\n           print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n           print \"Channel tuning \" + actualresult\r\n           tdkTestObj.setResultStatus(actualresult);\r\n           print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n           print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n\r\n\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_12: To verify that fast channel change feature supports in all five 5 linear TV signals tuned to XG1 from all six XI3 client boxes simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'		This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network					',''),(1114,2,'E2E_RMF_RF_Video_13',558,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\n\r\n#Add ip and portnumber of the gateway box\r\nxg1_ip = \"192.168.30.65\"\r\nxg1_port = \"8080\"\r\n\r\nrequest_url = \"http://\" + xg1_ip + \":\" + xg1_port + \"/vldms/tuner?ocap_locator=ocap://\"\r\n\r\n#Add the ocap_ids for channel tuning\r\nocap_ids = [\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\"];\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_Simultaneous_ChannelChange(IP,portnumber,args=(),kwargs={}):\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_13\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_Simultaneous_ChannelChange\');\r\n\r\n       for ocapId in ocap_ids:\r\n           #set the tuning url\r\n           url = request_url + ocapId\r\n\r\n           print \" \"\r\n           print \"The Play Url Requested: %s\"%url\r\n           tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n           #Execute the test case in STB\r\n           expectedresult=\"SUCCESS\";\r\n           tdkTestObj.executeTestCase(expectedresult);\r\n\r\n           #Get the result of execution\r\n           actualresult = tdkTestObj.getResult();\r\n           details =  tdkTestObj.getResultDetails();\r\n           print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n           print \"Channel tuning \" + actualresult\r\n           tdkTestObj.setResultStatus(actualresult);\r\n           print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n           print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n\r\n\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_13: To verify that fast channel change feature supports in all five linear TV signals tuned to XG1 from all six XI3 client boxes decoding only  SD services simultaneously.\r\nNote: Tested only with 2 XI3 client Boxes.\r\n								',NULL,5,'	This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network						',''),(1115,2,'E2E_RMF_RF_Video_14',558,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\n\r\n#Add ip and portnumber of the gateway box\r\nxg1_ip = \"192.168.30.65\"\r\nxg1_port = \"8080\"\r\n\r\nrequest_url = \"http://\" + xg1_ip + \":\" + xg1_port + \"/vldms/tuner?ocap_locator=ocap://\"\r\n\r\n#Add the ocap_ids for channel tuning.\r\nocap_ids = [\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\"];\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_Simultaneous_ChannelChange(IP,portnumber,args=(),kwargs={}):\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_14\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_Simultaneous_ChannelChange\');\r\n\r\n       for ocapId in ocap_ids:\r\n           #set the tuning url\r\n           url = request_url + ocapId\r\n\r\n           print \" \"\r\n           print \"The Play Url Requested: %s\"%url\r\n           tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n           #Execute the test case in STB\r\n           expectedresult=\"SUCCESS\";\r\n           tdkTestObj.executeTestCase(expectedresult);\r\n\r\n           #Get the result of execution\r\n           actualresult = tdkTestObj.getResult();\r\n           details =  tdkTestObj.getResultDetails();\r\n           print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n           print \"Channel tuning \" + actualresult\r\n           tdkTestObj.setResultStatus(actualresult);\r\n           print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n           print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n\r\n\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_14: To verify that fast channel change feature supports in all five linear TV signals tuned to XG1 from all five XI3 client boxes decoding only  HD services simultaneously.				\r\nNote: Tested only with 2 XI3 client Boxes.				',NULL,5,'This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network							',''),(1116,2,'E2E_RMF_RF_Video_15',558,'import tdklib\r\nfrom tdklib import CreateTestThread\r\n\r\n#Add ip and portnumbers of the client boxes to be tested.\r\nxi3_1 = \"192.168.30.120\"\r\nxi3_1_port = 8087\r\n\r\nxi3_2 = \"192.168.30.122\"\r\nxi3_2_port = 8087\r\n\r\n#Add ip and portnumber of the gateway box\r\nxg1_ip = \"192.168.30.65\"\r\nxg1_port = \"8080\"\r\n\r\nrequest_url = \"http://\" + xg1_ip + \":\" + xg1_port + \"/vldms/tuner?ocap_locator=ocap://\"\r\n\r\n#Add the ocap_ids for channel tuning.\r\nocap_ids = [\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\",\"0xa1\",\"0xa3\"];\r\n\r\nSUCCESS = 0\r\nFAILURE = 1\r\n\r\ndef TDKE2E_Linear_Simultaneous_ChannelChange(IP,portnumber,args=(),kwargs={}):\r\n\r\n   #Test component to be tested\r\n   obj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"2.0\");\r\n\r\n   #IP and Port of box, No need to change,\r\n   #This will be replaced with corresponding Box Ip and port while executing script\r\n   ip = IP\r\n   port = portnumber\r\n\r\n   print \"E2e rmf scirpt called\"\r\n   obj.configureTestCase(ip,port,\'TDKE2E_RMF_RF_Video_15\');\r\n\r\n   #Get the result of connection with test component and STB\r\n   result =obj.getLoadModuleResult();\r\n   print \"e2e_rmf module [LIB LOAD STATUS]  :  %s\" %result;\r\n\r\n   if \"SUCCESS\" in result.upper():\r\n       obj.setLoadModuleStatus(\"SUCCESS\");\r\n       print \"e2e rmf module load successful\";\r\n\r\n       #Prmitive test case which associated to this Script\r\n       tdkTestObj = obj.createTestStep(\'TDKE2E_RMF_Linear_Simultaneous_ChannelChange\');\r\n\r\n       for ocapId in ocap_ids:\r\n           #set the tuning url\r\n           url = request_url + ocapId\r\n\r\n           print \" \"\r\n           print \"The Play Url Requested: %s\"%url\r\n           tdkTestObj.addParameter(\"playUrl\",url);\r\n\r\n           #Execute the test case in STB\r\n           expectedresult=\"SUCCESS\";\r\n           tdkTestObj.executeTestCase(expectedresult);\r\n\r\n           #Get the result of execution\r\n           actualresult = tdkTestObj.getResult();\r\n           details =  tdkTestObj.getResultDetails();\r\n           print \"Simultaneus tuning from client box [TEST EXECUTION RESULT] : %s\" %actualresult;\r\n           print \"Channel tuning \" + actualresult\r\n           tdkTestObj.setResultStatus(actualresult);\r\n           print \"Simultaneous tuning: \" + actualresult + \" [%s]\"%details;\r\n           print \" \"\r\n\r\n       obj.unloadModule(\"tdkintegration\");\r\n   else:\r\n       print \"Failed to load e2e_rmf module\";\r\n       obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n   return SUCCESS\r\n\r\n\r\n# Create new threads\r\ntest1 = CreateTestThread(xi3_1,xi3_1_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\ntest2 = CreateTestThread(xi3_2,xi3_2_port,TDKE2E_Linear_Simultaneous_ChannelChange)\r\n\r\n\r\n# Start new Threads\r\ntest1.start()\r\ntest2.start()\r\ntest1.join()\r\ntest2.join()\r\ntry:\r\n    print \"test1 return value = %s\" %(test1.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 1\"\r\ntry:\r\n    print \"test2 return value = %s\" %(test2.returnValue)\r\nexcept AttributeError:\r\n    print \"No return value for test 2\"','FREE','E2E_RMF_RF_Video_15: To verify the fast channel change when 3 SD services  & 2 HD services  are decoded simultaneously. \r\nNote: Tested only with 2 XI3 client Boxes.								',NULL,5,'	This script is tested on the ipnetwork with two ipclient boxes connected, Not tested on Moca network						',''),(1118,6,'RMF_QAMSource_Play_12',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_Play_12\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\n                                                src_element=[0,0,1280,0,720]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                        src_element=[\"QAMSrc\",\"MPSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        time.sleep(30);\r\n                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                        src_element=[\"QAMSrc\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                print \"QAMSource play successful\"\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                        else:\r\n                                                                                print \"QAMSource play failed\"\r\n                                                                                tdkTestObj.setResultStatus(failure);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the RDK Mediaframework QAMSrc element to Play the live content when factory method flag is set to true.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_12.		',NULL,4,'				','\0'),(1119,4,'RMF_QAMSource_Pause_13',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_Pause_13\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\n                                                src_element=[0,0,1280,0,720]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                        src_element=[\"QAMSrc\",\"MPSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        time.sleep(30);\r\n                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                        src_element=[\"QAMSrc\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                print \"QAMSource play successful\"\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(5);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PAUSED\" in details.upper():\r\n                                                                                                print \"QAMSource pause successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource pause failed\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                        else:\r\n                                                                                print \"QAMSource play failed\"\r\n                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the RDK Mediaframework QAMSrc element to Pause the live content when factory method flag is set to true.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_13.				',NULL,4,'				','\0'),(1120,10,'RMF_QAMSource_ChangeURI_14',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_ChangeURI_14\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_QAMSrc_ChangeURI\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        changeUri = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(changeUri);\r\n        print \"ChangeUri:\",changeUri\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"MPSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\n                                                                src_element=[0,0,1280,0,720]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                        src_element=[\"QAMSrc\",\"MPSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(30);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                print \"QAMSource play successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        time.sleep(10);\r\n                                                                                                        src_parameter=[]\r\n                                                                                                        src_element=[]\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_ChangeURI\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        time.sleep(10);\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource play failed\"\r\n                                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"MPSink\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"MPSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the RDK Mediaframework QAMSrc element to Update URI of existing qam instance with new one if possible.If not possible, gets a new instance and returns it and factory false.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_14.	',NULL,4,'				','\0'),(1121,2,'RMF_QAMSource_InitTerm_01',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_InitTerm_01\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        print parametervalue;\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To initialize and terminate RMFQAMSrc instance when factory method flag is set to false.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_01.				',NULL,4,'				','\0'),(1122,6,'RMF_QAMSource_OpenClose_02',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_OpenClose_02\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To open and close RMFQAMSrc instance when factory method flag is set to false.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_02.			',NULL,4,'				','\0'),(1123,22,'RMF_QAMSource_Play_03',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_Play_03\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"MPSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\n                                                                src_element=[0,0,1280,0,720]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                        src_element=[\"QAMSrc\",\"MPSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(30);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                print \"QAMSource play successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource play failed\"\r\n                                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"MPSink\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"MPSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\n\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Play the live content when factory method flag is set to false.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_03.				',NULL,4,'				','\0'),(1124,4,'RMF_QAMSource_Pause_04',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_Pause_04\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"MPSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\n                                                                src_element=[0,0,1280,0,720]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                        src_element=[\"QAMSrc\",\"MPSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(30);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                print \"QAMSource play successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        time.sleep(5);\r\n                                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        if expected_Result in result.upper() and \"PAUSED\" in details.upper():\r\n                                                                                                                print \"QAMSource pause successful\"\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                        else:\r\n                                                                                                                print \"QAMSource pause failed\"\r\n                                                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource play failed\"\r\n                                                                                                tdkTestObj.setResultStatus(failure);\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"MPSink\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"MPSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Pause the live content when factory method flag is set to false.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_04.				',NULL,3,'				','\0'),(1125,4,'RMF_QAMSource_GetTsId_05',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_GetTsId_05\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[]\r\n                                src_element=[]\r\n                                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_GetTSID\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Get TS Id from PAT when factory method flag is set to true.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_05.				',NULL,4,'				','\0'),(1126,4,'RMF_QAMSource_GetLtsId_06',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_GetLtsId_06\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[]\r\n                                src_element=[]\r\n                                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_GetLTSID\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Get List of sourceIds corresponding to the instance when factory method flag is set to true.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_06.\r\n	',NULL,4,'				','\0'),(1129,4,'RMF_QAMSource_GetUseFactoryMethods_08',563,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_GetUseFactoryMethods_08\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UseFactoryMethods\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To Check if factory methods are to be used by the client.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_08.		',NULL,4,'				','\0'),(1130,4,'RMF_QAMSource_Get_Free_LowLevelElement_09',566,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_Get_Free_LowLevelElement_09\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[]\r\n                                src_element=[]\r\n                                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_GetLowLevelElement\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_FreeLowLevelElement\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n\r\n','FREE','RMFQAMSrc – To Get and Free low level element of qamsrc obtained using getQAMSrcElement when factory method flag is set to true.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_09.				',NULL,3,'				','\0'),(1131,5,'RMF_QAMSource_GetQAMSourceInstance_10',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_GetQAMSourceInstance_10\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To RMFQAMSrc instance from QAMSrc factory corresponding to uri when factory method flag is set to true.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_10.				',NULL,3,'				','\0'),(1132,4,'RMF_QAMSource_ChangeURI_11',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_ChangeURI_11\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_QAMSrc_ChangeURI\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        changeUri = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(changeUri);\r\n        print \"ChangeUri:\",changeUri\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"MPSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"X\",\"Y\",\"width\",\"apply\",\"height\"]\r\n                                                src_element=[0,0,1280,0,720]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_MpSink_SetVideoRectangle\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                        src_element=[\"QAMSrc\",\"MPSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        time.sleep(30);\r\n                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                        src_element=[\"QAMSrc\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                print \"QAMSource play successful\"\r\n                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(10);\r\n                                                                                        print \"QAMSource pause successful\"\r\n                                                                                        tdkTestObj.setResultStatus(result);\r\n                                                                                        src_parameter=[]\r\n                                                                                        src_element=[]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_ChangeURI\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        time.sleep(10);\r\n                                                                                else:\r\n                                                                                        print \"QAMSource pause failed\"\r\n                                                                                        tdkTestObj.setResultStatus(failure);\r\n                                                                        else:\r\n                                                                                print \"QAMSource play failed\"\r\n                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"MPSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"MPSink\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – Updates URI of existing qam instance with new one if possible. If not possible, gets a new instance and returns it and when factory method flags is set to true.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_11.			',NULL,4,'				','\0'),(1133,4,'RMF_QAMSource_Init_Uninit_Platform_07',559,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSource_Init_Uninit_Platform_07\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To initialize and unintialize platform dependent functionalities.\r\nTest Case ID: CT_RMF_QAMSrc_MPSink_07.				',NULL,4,'				','\0'),(1134,6,'RMF_QAMSrc_01',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_01\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        if result == failure.upper():\r\n                tdkTestObj.setResultStatus(expected_Result);\r\n        else:\r\n                tdkTestObj.setResultStatus(failure);\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\",\"url\"]\r\n                                        src_element=[\"QAMSrc\",\" \"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To call open() api by passing NULL as input to its parameter and close RMFQAMSrc instance when factory method flag is set to false.\r\nTest caseId: CT_RMF_QAMSrc_01			',NULL,3,'				','\0'),(1135,8,'RMF_QAMSrc_02',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_02\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        if result == failure.upper():\r\n                tdkTestObj.setResultStatus(expected_Result);\r\n        else:\r\n                tdkTestObj.setResultStatus(failure);\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\",\"url\"]\r\n                                        src_element=[\"QAMSrc\",\"dvr://local/68623876#0\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To call open() api by passing valid dvrlocator as input to its parameter and close RMFQAMSrc instance when factory method flag is set to false.\r\nTest caseID: CT_RMF_QAMSrc_02			',NULL,3,'				','\0'),(1136,6,'RMF_QAMSrc_03',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_03\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        if result == failure.upper():\r\n                tdkTestObj.setResultStatus(expected_Result);\r\n        else:\r\n                tdkTestObj.setResultStatus(failure);\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        #Invalid url as input\r\n                                        src_parameter=[\"rmfElement\",\"url\"]\r\n                                        src_element=[\"QAMSrc\",\"igiwviisdivif\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To call open() api by passing invalid  url as input to its parameter and close RMFQAMSrc instance when factory method flag is set to false.\r\nTest caseId: CT_RMF_QAMSrc_03			',NULL,4,'				','\0'),(1137,12,'RMF_QAMSrc_04',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_04\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[]\r\n                                                src_element=[]\r\n                                                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_GetTSID\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Get TS Id from PAT when factory method flag is set to false.\r\nTest CaseId: CT_RMF_QAMSrc_04				',NULL,3,'				','\0'),(1138,6,'RMF_QAMSrc_05',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_05\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[]\r\n                                                src_element=[]\r\n                                                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_GetLTSID\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','RMF_QAMSrc – To Get List of sourceIds corresponding to the instance when factory method flag is set to false.\r\nTest CaseId: CT_RMF_QAMSrc_05			',NULL,3,'				','\0'),(1139,6,'RMF_QAMSrc_06',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_06\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[]\r\n                                                src_element=[]\r\n                                                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_GetLowLevelElement\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[]\r\n                                                        src_element=[]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_FreeLowLevelElement\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To get and free low level element of qamsrc obtained using getQAMSrcElement when factory method flag is set to false.\r\nTest caseId: CT_RMF_QAMSrc_06				',NULL,4,'				','\0'),(1140,4,'RMF_QAMSrc_07',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_07\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        if result == failure.upper():\r\n                tdkTestObj.setResultStatus(expected_Result);\r\n        else:\r\n                tdkTestObj.setResultStatus(failure);\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\",\"qamSrcUrl\"]\r\n                        src_element=[\"QAMSrc\",\"true\",\"dvr://local/124234#0\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To get RMFQAMSrc instance from getQAMSourceInstance when valid dvrlocator url is passed to it.\r\nTest Case ID: CT_RMF_QAMSrc_07				',NULL,3,'				','\0'),(1141,2,'RMF_QAMSrc_08',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_08\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        if result == failure.upper():\r\n                tdkTestObj.setResultStatus(expected_Result);\r\n        else:\r\n                tdkTestObj.setResultStatus(failure);\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\",\"qamSrcUrl\"]\r\n                        src_element=[\"QAMSrc\",\"true\",\"kbksdvs\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To get RMFQAMSrc instance from getQAMSourceInstance when invalid url is passed to it.\r\nTest CaseID: CT_RMF_QAMSrc_08				',NULL,3,'				','\0'),(1142,2,'RMF_QAMSrc_09',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_09\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        if result == failure.upper():\r\n                tdkTestObj.setResultStatus(expected_Result);\r\n        else:\r\n                tdkTestObj.setResultStatus(failure);\r\n    else:\r\n        tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\",\"qamSrcUrl\"]\r\n                        src_element=[\"QAMSrc\",\"true\",\" \"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFQAMSrc – To get RMFQAMSrc instance from getQAMSourceInstance when NULL value is passed to it.\r\nTest CaseId: CT_RMF_QAMSrc_09				',NULL,3,'				','\0'),(1143,0,'RMF_HNSink_01',569,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_HNSink_01\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_HNSink_InitPlatform:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMFHNSink – To initialize and terminate RMFHNSink instance.\r\nTest CaseID: CT_RMF_HNSINK_01				',NULL,3,'				','\0'),(1144,14,'E2E_LinearTV_Live_Trickplay_SRW_0.5x_07',575,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_07\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_Tuning\');\r\n\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n        ocapId = \"ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request OCAP ID for tuning : %s\" %ocapId;\r\n        tdkTestObj.addParameter(\"ValidocapId\",ocapId);\r\n\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #print \"Tuned result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n        print \"Result of Json Response for Tuning : %s\" %actualresult;\r\n\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response tuning is success\";\r\n\r\n                #Sleep for 5 seconds before playing.So, content is recorded into TSB.  After tuned to different frequency.\r\n                time.sleep(5);\r\n                #Calling LinearTV_T2p_TrickMode Function by passing the play back rate.\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                rate = -0.5;\r\n                tdkTestObj.addParameter(\"trickPlayRate\",rate);\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of T2p Trick Mode: %s\" %actualresult;\r\n                #print \"TricK Mode result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n\r\n                #compare the actual result with expected result from the T2p trick mode response.\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Slow rewind with -0.5x is played successfully\";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to play slow Rewind with -0.5x\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response Failed to tune\";\r\n\r\n        #Unloading  module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load tdkintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of slow rewind with play speed -0.5 in LinearTV trickplay scenario Test Case ID : E2E_LinearTV_07.				',NULL,5,'				','\0'),(1145,2,'E2E_LinearTV_Live_Trickplay_SFW_0.5x_08',575,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_08\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"TDKIntegration module loaded successfully.\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_Tuning\');\r\n\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n        ocapId = \"ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request OCAP ID for tuning : %s\" %ocapId;\r\n        tdkTestObj.addParameter(\"ValidocapId\",ocapId);\r\n\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #print \"Tuned result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n        print \"Result of Json Response for Tuning : %s\" %actualresult;\r\n\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response tuning is success\";\r\n\r\n                #Sleep for 2 second before pausing. After tuning to different frequency.\r\n                time.sleep(2);\r\n                #Calling LinearTV_T2p_TrickMode Function for pausing the stream.\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                pauserate = 0.0;\r\n                tdkTestObj.addParameter(\"trickPlayRate\",pauserate);\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of T2p Trick Mode Pause: %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result from the T2p trick mode response.\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Paused Successfully \";\r\n\r\n                        #Sleep for 15 seconds for recording the content into TSB.\r\n                        print \"Paused for 15 seconds.. Please wait\"\r\n                        time.sleep(15);\r\n\r\n                        #Calling LinearTV_T2p_TrickMode Function by passing the play back rate.\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                        rate = 0.5;\r\n                        tdkTestObj.addParameter(\"trickPlayRate\",rate);\r\n\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n                        print \"Result of T2p Trick Mode: %s\" %actualresult;\r\n                        #print \"TricK Mode result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n\r\n                        #compare the actual result with expected result from the T2p trick mode response.\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Slow forward with 0.5x is played successfully \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to play slow forwad with 0.5x\";\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"Json response Failed to Pause\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response Failed to tune\";\r\n\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load TDKIntegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of slow forward with play speed 0.5 in LinearTV trickplay scenario Test Case ID : E2E_LinearTV_08				',NULL,5,'				','\0'),(1146,5,'E2E_LinearTV_Live_Trickplay_FRW_4x_09',575,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_09\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"LinearTV module loading status :  %s\" %loadmodulestatus;\r\n\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"TDKIntegration module loaded successfully.\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_Tuning\');\r\n\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n        ocapId = \"ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request OCAP ID for tuning : %s\" %ocapId;\r\n        tdkTestObj.addParameter(\"ValidocapId\",ocapId);\r\n\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #print \"Tuned result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n        print \"Result of Json Response for Tuning : %s\" %actualresult;\r\n\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response tuning is success\";\r\n\r\n                #Sleep for 5 seconds before playing.So, content is recorded into TSB.  After tuned to different frequency.\r\n                time.sleep(5);\r\n                #Calling LinearTV_T2p_TrickMode Function by passing the play back rate.\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                rate = -4.0;\r\n                tdkTestObj.addParameter(\"trickPlayRate\",rate);\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of T2p Trick Mode: %s\" %actualresult;\r\n                #print \"TricK Mode result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n\r\n                #compare the actual result with expected result from the T2p trick mode response.\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Fast rewind with -4.0x is played successfully \";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to play fast Rewind with -4.0x\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response Failed to tune\";\r\n\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load TDKIntegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");\r\n','FREE','This script tests the playback of fast rewind with play speed -4x in LinearTV trickplay scenario scenario Test Case ID : E2E_LinearTV_09				',NULL,5,'				','\0'),(1147,4,'E2E_LinearTV_Live_Trickplay_FFW_4x_10',575,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay10\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"LinearTV module loading status :  %s\" %loadmodulestatus;\r\n\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"LinearTV module loaded successfully.\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_Tuning\');\r\n\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n        ocapId = \"ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request OCAP ID for tuning : %s\" %ocapId;\r\n        tdkTestObj.addParameter(\"ValidocapId\",ocapId);\r\n\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #print \"Tuned result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n        print \"Result of Json Response for Tuning : %s\" %actualresult;\r\n\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response tuning is success\";\r\n\r\n                #Sleep for 2 second before pausing. After tuning to different frequency.\r\n                time.sleep(2);\r\n                #Calling LinearTV_T2p_TrickMode Function for pausing the stream.\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                pauserate = 0.0;\r\n                tdkTestObj.addParameter(\"trickPlayRate\",pauserate);\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                 #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of T2p Trick Mode Pause: %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result from the T2p trick mode response.\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Paused Successfully \";\r\n\r\n                        #Sleep for 15 seconds for recording the content into TSB.\r\n                        print \"Paused for 15 seconds.. Please wait\"\r\n                        time.sleep(15);\r\n\r\n                        #Calling LinearTV_T2p_TrickMode Function by passing the play back rate.\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                        rate = 4.0;\r\n                        tdkTestObj.addParameter(\"trickPlayRate\",rate);\r\n                        tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n                        print \"Result of T2p Trick Mode: %s\" %actualresult;\r\n                        #print \"TricK Mode result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n\r\n                        #compare the actual result with expected result from the T2p trick mode response.\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Fast forward with 4.0x is played successfully \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to play fast forwad with 4.0x\";\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"Json response Failed to Pause\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response Failed to tune\";\r\n\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of fast forward with play speed 4X in LinearTV trickplay scenario Test Case ID : E2E_LinearTV_10				',NULL,5,'				','\0'),(1148,4,'E2E_LinearTV_Live_Trickplay_FFW_15x_11',575,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay11\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKintegration module loading status :  %s\" %loadmodulestatus;\r\n\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"TDKintegration module loaded successfully.\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_Tuning\');\r\n\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n        ocapId = \"ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request OCAP ID for tuning : %s\" %ocapId;\r\n        tdkTestObj.addParameter(\"ValidocapId\",ocapId);\r\n\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #print \"Tuned result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n        print \"Result of Json Response for Tuning : %s\" %actualresult;\r\n\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response tuning is success\";\r\n\r\n                #Sleep for 2 second before pausing. After tuning to different frequency.\r\n                time.sleep(2);\r\n                #Calling LinearTV_T2p_TrickMode Function for pausing the stream.\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                pauserate = 0.0;\r\n                tdkTestObj.addParameter(\"trickPlayRate\",pauserate);\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                 #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of T2p Trick Mode Pause: %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result from the T2p trick mode response.\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Paused Successfully \";\r\n\r\n                        #Sleep for 15 seconds for recording the content into TSB.\r\n                        print \"Paused for 15 seconds.. Please wait\"\r\n                        time.sleep(15);\r\n\r\n                        #Calling LinearTV_T2p_TrickMode Function by passing the play back rate.\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                        rate = 15.0;\r\n                        tdkTestObj.addParameter(\"trickPlayRate\",rate);\r\n                        tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n                        print \"Result of T2p Trick Mode: %s\" %actualresult;\r\n                        #print \"TricK Mode result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n\r\n                        #compare the actual result with expected result from the T2p trick mode response.\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Fast forward with 15.0x is played successfully \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to play fast forwad with 15.0x\";\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"Json response Failed to Pause\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response Failed to tune\";\r\n\r\n        #Unloading Tdkintegration module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of Fast forward with play speed 15x in LinearTV trickplay scenario Test Case ID : E2E_LinearTV_11				',NULL,5,'				','\0'),(1149,4,'E2E_LinearTV_Live_Trickplay_FFW_30x_12',575,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay12\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"TDKIntegration module loaded successfully.\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_Tuning\');\r\n\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n        ocapId = \"ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request OCAP ID for tuning : %s\" %ocapId;\r\n        tdkTestObj.addParameter(\"ValidocapId\",ocapId);\r\n\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #print \"Tuned result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n        print \"Result of Json Response for Tuning : %s\" %actualresult;\r\n\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response tuning is success\";\r\n\r\n                #Sleep for 2 second before pausing. After tuning to different frequency.\r\n                time.sleep(2);\r\n                #Calling LinearTV_T2p_TrickMode Function for pausing the stream.\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                pauserate = 0.0;\r\n                tdkTestObj.addParameter(\"trickPlayRate\",pauserate);\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                 #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of T2p Trick Mode Pause: %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result from the T2p trick mode response.\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Paused Successfully \";\r\n\r\n                        #Sleep for 30 seconds for recording the content into TSB.\r\n                        print \"Paused for 30 seconds.. Please wait\"\r\n                        time.sleep(30);\r\n\r\n                        #Calling LinearTV_T2p_TrickMode Function by passing the play back rate.\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                        rate = 30.0;\r\n                        tdkTestObj.addParameter(\"trickPlayRate\",rate);\r\n                        tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n                        print \"Result of T2p Trick Mode: %s\" %actualresult;\r\n                        #print \"TricK Mode result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n\r\n                        #compare the actual result with expected result from the T2p trick mode response.\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Fast forward with 30.0x is played successfully \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to play fast forward with 30.0x\";\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"Json response Failed to Pause\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response Failed to tune\";\r\n\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load TDKIntegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of fast forward with play speed 30x in LinearTV trickplay scenario Test Case ID : E2E_LinearTV_12				',NULL,5,'				','\0'),(1150,4,'E2E_LinearTV_Live_Trickplay_FFW_60x_13',575,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_13\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"TDKIntegration module loaded successfully.\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_Tuning\');\r\n\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n        ocapId = \"ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request OCAP ID for tuning : %s\" %ocapId;\r\n        tdkTestObj.addParameter(\"ValidocapId\",ocapId);\r\n\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #print \"Tuned result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n        print \"Result of Json Response for Tuning : %s\" %actualresult;\r\n\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response tuning is success\";\r\n\r\n                #Sleep for 2 second before pausing. After tuning to different frequency.\r\n                time.sleep(2);\r\n\r\n                #Calling LinearTV_T2p_TrickMode Function for pausing the stream.\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                pauserate = 0.0;\r\n                tdkTestObj.addParameter(\"trickPlayRate\",pauserate);\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                 #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of T2p Trick Mode Pause: %s\" %actualresult;\r\n\r\n                #compare the actual result with expected result from the T2p trick mode response.\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Paused Successfully \";\r\n\r\n                        #Sleep for 15 seconds for recording the content into TSB.\r\n                        print \"Paused for 30 seconds.. Please wait\"\r\n                        time.sleep(30);\r\n\r\n                        #Calling LinearTV_T2p_TrickMode Function by passing the play back rate.\r\n                        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                        rate = 60.0;\r\n                        tdkTestObj.addParameter(\"trickPlayRate\",rate);\r\n                        tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                        #Execute the test case in STB and pass the expected result\r\n                        expectedresult=\"SUCCESS\";\r\n                        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                        #Get the actual result of execution\r\n                        actualresult = tdkTestObj.getResult();\r\n                        print \"Result of T2p Trick Mode: %s\" %actualresult;\r\n                        #print \"TricK Mode result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n\r\n                        #compare the actual result with expected result from the T2p trick mode response.\r\n                        if expectedresult in actualresult:\r\n                                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                                print \"Fast forward with 60.0x is played successfully \";\r\n                        else:\r\n                                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                                print \"Failed to play fast forwad with 60.0x\";\r\n                else:\r\n                       tdkTestObj.setResultStatus(\"FAILURE\");\r\n                       print \"Json response Failed to Pause\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response Failed to tune\";\r\n\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of fast forward with play speed 60x in LinearTV trickplay scenario Test Case ID : E2E_LinearTV_13				',NULL,5,'				','\0'),(1151,4,'E2E_LinearTV_Live_Trickplay_FRW_15x_14',575,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_14\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"TDKIntegration module loaded successfully.\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_Tuning\');\r\n\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n        ocapId = \"ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request OCAP ID for tuning : %s\" %ocapId;\r\n        tdkTestObj.addParameter(\"ValidocapId\",ocapId);\r\n\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #print \"Tuned result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n        print \"Result of Json Response for Tuning : %s\" %actualresult;\r\n\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response tuning is success\";\r\n\r\n                #Sleep for 5 seconds before playing.So, content is recorded into TSB. After tuned to different frequency.\r\n                time.sleep(5);\r\n                #Calling LinearTV_T2p_TrickMode Function by passing the play back rate.\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                rate = -15.0;\r\n                tdkTestObj.addParameter(\"trickPlayRate\",rate);\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of T2p Trick Mode: %s\" %actualresult;\r\n                #print \"TricK Mode result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n\r\n                #compare the actual result with expected result from the T2p trick mode response.\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Fast rewind with -15.0x is played successfully \";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to play fast Rewind with -15.0x\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response Failed to tune\";\r\n\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load TDKintegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of fast reverse with play speed -15x in LinearTV trickplay scenario Test Case ID : E2E_LinearTV_14				',NULL,5,'				','\0'),(1152,4,'E2E_LinearTV_Live_Trickplay_FRW_30x_15',575,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay15\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"TDKIntegration module loaded successfully.\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_Tuning\');\r\n\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n        ocapId = \"ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request OCAP ID for tuning : %s\" %ocapId;\r\n        tdkTestObj.addParameter(\"ValidocapId\",ocapId);\r\n\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #print \"Tuned result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n        print \"Result of Json Response for Tuning : %s\" %actualresult;\r\n\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response tuning is success\";\r\n\r\n                #Sleep for 5 seconds before playing.So, content is recorded into TSB. After tuned to different frequency.\r\n                time.sleep(5);\r\n                #Calling LinearTV_T2p_TrickMode Function by passing the play back rate.\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                rate = -30.0;\r\n                tdkTestObj.addParameter(\"trickPlayRate\",rate);\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of T2p Trick Mode: %s\" %actualresult;\r\n                #print \"TricK Mode result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n\r\n                #compare the actual result with expected result from the T2p trick mode response.\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Fast rewind with -30.0x is played successfully \";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to play fast Rewind with -30.0x\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response Failed to tune\";\r\n\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of fast reverse with play speed -30x in LinearTV trickplay scenario Test Case ID : E2E_LinearTV_15				',NULL,5,'				','\0'),(1153,4,'E2E_LinearTV_Live_Trickplay_FRW_60x_16',575,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"tdkintegration\",\"1.3\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_16\');\r\n\r\n#Get the result of connection with test component and STB\r\nloadmodulestatus = obj.getLoadModuleResult();\r\nprint \"TDKIntegration module loading status :  %s\" %loadmodulestatus;\r\n\r\n#Check for SUCCESS/FAILURE of LinearTV module\r\nif \"SUCCESS\" in loadmodulestatus.upper():\r\n        print \"TDKIntegration module loaded successfully.\";\r\n        obj.setLoadModuleStatus(\"SUCCESS\");\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_Tuning\');\r\n\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n\r\n        ocapId = \"ocap://\"+streamDetails.getOCAPID();\r\n        print \"Request OCAP ID for tuning : %s\" %ocapId;\r\n        tdkTestObj.addParameter(\"ValidocapId\",ocapId);\r\n\r\n        #Execute the test case in STB and pass the expected result\r\n        expectedresult=\"SUCCESS\";\r\n        tdkTestObj.executeTestCase(expectedresult);\r\n\r\n        #Get the actual result of execution\r\n        actualresult = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        #print \"Tuned result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n        print \"Result of Json Response for Tuning : %s\" %actualresult;\r\n\r\n        #compare the actual result with expected result of Json response Parameter\r\n        if expectedresult in actualresult:\r\n                tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                print \"Json Response tuning is success\";\r\n\r\n                #Sleep for 5 seconds before playing.So, content is recorded into TSB.  After tuned to different frequency.\r\n                time.sleep(5);\r\n                #Calling LinearTV_T2p_TrickMode Function by passing the play back rate.\r\n                tdkTestObj = obj.createTestStep(\'TDKE2E_LinearTV_T2p_TrickMode\');\r\n                rate = -60.0;\r\n                tdkTestObj.addParameter(\"trickPlayRate\",rate);\r\n                tdkTestObj.addParameter(\"VideostreamURL\",details);\r\n                #Execute the test case in STB and pass the expected result\r\n                expectedresult=\"SUCCESS\";\r\n                tdkTestObj.executeTestCase(expectedresult);\r\n\r\n                #Get the actual result of execution\r\n                actualresult = tdkTestObj.getResult();\r\n                print \"Result of T2p Trick Mode: %s\" %actualresult;\r\n                #print \"TricK Mode result log-path = %s\" %tdkTestObj.getValue(\"log-path\");\r\n\r\n                #compare the actual result with expected result from the T2p trick mode response.\r\n                if expectedresult in actualresult:\r\n                        tdkTestObj.setResultStatus(\"SUCCESS\");\r\n                        print \"Fast rewind with -60.0x is played successfully \";\r\n                else:\r\n                        tdkTestObj.setResultStatus(\"FAILURE\");\r\n                        print \"Failed to play fast Rewind with -60.0x\";\r\n        else:\r\n                tdkTestObj.setResultStatus(\"FAILURE\");\r\n                print \"Json response Failed to tune\";\r\n\r\n        #Unloading LinearTV module\r\n        obj.unloadModule(\"tdkintegration\");\r\nelse:\r\n        print \"Failed to load TDKIntegration module\";\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','This script tests the playback of fast reverse with play speed -60x in LinearTV trickplay scenario Test Case ID : E2E_LinearTV_16				',NULL,5,'				','\0'),(1154,4,'RMF_QAMSrc_HNSink_01',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\" \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_01\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"HNSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                #result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"dctpEnable\",\"typeFlag\",\"socketId\"]\r\n                                                        src_element=[\"false\",0,37]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"QAM_SRC\"]\r\n                                                                #result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(30);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                print \"QAMSource play successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource play failed\"\r\n                                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"HNSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                #src_parameter=[\"rmfElement\"]\r\n                                                #src_element=[\"HNSink\"]\r\n                                                #result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to true.\r\nTest CaseID: CT_RMF_QAMSrc_HNSink_01\r\nTest Type: Positive				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. ',''),(1155,6,'RMF_QAMSrc_HNSink_02',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_02\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[]\r\n                                                        src_element=[]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"HNSink\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"dctpEnable\",\"typeFlag\",\"socketId\"]\r\n                                                                        src_element=[\"false\",0,37]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                src_element=[\"QAM_SRC\"]\r\n                                                                                #result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        time.sleep(30);\r\n                                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                                print \"QAMSource play successful\"\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                        else:\r\n                                                                                                                print \"QAMSource play failed\"\r\n                                                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                        src_element=[\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                                src_parameter=[]\r\n                                                                src_element=[]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                        #src_parameter=[\"rmfElement\"]\r\n                                                        #src_element=[\"HNSink\"]\r\n                                                        #result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to false.\r\nTest caseID: CT_RMF_QAMSrc_HNSink_02\r\nTest Type: Positive				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 			',''),(1156,6,'RMF_QAMSrc_HNSink_03',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_03\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"HNSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"dctpEnable\",\"typeFlag\"]\r\n                                                        src_element=[\"true\",0]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"QAM_SRC\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(30);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                print \"QAMSource play successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource play failed\"\r\n                                                                                                tdkTestObj.setResultStatus(failure);\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"HNSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To stream out the live content through HNSink on to the network when factory method flag is set to true and dtcp is true.\r\nTest CaseID: CT_RMF_QAMSrc_HNSink_03\r\nTest Type: Positive				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				',''),(1157,2,'RMF_QAMSrc_HNSink_04',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_04\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[]\r\n                                                        src_element=[]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"HNSink\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"dctpEnable\",\"typeFlag\"]\r\n                                                                        src_element=[\"true\",0]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                src_element=[\"QAM_SRC\"]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        time.sleep(30);\r\n                                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                                print \"QAMSource play successful\"\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                        else:\r\n                                                                                                                print \"QAMSource play failed\"\r\n                                                                                                                tdkTestObj.setResultStatus(failure);\r\n                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                        src_element=[\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                                src_parameter=[]\r\n                                                                src_element=[]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to false and when dtcp_enabled is true.\r\nTest Case ID: CT_RMF_QAMSrc_HNSink_04\r\nTest Type: Positive\r\n\r\n				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 			',''),(1158,4,'RMF_QAMSrc_HNSink_07',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_07\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"HNSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"dctpEnable\",\"typeFlag\",\"socketId\"]\r\n                                                        src_element=[\"false\",1,01]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"QAM_SRC\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(30);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                print \"QAMSource play successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource play failed\"\r\n                                                                                                tdkTestObj.setResultStatus(failure);\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"HNSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                              result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to true but set random socketId to hnsink properties.\r\nTest CaseID: CT_RMF_QAMSrc_HNSink_07\r\nTest Type: Negative				',NULL,3,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				',''),(1159,4,'RMF_QAMSrc_HNSink_08',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_08\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[]\r\n                                                        src_element=[]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"HNSink\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"dctpEnable\",\"typeFlag\",\"socketId\"]\r\n                                                                        src_element=[\"false\",1,9]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                src_element=[\"QAM_SRC\"]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        time.sleep(30);\r\n                                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                                print \"QAMSource play successful\"\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                        else:\r\n                                                                                                                print \"QAMSource play failed\"\r\n                                                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                        src_element=[\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                                src_parameter=[]\r\n                                                                src_element=[]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to false but set random socketId to hnsink properties..\r\nTest CaseID: CT_RMF_QAMSrc_HNSink_08\r\nTest Type: Negative				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				',''),(1160,4,'RMF_QAMSrc_HNSink_09',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_09\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"HNSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"url\",\"dctpEnable\",\"typeFlag\"]\r\n                                                        src_element=[\"ocap://0xaq213\",\"false\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"QAM_SRC\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(30);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                print \"QAMSource play successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource play failed\"\r\n                                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"HNSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to true but set invalid url to hnsink properties.\r\nTest Case ID: CT_RMF_QAMSrc_HNSink_09\r\nTest Type: Negative				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				',''),(1161,4,'RMF_QAMSrc_HNSink_10',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_10\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[]\r\n                                                        src_element=[]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"HNSink\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"url\",\"dctpEnable\",\"typeFlag\"]\r\n                                                                        src_element=[\"ocap://0xaa2221\",\"false\",1]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                src_element=[\"QAM_SRC\"]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        time.sleep(30);\r\n                                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                                print \"QAMSource play successful\"\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                        else:\r\n                                                                                                                print \"QAMSource play failed\"\r\n                                                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                        src_element=[\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                                src_parameter=[]\r\n                                                                src_element=[]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to false but set invalid url to hnsink properties.\r\nTest Case ID: CT_RMF_QAMSrc_HNSink_10\r\nTest Type: Negative				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				',''),(1162,4,'RMF_QAMSrc_HNSink_11',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_11\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"HNSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"dctpEnable\",\"typeFlag\"]\r\n                                                        src_element=[\"false\",1]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"HN_SRC\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(30);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                print \"QAMSource play successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource play failed\"\r\n                                                                                                tdkTestObj.setResultStatus(failure);\r\n\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"HNSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to true but set sourceType as HN_SRC.\r\nTest CaseID: CT_RMF_QAMSrc_HNSink_11\r\nTest Type: Negative				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				',''),(1163,4,'RMF_QAMSrc_HNSink_12',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_12\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[]\r\n                                                        src_element=[]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"HNSink\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"dctpEnable\",\"typeFlag\"]\r\n                                                                        src_element=[\"false\",1]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                src_element=[\"HN_SRC\"]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        time.sleep(30);\r\n                                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                                print \"QAMSource play successful\"\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                        else:\r\n                                                                                                                print \"QAMSource play failed\"\r\n                                                                                                                tdkTestObj.setResultStatus(failure);\r\n                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                        src_element=[\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                                src_parameter=[]\r\n                                                                src_element=[]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to false but set setSourceType to HN_SRC.\r\nTest Case ID: CT_RMF_QAMSrc_HNSink_12\r\nTest Type: Negative				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				',''),(1164,4,'RMF_QAMSrc_HNSink_13',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_13\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"HNSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"dctpEnable\",\"typeFlag\",\"streamIp\"]\r\n                                                        src_element=[\"false\",1,\"168.21.34.11\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"QAM_SRC\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(30);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                print \"QAMSource play successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource play failed\"\r\n                                                                                                tdkTestObj.setResultStatus(failure);\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"HNSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to true but set invalid streamingIp.\r\nTest Case ID: CT_RMF_QAMSrc_HNSink_13\r\nTest Type: Negative				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				',''),(1165,4,'RMF_QAMSrc_HNSink_14',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_14\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[]\r\n                                                        src_element=[]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"HNSink\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"dctpEnable\",\"typeFlag\",\"streamIp\"]\r\n                                                                        src_element=[\"false\",1,\"168.23.14.11\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                src_element=[\"QAM_SRC\"]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        time.sleep(30);\r\n                                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                                print \"QAMSource play successful\"\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                        else:\r\n                                                                                                                print \"QAMSource play failed\"\r\n                                                                                                                tdkTestObj.setResultStatus(failure);\r\n                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                        src_element=[\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                                src_parameter=[]\r\n                                                                src_element=[]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to false but set invalid streaingIp.\r\nTest Case ID: CT_RMF_QAMSrc_HNSink_14\r\nTest Type: Negative			',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				',''),(1166,6,'RMF_QAMSrc_HNSink_05',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_05\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Create_Instance\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"qamSrcUrl\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"true\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"HNSink\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[\"dctpEnable\",\"typeFlag\",\"useChunkTransfer\"]\r\n                                                        src_element=[\"false\",0,\"false\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"QAM_SRC\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        time.sleep(30);\r\n                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                print \"QAMSource play successful\"\r\n                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                                src_element=[\"QAMSrc\"]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Pause\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        else:\r\n                                                                                                print \"QAMSource play failed\"\r\n                                                                                                tdkTestObj.setResultStatus(failure);\r\n                                                        src_parameter=[\"rmfElement\"]\r\n                                                        src_element=[\"HNSink\"]\r\n                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[]\r\n                                        src_element=[]\r\n                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"true\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to true and set use chunk transfer as false  to HNSinkproperties.\r\nTest Case ID: CT_RMF_QAMSrc_HNSink_05\r\nTest Type: Negative				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				',''),(1167,4,'RMF_QAMSrc_HNSink_06',494,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n\r\nexpected_Result=\"SUCCESS\"\r\nfailure = \"FAILURE\"\r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"mediaframework\",\"2.0\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'RMF_QAMSrc_HNSink_06\');\r\n\r\ndef Create_and_ExecuteTestStep(teststep, testobject, expectedresult,parametername, parametervalue):\r\n    global details\r\n    global tdkTestObj\r\n    #Primitive test case which associated to this Script\r\n    tdkTestObj =testobject.createTestStep(teststep);\r\n\r\n    if teststep == \'RMF_Element_Open\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        ocapLocator = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(ocapLocator);\r\n        print \"OcapLocator:\",ocapLocator\r\n\r\n    if teststep == \'RmfElement_HNSink_SetProperties\':\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        url = \"ocap://\"+streamDetails.getOCAPID();\r\n        parametername.append(\"url\");\r\n        parametervalue.append(url);\r\n        print \"hnsink url:\",url\r\n\r\n    for item in range(len(parametername)):\r\n        tdkTestObj.addParameter(parametername[item],parametervalue[item]);\r\n\r\n    #Execute the test case in STB\r\n    tdkTestObj.executeTestCase(expectedresult);\r\n    #Get the result of execution\r\n    result = tdkTestObj.getResult();\r\n    details = tdkTestObj.getResultDetails();\r\n\r\n    if teststep != \'RMF_Element_GetState\':\r\n       tdkTestObj.setResultStatus(result);\r\n\r\n    print \"[Execution Result]:  %s\" %result;\r\n    print \"[Execution Details]:  %s\" %details;\r\n\r\n    return result\r\n\r\n#Get the result of connection with test component and STB\r\nloadModuleStatus = obj.getLoadModuleResult();\r\nprint \"Load Module Status :  %s\" %loadModuleStatus;\r\n\r\n\r\nif expected_Result in loadModuleStatus.upper():\r\n        #Prmitive test case which associated to this Script\r\n        #Change the List according to Prmitive test case\r\n        src_parameter=[];\r\n        src_element=[];\r\n        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Init\',obj,expected_Result,src_parameter,src_element);\r\n        if expected_Result in result.upper():\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                if expected_Result in result.upper():\r\n                        src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                        src_element=[\"QAMSrc\",\"false\"]\r\n                        result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        if expected_Result in result.upper():\r\n                                src_parameter=[\"rmfElement\"]\r\n                                src_element=[\"QAMSrc\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                if expected_Result in result.upper():\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Open\',obj,expected_Result,src_parameter,src_element);\r\n                                        if expected_Result in result.upper():\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"HNSink\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Create_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                                                if expected_Result in result.upper():\r\n                                                        src_parameter=[]\r\n                                                        src_element=[]\r\n                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_InitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n\r\n                                                        if expected_Result in result.upper():\r\n                                                                src_parameter=[\"rmfElement\"]\r\n                                                                src_element=[\"HNSink\"]\r\n                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Init\',obj,expected_Result,src_parameter,src_element);\r\n                                                                if expected_Result in result.upper():\r\n                                                                        src_parameter=[\"dctpEnable\",\"typeFlag\",\"useChunkTransfer\"]\r\n                                                                        src_element=[\"false\",0,\"false\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetProperties\',obj,expected_Result,src_parameter,src_element);\r\n                                                                        if expected_Result in result.upper():\r\n                                                                                src_parameter=[\"rmfElement\"]\r\n                                                                                src_element=[\"QAM_SRC\"]\r\n                                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_SetSourceType\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                if expected_Result in result.upper():\r\n                                                                                        src_parameter=[\"rmfSourceElement\",\"rmfSinkElement\"]\r\n                                                                                        src_element=[\"QAMSrc\",\"HNSink\"]\r\n                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Sink_SetSource\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                        if expected_Result in result.upper():\r\n                                                                                                src_parameter=[\"rmfElement\",\"defaultPlay\",\"playSpeed\",\"playTime\"]\r\n                                                                                                src_element=[\"QAMSrc\",1,1.0,0.0]\r\n                                                                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Play\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                if expected_Result in result.upper():\r\n                                                                                                        time.sleep(30);\r\n                                                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                                                        src_element=[\"QAMSrc\"]\r\n                                                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_GetState\',obj,expected_Result,src_parameter,src_element);\r\n                                                                                                        if expected_Result in result.upper() and \"PLAYING\" in details.upper():\r\n                                                                                                                print \"QAMSource play successful\"\r\n                                                                                                                tdkTestObj.setResultStatus(result);\r\n                                                                                                        else:\r\n                                                                                                                print \"QAMSource play failed\"\r\n                                                                                                                tdkTestObj.setResultStatus(failure);\r\n                                                                        src_parameter=[\"rmfElement\"]\r\n                                                                        src_element=[\"HNSink\"]\r\n                                                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                                                src_parameter=[]\r\n                                                                src_element=[]\r\n                                                                result=Create_and_ExecuteTestStep(\'RmfElement_HNSink_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                                                src_parameter=[\"rmfElement\"]\r\n                                                src_element=[\"QAMSrc\"]\r\n                                                result=Create_and_ExecuteTestStep(\'RMF_Element_Close\',obj,expected_Result,src_parameter,src_element);\r\n                                        src_parameter=[\"rmfElement\"]\r\n                                        src_element=[\"QAMSrc\"]\r\n                                        result=Create_and_ExecuteTestStep(\'RMF_Element_Term\',obj,expected_Result,src_parameter,src_element);\r\n                                src_parameter=[\"rmfElement\",\"factoryEnable\"]\r\n                                src_element=[\"QAMSrc\",\"false\"]\r\n                                result=Create_and_ExecuteTestStep(\'RMF_Element_Remove_Instance\',obj,expected_Result,src_parameter,src_element);\r\n                        src_parameter=[];\r\n                        src_element=[];\r\n                        result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_UninitPlatform\',obj,expected_Result,src_parameter,src_element);\r\n                src_parameter=[];\r\n                src_element=[];\r\n                result=Create_and_ExecuteTestStep(\'RmfElement_QAMSrc_RmfPlatform_Uninit\',obj,expected_Result,src_parameter,src_element);\r\n        else:\r\n                print \"Status of RmfElement_QAMSrc_RmfPlatform_Init:  %s\" %loadModuleStatus;\r\n        obj.initiateReboot();\r\n        obj.unloadModule(\"mediaframework\");\r\nelse:\r\n        print \"Load Module Failed\"\r\n        obj.setLoadModuleStatus(\"FAILURE\");','FREE','RMF_QAMSrc – To Stream out the live content through HNSink on to the network when factory method flag is set to false and set use chunk transfer as false  to HNSinkproperties.\r\nTest Case ID:CT_RMF_QAMSrc_HNSink_06\r\nTest Type: Negative				',NULL,4,'HNSink Api setHNSinkProperties() failing with segmentation fault. Need to raise the RDKTT ticket. 				','');
/*!40000 ALTER TABLE `script` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script_box_type`
--

DROP TABLE IF EXISTS `script_box_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script_box_type` (
  `script_box_types_id` bigint(20) DEFAULT NULL,
  `box_type_id` bigint(20) DEFAULT NULL,
  KEY `FK7583C622B8519149` (`script_box_types_id`),
  KEY `FK7583C62241CE91C` (`box_type_id`),
  CONSTRAINT `FK7583C62241CE91C` FOREIGN KEY (`box_type_id`) REFERENCES `box_type` (`id`),
  CONSTRAINT `FK7583C622B8519149` FOREIGN KEY (`script_box_types_id`) REFERENCES `script` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script_box_type`
--

LOCK TABLES `script_box_type` WRITE;
/*!40000 ALTER TABLE `script_box_type` DISABLE KEYS */;
INSERT INTO `script_box_type` VALUES (375,1),(375,2),(627,1),(627,2),(639,1),(639,2),(289,2),(777,2),(298,2),(396,2),(954,2),(259,1),(259,2),(999,1),(999,2),(997,1),(997,2),(995,1),(995,2),(998,1),(998,2),(1000,1),(1000,2),(1001,1),(1001,2),(1003,1),(1003,2),(1006,1),(1006,2),(1007,1),(1007,2),(1005,1),(1005,2),(1008,1),(1008,2),(1009,1),(1009,2),(1010,1),(1010,2),(1011,1),(1011,2),(1012,1),(1012,2),(1013,1),(1013,2),(1014,1),(1014,2),(1015,1),(1015,2),(1016,1),(1016,2),(1017,1),(1017,2),(1018,1),(1018,2),(1019,1),(1019,2),(1020,1),(1020,2),(1021,1),(1021,2),(1022,1),(1022,2),(1025,1),(1025,2),(1026,1),(1026,2),(1027,1),(1027,2),(1028,1),(1028,2),(1029,1),(1029,2),(1030,1),(1030,2),(1031,1),(1031,2),(1032,1),(1032,2),(1033,1),(1033,2),(1034,1),(1034,2),(1035,1),(1035,2),(1036,1),(1036,2),(1037,1),(1037,2),(1038,1),(1038,2),(1039,1),(1039,2),(1040,1),(1040,2),(1041,1),(1041,2),(1042,1),(1042,2),(1043,1),(1043,2),(1044,1),(1044,2),(1045,1),(1045,2),(1058,1),(1058,2),(1063,1),(1063,2),(1059,1),(1059,2),(1060,1),(1060,2),(1061,1),(1061,2),(1084,1),(1084,2),(1051,1),(1051,2),(1052,1),(1052,2),(1053,1),(1053,2),(1054,1),(1054,2),(1055,1),(1055,2),(1056,1),(1056,2),(1047,1),(1047,2),(1048,1),(1048,2),(1049,1),(1049,2),(812,2),(813,2),(814,2),(815,2),(816,2),(231,2),(817,2),(818,2),(819,2),(820,2),(821,2),(913,2),(921,2),(923,2),(930,2),(931,2),(1050,1),(1050,2),(1024,1),(1024,2),(920,2),(489,2),(801,1),(801,2),(891,2),(877,2),(1046,1),(1046,2),(431,2),(1143,2),(461,2),(932,2),(388,1),(388,2),(258,1),(258,2),(207,1),(207,2),(209,1),(209,2),(675,1),(675,2),(210,1),(210,2),(672,1),(672,2),(206,1),(206,2),(255,1),(255,2),(204,1),(204,2),(669,1),(669,2),(625,1),(625,2),(624,1),(624,2),(673,1),(673,2),(671,1),(671,2),(208,1),(208,2),(626,1),(626,2),(655,1),(655,2),(670,1),(670,2),(1124,2),(199,1),(199,2),(254,1),(254,2),(256,1),(256,2),(205,1),(205,2),(665,1),(630,1),(663,1),(667,2),(668,1),(668,2),(664,1),(664,2),(628,2),(660,2),(661,1),(662,1),(629,1),(629,2),(631,1),(631,2),(632,1),(632,2),(656,1),(656,2),(265,1),(265,2),(602,1),(602,2),(601,1),(601,2),(650,1),(650,2),(603,1),(603,2),(604,1),(604,2),(194,1),(194,2),(597,1),(597,2),(658,1),(658,2),(646,1),(646,2),(596,1),(596,2),(595,1),(595,2),(590,1),(590,2),(594,1),(594,2),(591,1),(591,2),(593,1),(593,2),(592,1),(592,2),(193,1),(193,2),(587,1),(587,2),(586,1),(586,2),(644,1),(644,2),(588,1),(588,2),(589,1),(589,2),(192,1),(192,2),(583,1),(583,2),(657,1),(657,2),(582,1),(582,2),(584,1),(584,2),(645,1),(645,2),(585,1),(585,2),(202,1),(202,2),(616,1),(616,2),(618,1),(618,2),(614,1),(614,2),(615,1),(615,2),(617,1),(617,2),(652,1),(652,2),(266,1),(266,2),(608,1),(608,2),(605,1),(605,2),(606,1),(606,2),(651,1),(651,2),(607,1),(607,2),(201,1),(201,2),(609,1),(609,2),(611,1),(611,2),(613,1),(613,2),(612,1),(612,2),(610,1),(610,2),(653,1),(653,2),(642,1),(642,2),(640,1),(640,2),(641,1),(641,2),(643,1),(643,2),(196,1),(196,2),(599,1),(599,2),(600,1),(600,2),(598,1),(598,2),(649,1),(649,2),(203,1),(203,2),(623,1),(623,2),(619,1),(619,2),(620,1),(620,2),(654,1),(654,2),(621,1),(621,2),(622,1),(622,2),(638,1),(638,2),(637,1),(637,2),(648,1),(648,2),(195,1),(195,2),(633,1),(633,2),(634,1),(634,2),(659,1),(659,2),(636,1),(636,2),(635,1),(635,2),(81,1),(81,2),(94,1),(94,2),(104,1),(104,2),(99,1),(99,2),(100,1),(100,2),(105,1),(105,2),(102,1),(102,2),(98,1),(98,2),(97,1),(97,2),(101,1),(101,2),(103,1),(103,2),(96,1),(96,2),(79,1),(79,2),(31,1),(31,2),(32,1),(32,2),(33,1),(33,2),(88,1),(88,2),(91,1),(91,2),(1062,1),(1062,2),(90,1),(90,2),(93,1),(93,2),(78,1),(78,2),(92,1),(92,2),(69,1),(69,2),(72,1),(72,2),(73,1),(73,2),(76,1),(76,2),(74,1),(74,2),(75,1),(75,2),(77,1),(77,2),(71,1),(71,2),(70,1),(70,2),(89,1),(89,2),(68,1),(68,2),(57,1),(57,2),(797,1),(797,2),(417,1),(417,2),(412,1),(412,2),(799,1),(799,2),(800,1),(800,2),(947,1),(947,2),(802,1),(802,2),(803,1),(803,2),(804,1),(804,2),(952,1),(952,2),(806,1),(806,2),(807,1),(807,2),(946,1),(946,2),(809,1),(809,2),(810,1),(810,2),(811,1),(811,2),(986,2),(989,2),(987,2),(988,2),(992,2),(993,2),(994,2),(991,2),(990,2),(982,1),(982,2),(389,1),(389,2),(984,1),(984,2),(985,1),(985,2),(296,1),(296,2),(271,1),(271,2),(301,1),(301,2),(262,1),(262,2),(300,1),(300,2),(305,1),(305,2),(983,1),(983,2),(263,1),(263,2),(492,2),(501,2),(490,2),(491,2),(452,2),(453,2),(890,2),(886,2),(495,2),(496,2),(506,2),(897,2),(898,2),(460,2),(500,2),(499,2),(462,2),(498,2),(497,2),(847,2),(848,2),(849,2),(850,2),(502,2),(503,2),(851,2),(852,2),(853,2),(854,2),(855,2),(856,2),(857,2),(858,2),(859,2),(860,2),(427,2),(871,2),(433,2),(430,2),(872,2),(424,2),(1157,2),(426,2),(908,2),(905,2),(904,2),(903,2),(902,2),(901,2),(900,2),(899,2),(948,2),(896,2),(949,2),(951,2),(873,2),(874,2),(1132,2),(875,2),(1120,2),(1126,2),(1131,2),(1125,2),(878,2),(1129,2),(879,2),(1130,2),(1121,2),(880,2),(1133,2),(1122,2),(881,2),(1119,2),(1118,2),(1134,2),(895,2),(1135,2),(1136,2),(893,2),(1138,2),(892,2),(1139,2),(1140,2),(942,2),(1141,2),(1142,2),(1154,2),(1155,2),(1156,2),(889,2),(1166,2),(1167,2),(1158,2),(1159,2),(882,2),(1160,2),(883,2),(1161,2),(1162,2),(884,2),(1163,2),(1164,2),(1165,2),(933,2),(862,2),(863,2),(887,2),(888,2),(1097,1),(1081,1),(1137,2),(190,1),(190,2),(191,1),(191,2),(188,1),(188,2),(306,1),(306,2),(274,1),(274,2),(270,1),(270,2),(370,2),(336,2),(383,1),(383,2),(1145,2),(1148,2),(1149,2),(1147,2),(1150,2),(1151,2),(1152,2),(1153,2),(1144,2),(1080,1),(1082,1),(1083,1),(1074,1),(1076,1),(1078,1),(1075,1),(1073,1),(1077,1),(1079,1),(1072,1),(1071,1),(1070,1),(1067,1),(1069,1),(1068,1),(1064,1),(1146,2),(1090,1),(1098,1),(1099,1),(876,2),(187,1),(186,2),(185,1),(184,2),(351,1),(351,2),(312,1),(312,2),(333,1),(333,2),(363,1),(363,2),(386,1),(386,2),(368,1),(368,2),(372,1),(372,2),(379,1),(379,2),(378,1),(378,2),(382,1),(382,2),(381,1),(381,2),(922,2),(1057,1),(1057,2),(1123,2),(647,1),(647,2),(912,2),(805,1),(805,2),(944,2),(943,2),(1086,1),(1085,1),(1087,1),(1088,1),(1089,1),(1091,1),(1092,1),(1093,1),(1094,1),(1095,1),(1096,1),(507,2),(568,2),(567,2),(569,2),(970,2),(971,2),(565,2),(570,2),(574,2),(577,2),(572,2),(575,2),(576,2),(563,2),(573,2),(571,2),(564,2),(578,2),(566,2),(369,1),(369,2),(371,1),(371,2),(374,1),(374,2),(373,1),(373,2),(376,1),(376,2),(377,1),(377,2),(380,1),(380,2),(384,1),(384,2),(385,1),(385,2),(387,1),(387,2),(352,1),(352,2),(364,1),(364,2),(332,1),(332,2),(532,1),(532,2),(549,1),(549,2),(548,1),(548,2),(550,1),(550,2),(547,1),(547,2),(545,1),(545,2),(546,1),(546,2),(1105,1),(1104,1),(1106,1),(1107,1),(1108,1),(1109,1),(1110,1),(1111,1),(1112,1),(1113,1),(1114,1),(1116,1),(1115,1),(1103,1),(1102,1),(1101,1),(885,2),(950,2);
/*!40000 ALTER TABLE `script_box_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script_group`
--

DROP TABLE IF EXISTS `script_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script_group` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `FKB4D8260B984B586A` (`groups_id`),
  CONSTRAINT `FKB4D8260B984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=195 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script_group`
--

LOCK TABLES `script_group` WRITE;
/*!40000 ALTER TABLE `script_group` DISABLE KEYS */;
INSERT INTO `script_group` VALUES (20,991,'ComponentSuite','FREE',NULL),(23,4883,'Xi3Suite','FREE',NULL),(24,6946,'XG1Suite','FREE',NULL),(65,3172,'Hybrid-1Suite','FREE',NULL),(67,87,'2.0_XG1','FREE',NULL),(68,71,'2.0_XI3','FREE',NULL),(69,3,'1.3_XG1','FREE',NULL),(70,23,'1.3_XI3','FREE',NULL),(108,881,'IPClient-3Suite','FREE',NULL),(183,24,'ClosedCaption','FREE',NULL),(184,113,'DeviceSettings','FREE',NULL),(185,124,'tdkintegration','FREE',NULL),(186,3,'rmfapp','FREE',NULL),(187,13,'OpenSource_Components','FREE',NULL),(188,51,'IARMBUS ','FREE',NULL),(189,18,'Mediastreamer','FREE',NULL),(190,6,'RDKLogger','FREE',NULL),(191,8,'Recorder','FREE',NULL),(192,141,'Mediaframework','FREE',NULL),(193,12,'ServiceManager','FREE',NULL),(194,0,'newrmf','FREE',NULL);
/*!40000 ALTER TABLE `script_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script_group_script`
--

DROP TABLE IF EXISTS `script_group_script`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script_group_script` (
  `script_group_scripts_id` bigint(20) DEFAULT NULL,
  `script_id` bigint(20) DEFAULT NULL,
  KEY `FKF6D3D57FE2F1DCCF` (`script_id`),
  KEY `FKF6D3D57F6492105` (`script_group_scripts_id`),
  CONSTRAINT `FKF6D3D57F6492105` FOREIGN KEY (`script_group_scripts_id`) REFERENCES `script_group` (`id`),
  CONSTRAINT `FKF6D3D57FE2F1DCCF` FOREIGN KEY (`script_id`) REFERENCES `script` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script_group_script`
--

LOCK TABLES `script_group_script` WRITE;
/*!40000 ALTER TABLE `script_group_script` DISABLE KEYS */;
INSERT INTO `script_group_script` VALUES (20,192),(20,193),(20,194),(20,195),(20,196),(20,199),(20,201),(20,202),(20,203),(20,204),(20,205),(20,206),(20,207),(20,208),(20,209),(20,210),(20,231),(20,254),(20,255),(20,256),(20,258),(20,31),(20,262),(20,263),(20,265),(20,266),(20,32),(20,96),(20,97),(20,98),(20,99),(20,100),(20,101),(20,102),(20,103),(20,104),(20,105),(20,33),(20,57),(20,68),(20,69),(20,70),(20,71),(20,72),(20,73),(20,74),(20,75),(20,76),(20,77),(20,78),(20,79),(20,81),(20,88),(20,89),(20,90),(20,91),(20,93),(20,92),(20,94),(20,271),(20,296),(20,300),(20,301),(20,305),(20,312),(20,332),(20,333),(20,351),(20,352),(20,363),(20,364),(20,368),(20,369),(20,371),(20,372),(20,373),(20,374),(20,375),(20,376),(20,377),(20,378),(20,379),(20,380),(20,381),(20,382),(20,384),(20,385),(20,386),(20,387),(20,388),(20,389),(20,396),(24,396),(20,412),(20,417),(20,424),(20,426),(20,427),(20,430),(20,431),(20,433),(20,452),(20,453),(20,460),(20,461),(20,462),(20,489),(20,490),(20,491),(20,492),(20,495),(20,496),(20,497),(20,498),(20,499),(20,500),(20,501),(20,502),(20,503),(20,506),(20,507),(20,532),(20,545),(20,546),(20,547),(20,548),(20,549),(20,550),(20,563),(20,564),(20,565),(20,566),(20,567),(20,568),(20,569),(20,570),(20,571),(20,572),(20,573),(20,574),(20,575),(20,576),(20,577),(20,578),(24,430),(24,545),(24,546),(24,547),(24,550),(23,351),(24,351),(23,312),(24,312),(23,386),(24,386),(23,368),(24,368),(23,372),(24,372),(23,379),(24,379),(23,378),(24,378),(23,382),(24,382),(23,381),(24,381),(23,369),(24,369),(23,375),(24,375),(23,371),(24,371),(23,374),(24,374),(23,373),(24,373),(23,376),(24,376),(24,548),(23,377),(24,377),(23,380),(24,380),(24,549),(23,384),(24,384),(24,532),(23,385),(24,385),(23,387),(24,387),(23,352),(24,352),(23,412),(23,364),(24,364),(23,417),(23,332),(24,332),(23,333),(24,333),(23,57),(24,57),(23,363),(24,363),(23,68),(24,68),(23,91),(24,91),(23,89),(24,89),(23,70),(24,70),(23,71),(24,71),(23,77),(24,77),(23,75),(24,75),(23,74),(24,74),(23,76),(24,76),(23,73),(24,73),(23,72),(24,72),(23,69),(24,69),(23,92),(24,92),(23,78),(24,78),(23,93),(24,93),(23,90),(24,90),(23,88),(24,88),(23,32),(24,32),(23,31),(24,31),(23,79),(24,79),(23,96),(24,96),(23,103),(24,103),(23,101),(24,101),(23,97),(24,97),(23,98),(24,98),(23,102),(24,102),(23,105),(24,105),(23,100),(24,100),(23,99),(24,99),(23,104),(24,104),(23,94),(24,94),(23,81),(24,81),(23,259),(24,259),(23,190),(24,190),(23,191),(24,191),(23,188),(24,188),(23,383),(24,383),(24,184),(23,185),(24,186),(23,306),(24,306),(23,274),(24,274),(23,270),(24,270),(24,370),(24,336),(23,187),(23,263),(24,263),(23,305),(24,305),(23,300),(24,300),(23,262),(24,262),(23,301),(24,301),(23,271),(24,271),(23,296),(24,296),(23,388),(24,388),(23,389),(24,389),(24,575),(24,576),(24,563),(24,573),(24,571),(24,564),(24,578),(24,566),(24,507),(24,492),(24,501),(24,502),(24,503),(24,490),(24,491),(24,496),(24,500),(24,499),(24,498),(24,497),(24,461),(24,460),(24,462),(24,431),(24,427),(24,426),(24,433),(24,424),(24,453),(24,452),(24,289),(24,298),(24,231),(24,568),(24,567),(24,572),(24,569),(24,565),(24,570),(24,574),(23,33),(24,33),(24,577),(20,582),(20,583),(20,584),(20,585),(20,586),(20,587),(20,588),(20,589),(20,590),(20,591),(20,592),(20,593),(20,594),(20,595),(20,596),(20,597),(20,598),(20,599),(20,600),(20,601),(20,602),(20,603),(20,604),(20,605),(20,606),(20,607),(20,608),(20,609),(20,610),(20,611),(20,612),(20,613),(20,614),(20,615),(20,616),(20,617),(20,618),(20,619),(20,620),(20,621),(20,622),(20,623),(20,624),(20,625),(20,626),(20,627),(20,628),(20,629),(20,630),(20,631),(20,632),(24,489),(20,633),(20,634),(20,635),(20,636),(20,637),(20,638),(20,639),(20,640),(20,641),(20,642),(20,643),(20,644),(20,645),(20,646),(20,647),(20,648),(20,649),(20,650),(20,651),(20,652),(20,653),(20,654),(20,655),(20,656),(20,657),(20,658),(20,659),(20,660),(20,661),(20,662),(20,663),(20,664),(20,665),(20,667),(20,668),(20,669),(20,670),(20,671),(20,672),(20,673),(23,673),(24,673),(23,586),(24,586),(23,602),(24,602),(23,603),(24,603),(23,601),(24,601),(23,604),(24,604),(23,658),(24,658),(23,596),(24,596),(23,590),(24,590),(23,594),(24,594),(23,591),(24,591),(23,593),(24,593),(23,592),(24,592),(23,587),(24,587),(23,588),(24,588),(23,589),(24,589),(23,583),(24,583),(23,582),(24,582),(23,584),(24,584),(23,585),(24,585),(23,616),(24,616),(23,618),(24,618),(23,614),(24,614),(23,615),(24,615),(23,617),(24,617),(23,605),(24,605),(23,606),(24,606),(23,607),(24,607),(23,669),(24,669),(23,625),(24,625),(23,627),(24,627),(23,665),(24,665),(23,630),(24,630),(23,663),(24,663),(23,667),(24,667),(23,668),(24,668),(23,664),(24,664),(23,628),(24,628),(23,660),(24,660),(23,661),(24,661),(23,662),(24,662),(23,629),(24,629),(23,631),(24,631),(23,632),(24,632),(23,671),(24,671),(23,624),(24,624),(23,626),(24,626),(23,670),(24,670),(23,609),(24,609),(23,611),(24,611),(23,613),(24,613),(23,612),(24,612),(23,610),(24,610),(23,640),(24,640),(23,639),(24,639),(23,641),(24,641),(23,623),(24,623),(23,619),(24,619),(23,620),(24,620),(23,621),(24,621),(23,650),(24,650),(23,646),(24,646),(23,644),(24,644),(23,652),(24,652),(23,645),(24,645),(23,651),(24,651),(23,655),(24,655),(23,653),(24,653),(23,656),(24,656),(23,643),(24,643),(23,647),(24,647),(23,634),(24,634),(23,633),(24,633),(23,648),(24,648),(23,637),(24,637),(23,654),(24,654),(23,649),(24,649),(23,600),(24,600),(23,598),(24,598),(20,675),(23,672),(24,672),(23,675),(24,675),(23,622),(24,622),(23,193),(24,193),(23,192),(24,192),(23,194),(24,194),(23,195),(24,195),(23,196),(24,196),(23,265),(24,265),(23,266),(24,266),(23,199),(24,199),(23,254),(24,254),(23,201),(24,201),(23,202),(24,202),(23,203),(24,203),(23,256),(24,256),(23,258),(24,258),(23,204),(24,204),(23,205),(24,205),(23,255),(24,255),(23,206),(24,206),(23,207),(24,207),(23,208),(24,208),(23,210),(24,210),(23,595),(24,595),(23,657),(24,657),(23,597),(24,597),(23,209),(24,209),(23,636),(24,636),(23,635),(24,635),(23,608),(24,608),(23,642),(24,642),(23,659),(24,659),(23,638),(24,638),(23,599),(24,599),(24,495),(24,506),(65,627),(68,258),(68,207),(68,209),(68,675),(68,210),(68,672),(68,206),(68,255),(68,208),(68,199),(68,254),(68,256),(68,205),(68,665),(68,630),(68,663),(68,667),(68,668),(68,664),(68,628),(68,660),(68,661),(68,662),(68,629),(68,631),(68,632),(68,656),(68,265),(68,602),(68,601),(68,650),(68,603),(68,604),(68,194),(68,597),(68,658),(68,646),(68,596),(68,595),(68,590),(68,594),(68,591),(68,593),(68,592),(68,193),(68,587),(68,586),(68,644),(68,588),(68,589),(68,192),(68,583),(68,657),(68,582),(68,584),(68,645),(68,585),(68,202),(68,616),(68,618),(68,614),(68,615),(68,617),(68,652),(68,266),(68,608),(68,605),(68,606),(68,651),(68,607),(68,204),(68,669),(68,625),(68,627),(68,624),(68,673),(68,671),(68,626),(68,655),(68,670),(68,201),(68,609),(68,611),(68,613),(68,612),(68,610),(68,653),(68,642),(68,640),(68,639),(68,641),(68,643),(68,196),(68,599),(68,600),(68,598),(68,649),(68,203),(68,623),(68,619),(68,620),(68,654),(68,621),(68,622),(68,638),(68,637),(68,648),(68,195),(68,633),(68,634),(68,647),(68,659),(68,636),(68,635),(68,81),(68,94),(68,104),(68,99),(68,100),(68,105),(68,102),(68,98),(68,97),(68,101),(68,103),(68,96),(68,79),(68,31),(68,32),(68,33),(68,88),(68,90),(68,93),(68,78),(68,92),(68,69),(68,72),(68,73),(68,76),(68,74),(68,75),(68,77),(68,71),(68,70),(68,89),(68,91),(68,68),(68,57),(68,417),(68,412),(68,389),(68,388),(68,296),(68,271),(68,301),(68,262),(68,300),(68,305),(68,263),(67,258),(67,207),(67,209),(67,675),(67,210),(67,672),(67,206),(67,255),(67,208),(67,199),(67,254),(67,256),(67,205),(67,665),(67,630),(67,663),(67,667),(67,668),(67,664),(67,628),(67,660),(67,661),(67,662),(67,629),(67,631),(67,632),(67,656),(67,265),(67,602),(67,601),(67,650),(67,603),(67,604),(67,194),(67,597),(67,658),(67,646),(67,596),(67,595),(67,590),(67,594),(67,591),(67,593),(67,592),(67,193),(67,587),(67,586),(67,644),(67,588),(67,589),(67,192),(67,583),(67,657),(67,582),(67,584),(67,645),(67,585),(67,202),(67,616),(67,618),(67,614),(67,615),(67,617),(67,652),(67,266),(67,608),(67,605),(67,606),(67,651),(67,607),(67,204),(67,669),(67,625),(67,627),(67,624),(67,673),(67,671),(67,626),(67,655),(67,670),(67,201),(67,609),(67,611),(67,613),(67,612),(67,610),(67,653),(67,642),(67,640),(67,639),(67,641),(67,643),(67,196),(67,599),(67,600),(67,598),(67,649),(67,203),(67,623),(67,619),(67,620),(67,654),(67,621),(67,622),(67,638),(67,637),(67,648),(67,195),(67,633),(67,634),(67,647),(67,659),(67,636),(67,635),(67,81),(67,94),(67,104),(67,99),(67,100),(67,105),(67,102),(67,98),(67,97),(67,101),(67,103),(67,96),(67,79),(67,31),(67,32),(67,33),(67,88),(67,90),(67,93),(67,78),(67,92),(67,69),(67,72),(67,73),(67,76),(67,74),(67,75),(67,77),(67,71),(67,70),(67,89),(67,91),(67,68),(67,57),(67,417),(67,412),(67,231),(67,532),(67,549),(67,548),(67,550),(67,547),(67,545),(67,546),(67,568),(67,567),(67,569),(67,565),(67,570),(67,574),(67,577),(67,572),(67,575),(67,576),(67,563),(67,573),(67,571),(67,564),(67,578),(67,566),(67,507),(67,492),(67,501),(67,502),(67,503),(67,490),(67,489),(67,491),(67,495),(67,496),(67,506),(67,500),(67,499),(67,498),(67,497),(67,461),(67,460),(67,462),(67,430),(67,431),(67,427),(67,426),(67,433),(67,424),(67,453),(67,452),(67,389),(67,388),(67,296),(67,271),(67,301),(67,262),(67,300),(67,305),(67,263),(20,932),(20,933),(20,942),(20,943),(20,944),(20,946),(20,947),(20,948),(20,949),(20,950),(20,847),(20,859),(20,908),(20,858),(20,850),(20,848),(20,851),(20,899),(20,900),(20,902),(20,903),(20,905),(20,901),(20,904),(20,891),(20,890),(20,886),(20,897),(20,898),(20,863),(20,862),(20,896),(20,887),(20,888),(20,893),(20,895),(20,807),(20,951),(20,809),(20,882),(20,801),(20,952),(20,805),(20,799),(20,800),(20,811),(20,810),(20,804),(20,803),(20,806),(20,802),(20,797),(20,921),(20,912),(20,922),(20,920),(20,930),(20,931),(20,923),(20,913),(20,812),(20,813),(20,814),(20,815),(20,816),(20,817),(20,818),(20,819),(20,820),(20,821),(65,954),(20,871),(20,883),(20,872),(20,873),(20,874),(20,875),(20,876),(20,877),(20,878),(20,879),(20,884),(20,880),(20,881),(20,885),(20,889),(20,892),(20,970),(20,971),(20,982),(20,983),(20,984),(20,985),(20,986),(20,987),(108,259),(65,259),(20,988),(20,989),(20,990),(20,991),(20,992),(20,993),(20,994),(108,999),(65,999),(108,997),(65,997),(108,995),(65,995),(108,998),(65,998),(108,1000),(65,1000),(108,1001),(65,1001),(108,1003),(65,1003),(108,1006),(65,1006),(108,1007),(65,1007),(108,1005),(65,1005),(108,1008),(65,1008),(108,1009),(65,1009),(108,1010),(65,1010),(108,1011),(65,1011),(108,1012),(65,1012),(108,1013),(65,1013),(108,1014),(65,1014),(108,1015),(65,1015),(108,1016),(65,1016),(108,1017),(65,1017),(108,1018),(65,1018),(108,1019),(65,1019),(108,1020),(65,1020),(108,1021),(65,1021),(108,1022),(65,1022),(108,1025),(65,1025),(108,1026),(65,1026),(108,1027),(65,1027),(108,1028),(65,1028),(108,1029),(65,1029),(108,1030),(65,1030),(108,1031),(65,1031),(108,1032),(65,1032),(108,1033),(65,1033),(108,1034),(65,1034),(108,1035),(65,1035),(108,1036),(65,1036),(108,1037),(65,1037),(108,1038),(65,1038),(108,1039),(65,1039),(108,1040),(65,1040),(108,1041),(65,1041),(108,1042),(65,1042),(108,1043),(65,1043),(108,1044),(65,1044),(108,1045),(65,1045),(108,1058),(65,1058),(108,1063),(65,1063),(108,1059),(65,1059),(108,1060),(65,1060),(108,1061),(65,1061),(108,1084),(65,1084),(108,1051),(65,1051),(108,1052),(65,1052),(108,1053),(65,1053),(108,1054),(65,1054),(108,1055),(65,1055),(108,1056),(65,1056),(108,1047),(65,1047),(108,1048),(65,1048),(108,1049),(65,1049),(65,812),(65,813),(65,814),(65,815),(65,816),(65,231),(65,817),(65,818),(65,819),(65,820),(65,821),(65,913),(65,921),(65,923),(65,930),(65,931),(108,1050),(65,1050),(108,1024),(65,1024),(65,920),(65,489),(108,801),(65,801),(65,891),(65,877),(108,1046),(65,1046),(65,431),(20,1118),(20,1119),(20,1120),(20,1121),(20,1122),(20,1123),(20,1124),(20,1125),(20,1126),(20,1129),(20,1130),(20,1131),(20,1132),(20,1133),(20,1134),(20,1135),(20,1136),(20,1137),(20,1138),(20,1139),(20,1140),(20,1141),(20,1142),(20,1143),(65,1143),(20,1154),(20,1155),(20,1156),(20,1157),(65,461),(20,1158),(20,1159),(20,1160),(20,1161),(20,1162),(20,1163),(20,1164),(20,1165),(20,1166),(20,1167),(65,932),(108,388),(65,388),(108,258),(65,258),(108,207),(65,207),(108,209),(65,209),(108,675),(65,675),(108,210),(65,210),(108,672),(65,672),(108,206),(65,206),(108,255),(65,255),(108,204),(65,204),(108,669),(65,669),(108,625),(65,625),(108,624),(65,624),(108,673),(65,673),(108,671),(65,671),(108,208),(65,208),(108,626),(65,626),(108,655),(65,655),(108,670),(65,670),(65,1124),(108,199),(65,199),(108,254),(65,254),(108,256),(65,256),(108,205),(65,205),(108,665),(108,630),(108,663),(65,667),(108,668),(65,668),(108,664),(65,664),(65,628),(65,660),(108,661),(108,662),(108,629),(65,629),(108,631),(65,631),(108,632),(65,632),(108,656),(65,656),(108,265),(65,265),(108,602),(65,602),(108,601),(65,601),(108,650),(65,650),(108,603),(65,603),(108,604),(65,604),(108,194),(65,194),(108,597),(65,597),(108,658),(65,658),(108,646),(65,646),(108,596),(65,596),(108,595),(65,595),(108,590),(65,590),(108,594),(65,594),(108,591),(65,591),(108,593),(65,593),(108,592),(65,592),(108,193),(65,193),(108,587),(65,587),(108,586),(65,586),(108,644),(65,644),(108,588),(65,588),(108,589),(65,589),(108,192),(65,192),(108,583),(65,583),(108,657),(65,657),(108,582),(65,582),(108,584),(65,584),(108,645),(65,645),(108,585),(65,585),(108,202),(65,202),(108,616),(65,616),(108,618),(65,618),(108,614),(65,614),(108,615),(65,615),(108,617),(65,617),(108,652),(65,652),(108,266),(65,266),(108,608),(65,608),(108,605),(65,605),(108,606),(65,606),(108,651),(65,651),(108,607),(65,607),(108,201),(65,201),(108,609),(65,609),(108,611),(65,611),(108,613),(65,613),(108,612),(65,612),(108,610),(65,610),(108,653),(65,653),(108,642),(65,642),(108,640),(65,640),(108,641),(65,641),(108,643),(65,643),(108,196),(65,196),(108,599),(65,599),(108,600),(65,600),(108,598),(65,598),(108,649),(65,649),(108,203),(65,203),(108,623),(65,623),(108,619),(65,619),(108,620),(65,620),(108,654),(65,654),(108,621),(65,621),(108,622),(65,622),(108,638),(65,638),(108,637),(65,637),(108,648),(65,648),(108,195),(65,195),(108,633),(65,633),(108,634),(65,634),(108,659),(65,659),(108,636),(65,636),(108,635),(65,635),(108,81),(65,81),(108,94),(65,94),(108,104),(65,104),(108,99),(65,99),(108,100),(65,100),(108,105),(65,105),(108,102),(65,102),(108,98),(65,98),(108,97),(65,97),(108,101),(65,101),(108,103),(65,103),(108,96),(65,96),(108,79),(65,79),(108,31),(65,31),(108,32),(65,32),(108,33),(65,33),(108,88),(65,88),(108,91),(65,91),(108,1062),(65,1062),(108,90),(65,90),(108,93),(65,93),(108,78),(65,78),(108,92),(65,92),(108,69),(65,69),(108,72),(65,72),(108,73),(65,73),(108,76),(65,76),(108,74),(65,74),(108,75),(65,75),(108,77),(65,77),(108,71),(65,71),(108,70),(65,70),(108,89),(65,89),(108,68),(65,68),(108,57),(65,57),(108,797),(65,797),(108,417),(65,417),(108,412),(65,412),(108,799),(65,799),(108,800),(65,800),(108,947),(65,947),(108,802),(65,802),(108,803),(65,803),(108,804),(65,804),(108,952),(65,952),(108,806),(65,806),(108,807),(65,807),(108,946),(65,946),(108,809),(65,809),(108,810),(65,810),(108,811),(65,811),(65,986),(65,989),(65,987),(65,988),(65,992),(65,993),(65,994),(65,991),(65,990),(108,982),(65,982),(108,389),(65,389),(108,984),(65,984),(108,985),(65,985),(108,296),(65,296),(108,271),(65,271),(108,301),(65,301),(108,262),(65,262),(108,300),(65,300),(108,305),(65,305),(108,983),(65,983),(108,263),(65,263),(69,258),(69,209),(69,210),(69,255),(69,208),(69,199),(69,254),(69,256),(69,265),(69,602),(69,601),(69,603),(69,194),(69,596),(69,590),(69,594),(69,591),(69,593),(69,592),(69,193),(69,587),(69,586),(69,588),(69,192),(69,583),(69,582),(69,584),(69,585),(69,640),(69,639),(69,196),(69,599),(69,600),(69,598),(69,637),(69,633),(69,634),(69,94),(69,79),(69,31),(69,32),(69,33),(69,93),(69,78),(69,92),(69,69),(69,72),(69,73),(69,76),(69,74),(69,75),(69,70),(69,89),(69,57),(69,417),(69,412),(69,231),(69,818),(69,820),(69,532),(69,549),(69,548),(69,550),(69,547),(69,545),(69,546),(69,389),(69,296),(69,271),(69,262),(69,263),(70,209),(70,210),(70,255),(70,208),(70,199),(70,254),(70,265),(70,602),(70,601),(70,650),(70,603),(70,194),(70,646),(70,596),(70,595),(70,590),(70,594),(70,591),(70,593),(70,592),(70,193),(70,587),(70,586),(70,644),(70,588),(70,192),(70,583),(70,582),(70,584),(70,645),(70,585),(70,640),(70,639),(70,641),(70,643),(70,196),(70,599),(70,600),(70,598),(70,649),(70,637),(70,648),(70,195),(70,633),(70,647),(70,79),(70,31),(70,32),(70,33),(70,90),(70,93),(70,78),(70,69),(70,72),(70,73),(70,76),(70,74),(70,75),(70,89),(70,417),(70,412),(70,532),(70,549),(70,548),(70,550),(70,547),(70,545),(70,546),(70,389),(70,388),(70,296),(70,271),(70,301),(70,262),(70,263),(65,492),(65,501),(65,490),(65,491),(65,452),(65,453),(65,890),(65,886),(65,495),(65,496),(65,506),(65,897),(65,898),(65,460),(65,500),(65,499),(65,462),(65,498),(65,497),(65,847),(65,848),(20,849),(65,849),(65,850),(65,502),(65,503),(65,851),(20,852),(65,852),(20,853),(65,853),(20,854),(65,854),(20,855),(65,855),(20,856),(65,856),(20,857),(65,857),(65,858),(65,859),(20,860),(65,860),(65,427),(65,871),(65,433),(65,430),(65,872),(65,424),(65,1157),(65,426),(65,908),(65,905),(65,904),(65,903),(65,902),(65,901),(65,900),(65,899),(65,948),(65,896),(65,949),(65,951),(65,873),(65,874),(65,1132),(65,875),(65,1120),(65,1126),(65,1131),(65,1125),(65,878),(65,1129),(65,879),(65,1130),(65,1121),(65,880),(65,1133),(65,1122),(65,881),(65,1119),(65,1118),(65,1134),(65,895),(65,1135),(65,1136),(65,893),(65,1138),(65,892),(65,1139),(65,1140),(65,942),(65,1141),(65,1142),(65,1154),(65,1155),(65,1156),(65,889),(65,1166),(65,1167),(65,1158),(65,1159),(65,882),(65,1160),(65,883),(65,1161),(65,1162),(65,884),(65,1163),(65,1164),(65,1165),(65,933),(65,862),(65,863),(65,887),(65,888),(108,1097),(108,1081),(65,1137),(108,190),(65,190),(108,191),(65,191),(108,188),(65,188),(108,306),(65,306),(108,274),(65,274),(108,270),(65,270),(65,370),(65,336),(108,383),(65,383),(65,1145),(65,1148),(65,1149),(65,1147),(65,1150),(65,1151),(65,1152),(65,1153),(65,1144),(108,1080),(108,1082),(108,1083),(108,1074),(108,1076),(108,1078),(108,1075),(108,1073),(108,1077),(108,1079),(108,1072),(108,1071),(108,1070),(108,1067),(108,1069),(108,1068),(108,1064),(65,1146),(108,1090),(108,1098),(108,1099),(65,876),(108,187),(65,186),(108,185),(65,184),(108,351),(65,351),(108,312),(65,312),(108,333),(65,333),(108,363),(65,363),(108,386),(65,386),(108,368),(65,368),(108,372),(65,372),(108,379),(65,379),(108,378),(65,378),(108,382),(65,382),(108,381),(65,381),(65,922),(108,1057),(65,1057),(65,1123),(108,647),(65,647),(65,912),(108,805),(65,805),(65,944),(65,943),(108,1086),(108,1085),(108,1087),(108,1088),(108,1089),(108,1091),(108,1092),(108,1093),(108,1094),(108,1095),(108,1096),(65,507),(65,568),(65,567),(65,569),(65,970),(65,971),(65,565),(65,570),(65,574),(65,577),(65,572),(65,575),(65,576),(65,563),(65,573),(65,571),(65,564),(65,578),(65,566),(108,369),(65,369),(108,371),(65,371),(108,374),(65,374),(108,373),(65,373),(108,376),(65,376),(108,377),(65,377),(108,380),(65,380),(108,384),(65,384),(108,385),(65,385),(108,387),(65,387),(108,352),(65,352),(108,364),(65,364),(108,332),(65,332),(108,532),(65,532),(108,549),(65,549),(108,548),(65,548),(108,550),(65,550),(108,547),(65,547),(108,545),(65,545),(108,546),(65,546),(108,1105),(108,1104),(108,1106),(108,1107),(108,1108),(108,1109),(108,1110),(108,1111),(108,1112),(108,1113),(108,1114),(108,1116),(108,1115),(108,1103),(108,1102),(108,1101),(65,885),(65,950),(183,351),(183,333),(183,312),(183,363),(183,386),(183,368),(183,372),(183,379),(183,378),(183,382),(183,381),(183,369),(183,375),(183,371),(183,374),(183,373),(183,376),(183,377),(183,380),(183,384),(183,385),(183,387),(183,352),(183,364),(183,332),(184,258),(184,207),(184,209),(184,675),(184,210),(184,672),(184,206),(184,255),(184,208),(184,199),(184,254),(184,256),(184,205),(184,665),(184,630),(184,663),(184,667),(184,668),(184,664),(184,628),(184,660),(184,661),(184,662),(184,629),(184,631),(184,632),(184,656),(184,265),(184,602),(184,601),(184,650),(184,603),(184,604),(184,194),(184,597),(184,658),(184,646),(184,596),(184,595),(184,590),(184,594),(184,591),(184,593),(184,592),(184,193),(184,587),(184,586),(184,644),(184,588),(184,589),(184,192),(184,583),(184,657),(184,582),(184,584),(184,645),(184,585),(184,202),(184,616),(184,618),(184,614),(184,615),(184,617),(184,652),(184,266),(184,608),(184,605),(184,606),(184,651),(184,607),(184,204),(184,669),(184,625),(184,627),(184,624),(184,673),(184,671),(184,626),(184,655),(184,670),(184,201),(184,609),(184,611),(184,613),(184,612),(184,610),(184,653),(184,642),(184,640),(184,639),(184,641),(184,643),(184,196),(184,599),(184,600),(184,598),(184,649),(184,203),(184,623),(184,619),(184,620),(184,654),(184,621),(184,622),(184,638),(184,637),(184,648),(184,195),(184,633),(184,634),(184,647),(184,659),(184,636),(184,635),(185,1086),(185,1087),(185,1088),(185,1089),(185,1090),(185,1091),(185,1092),(185,1093),(185,1094),(185,1095),(185,1096),(185,1085),(185,1097),(185,1098),(185,1099),(185,1081),(185,1080),(185,1082),(185,1083),(185,1148),(185,1149),(185,1147),(185,1150),(185,1151),(185,1152),(185,1146),(185,1153),(185,1145),(185,1144),(185,1074),(185,1076),(185,1078),(185,1075),(185,1073),(185,1077),(185,1079),(185,1072),(185,1071),(185,1070),(185,1067),(185,1069),(185,1068),(185,1064),(186,289),(186,777),(186,298),(186,954),(185,995),(185,997),(185,998),(185,999),(185,1000),(185,1001),(185,1003),(185,1005),(185,1006),(185,1007),(185,1008),(185,1009),(185,1010),(185,1011),(185,1012),(185,1013),(185,1014),(185,1015),(185,1016),(185,1017),(185,1018),(185,1019),(185,1020),(185,1021),(185,1022),(185,1084),(185,1024),(185,1025),(185,1026),(185,1027),(185,1028),(185,1029),(185,1030),(185,1031),(185,1032),(185,1033),(185,1034),(185,1035),(185,1036),(185,1037),(185,1038),(185,1039),(185,1040),(185,1041),(185,1042),(185,1043),(185,1044),(185,1045),(185,1046),(185,1047),(185,1048),(185,1049),(185,1050),(185,1051),(185,1052),(185,1053),(185,1054),(185,1055),(185,1056),(185,1057),(185,1059),(185,1060),(185,1058),(185,1061),(185,1062),(185,1063),(185,1104),(185,1105),(185,1106),(185,1107),(185,1108),(185,1109),(185,1110),(185,1111),(185,1112),(185,1113),(185,1114),(185,1115),(185,1116),(185,1103),(185,1102),(185,1101),(187,259),(187,190),(187,191),(187,188),(188,81),(188,94),(188,104),(188,99),(188,100),(188,105),(188,102),(188,98),(188,97),(188,101),(188,103),(188,96),(188,79),(188,31),(188,32),(188,33),(188,88),(188,90),(188,93),(188,78),(188,92),(188,69),(188,72),(188,73),(188,76),(188,74),(188,75),(188,77),(188,71),(188,70),(188,89),(188,91),(188,68),(188,57),(188,797),(188,417),(188,412),(188,799),(188,800),(188,801),(188,947),(188,802),(188,803),(188,804),(188,952),(188,805),(188,806),(188,807),(188,946),(188,809),(188,810),(188,811),(187,306),(187,274),(189,812),(189,813),(189,814),(189,815),(189,816),(189,231),(189,817),(189,818),(189,819),(189,820),(189,821),(187,270),(187,370),(187,336),(187,187),(187,186),(190,532),(190,549),(190,548),(190,550),(190,547),(190,545),(190,546),(191,986),(191,987),(191,988),(191,989),(191,992),(191,993),(191,994),(191,991),(191,990),(192,568),(192,567),(192,569),(192,565),(192,570),(192,574),(192,577),(192,572),(192,575),(192,970),(192,576),(192,971),(192,563),(192,573),(192,571),(192,564),(192,578),(192,566),(192,507),(192,492),(192,501),(192,490),(192,489),(192,491),(192,495),(192,496),(192,506),(192,500),(192,499),(192,498),(192,497),(192,847),(192,848),(192,849),(192,850),(192,502),(192,503),(192,851),(192,852),(192,853),(192,854),(192,855),(192,856),(192,857),(192,858),(192,859),(192,860),(192,1143),(192,862),(192,863),(192,461),(192,890),(192,891),(192,886),(192,897),(192,898),(192,460),(192,462),(192,430),(192,431),(192,427),(192,871),(192,872),(192,944),(192,949),(192,873),(192,874),(192,875),(192,876),(192,877),(192,878),(192,879),(192,880),(192,881),(192,882),(192,883),(192,884),(192,885),(192,933),(192,887),(192,888),(192,950),(192,889),(192,943),(192,942),(192,892),(192,893),(192,895),(192,951),(192,932),(192,896),(192,948),(192,899),(192,900),(192,901),(192,902),(192,903),(192,904),(192,905),(192,908),(192,426),(192,433),(192,424),(192,453),(192,452),(189,912),(189,913),(189,920),(189,921),(189,922),(189,923),(189,930),(189,931),(192,1132),(192,1120),(192,1126),(192,1131),(192,1125),(192,1129),(192,1130),(192,1121),(192,1133),(192,1122),(192,1124),(192,1119),(192,1123),(192,1118),(192,1134),(192,1135),(192,1136),(192,1137),(192,1138),(192,1139),(192,1140),(192,1141),(192,1142),(192,1154),(192,1155),(192,1156),(192,1157),(192,1166),(192,1167),(192,1158),(192,1159),(192,1160),(192,1161),(192,1162),(192,1163),(192,1164),(192,1165),(193,982),(193,389),(193,984),(193,985),(193,388),(193,296),(193,271),(193,301),(193,262),(193,300),(193,305),(193,983),(193,263),(194,396),(187,185),(187,184),(187,383);
/*!40000 ALTER TABLE `script_group_script` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script_rdkversions`
--

DROP TABLE IF EXISTS `script_rdkversions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script_rdkversions` (
  `script_rdk_versions_id` bigint(20) DEFAULT NULL,
  `rdkversions_id` bigint(20) DEFAULT NULL,
  KEY `FKC95104A078CFB00` (`script_rdk_versions_id`),
  KEY `FKC95104A0D247002A` (`rdkversions_id`),
  CONSTRAINT `FKC95104A0D247002A` FOREIGN KEY (`rdkversions_id`) REFERENCES `rdkversions` (`id`),
  CONSTRAINT `FKC95104A078CFB00` FOREIGN KEY (`script_rdk_versions_id`) REFERENCES `script` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script_rdkversions`
--

LOCK TABLES `script_rdkversions` WRITE;
/*!40000 ALTER TABLE `script_rdkversions` DISABLE KEYS */;
INSERT INTO `script_rdkversions` VALUES (259,2),(259,3),(999,3),(997,3),(995,3),(998,3),(1000,3),(1001,3),(1003,3),(1006,3),(1007,3),(1005,3),(1008,3),(1009,3),(1010,3),(1011,3),(1012,3),(1013,3),(1014,3),(1015,3),(1016,3),(1017,3),(1018,3),(1019,3),(1020,3),(1021,3),(1022,3),(1025,3),(1026,3),(1027,3),(1028,3),(1029,3),(1030,3),(1031,3),(1032,3),(1033,3),(1034,3),(1035,3),(1036,3),(1037,3),(1038,3),(1039,3),(1040,3),(1041,3),(1042,3),(1043,3),(1044,3),(1045,3),(1058,3),(1063,3),(1059,3),(1060,3),(1061,3),(1084,3),(1051,3),(1052,3),(1053,3),(1054,3),(1055,3),(1056,3),(1047,3),(1048,3),(1049,3),(812,1),(812,2),(813,1),(813,2),(814,1),(814,2),(815,1),(815,2),(816,1),(816,2),(231,1),(231,2),(817,1),(817,2),(818,1),(818,2),(819,1),(819,2),(820,1),(820,2),(821,1),(821,2),(913,3),(921,3),(923,3),(930,3),(931,3),(1050,3),(1024,3),(920,3),(489,3),(801,2),(801,3),(891,3),(877,3),(1046,3),(431,3),(1143,3),(461,3),(932,3),(388,2),(388,3),(258,2),(258,3),(207,2),(207,3),(209,2),(209,3),(675,2),(675,3),(210,2),(210,3),(672,2),(672,3),(206,2),(206,3),(255,2),(255,3),(204,2),(204,3),(669,2),(669,3),(625,2),(625,3),(624,2),(624,3),(673,2),(673,3),(671,2),(671,3),(208,2),(208,3),(626,2),(626,3),(655,2),(655,3),(670,2),(670,3),(1124,3),(199,2),(199,3),(254,2),(254,3),(256,2),(256,3),(205,2),(205,3),(665,2),(665,3),(630,2),(630,3),(663,2),(663,3),(667,2),(667,3),(668,2),(668,3),(664,2),(664,3),(628,2),(628,3),(660,2),(660,3),(661,2),(661,3),(662,2),(662,3),(629,2),(629,3),(631,2),(631,3),(632,2),(632,3),(656,2),(656,3),(265,2),(265,3),(602,2),(602,3),(601,2),(601,3),(650,2),(650,3),(603,2),(603,3),(604,2),(604,3),(194,2),(194,3),(597,2),(597,3),(658,2),(658,3),(646,2),(646,3),(596,2),(596,3),(595,2),(595,3),(590,2),(590,3),(594,2),(594,3),(591,2),(591,3),(593,2),(593,3),(592,2),(592,3),(193,2),(193,3),(587,2),(587,3),(586,2),(586,3),(644,2),(644,3),(588,2),(588,3),(589,2),(589,3),(192,2),(192,3),(583,2),(583,3),(657,2),(657,3),(582,2),(582,3),(584,2),(584,3),(645,2),(645,3),(585,2),(585,3),(202,2),(202,3),(616,2),(616,3),(618,2),(618,3),(614,2),(614,3),(615,2),(615,3),(617,2),(617,3),(652,2),(652,3),(266,2),(266,3),(608,2),(608,3),(605,2),(605,3),(606,2),(606,3),(651,2),(651,3),(607,2),(607,3),(201,2),(201,3),(609,2),(609,3),(611,2),(611,3),(613,2),(613,3),(612,2),(612,3),(610,2),(610,3),(653,2),(653,3),(642,2),(642,3),(640,2),(640,3),(641,2),(641,3),(643,2),(643,3),(196,2),(196,3),(599,2),(599,3),(600,2),(600,3),(598,2),(598,3),(649,2),(649,3),(203,2),(203,3),(623,2),(623,3),(619,2),(619,3),(620,2),(620,3),(654,2),(654,3),(621,2),(621,3),(622,2),(622,3),(638,2),(638,3),(637,2),(637,3),(648,2),(648,3),(195,2),(195,3),(633,2),(633,3),(634,2),(634,3),(659,2),(659,3),(636,2),(636,3),(635,2),(635,3),(81,2),(81,3),(94,2),(94,3),(104,2),(104,3),(99,2),(99,3),(100,2),(100,3),(105,2),(105,3),(102,2),(102,3),(98,2),(98,3),(97,2),(97,3),(101,2),(101,3),(103,2),(103,3),(96,2),(96,3),(79,2),(79,3),(31,2),(31,3),(32,2),(32,3),(33,2),(33,3),(88,2),(88,3),(91,2),(91,3),(1062,3),(90,2),(90,3),(93,2),(93,3),(78,2),(78,3),(92,2),(92,3),(69,2),(69,3),(72,2),(72,3),(73,2),(73,3),(76,2),(76,3),(74,2),(74,3),(75,2),(75,3),(77,2),(77,3),(71,2),(71,3),(70,2),(70,3),(89,2),(89,3),(68,2),(68,3),(57,2),(57,3),(797,2),(797,3),(417,2),(417,3),(412,2),(412,3),(799,2),(799,3),(800,2),(800,3),(947,2),(947,3),(802,2),(802,3),(803,2),(803,3),(804,2),(804,3),(952,2),(952,3),(806,2),(806,3),(807,2),(807,3),(946,2),(946,3),(809,2),(809,3),(810,2),(810,3),(811,2),(811,3),(986,3),(989,3),(987,3),(988,3),(992,3),(993,3),(994,3),(991,3),(990,3),(982,2),(982,3),(389,2),(389,3),(984,2),(984,3),(985,2),(985,3),(296,2),(296,3),(271,2),(271,3),(301,2),(301,3),(262,2),(262,3),(300,2),(300,3),(305,2),(305,3),(983,2),(983,3),(263,2),(263,3),(492,3),(501,3),(490,3),(491,3),(452,3),(453,3),(890,3),(886,3),(495,3),(496,3),(506,3),(897,3),(898,3),(460,3),(500,3),(499,3),(462,3),(498,3),(497,3),(847,3),(848,3),(849,3),(850,3),(502,3),(503,3),(851,3),(852,3),(853,3),(854,3),(855,3),(856,3),(857,3),(858,3),(859,3),(860,3),(427,3),(871,3),(433,3),(430,3),(872,3),(424,3),(1157,3),(426,3),(908,3),(905,3),(904,3),(903,3),(902,3),(901,3),(900,3),(899,3),(948,3),(896,3),(949,3),(951,3),(873,3),(874,3),(1132,3),(875,3),(1120,3),(1126,3),(1131,3),(1125,3),(878,3),(1129,3),(879,3),(1130,3),(1121,3),(880,3),(1133,3),(1122,3),(881,3),(1119,3),(1118,3),(1134,3),(895,3),(1135,3),(1136,3),(893,3),(1138,3),(892,3),(1139,3),(1140,3),(942,3),(1141,3),(1142,3),(1154,3),(1155,3),(1156,3),(889,3),(1166,3),(1167,3),(1158,3),(1159,3),(882,3),(1160,3),(883,3),(1161,3),(1162,3),(884,3),(1163,3),(1164,3),(1165,3),(933,3),(862,3),(863,3),(887,3),(888,3),(1097,1),(1097,2),(1097,3),(1081,1),(1081,2),(1081,3),(1137,3),(190,2),(190,3),(191,2),(191,3),(188,2),(188,3),(306,2),(306,3),(274,2),(274,3),(270,2),(270,3),(370,2),(370,3),(336,2),(336,3),(383,2),(383,3),(1145,2),(1145,3),(1148,2),(1148,3),(1149,2),(1149,3),(1147,2),(1147,3),(1150,2),(1150,3),(1151,2),(1151,3),(1152,2),(1152,3),(1153,2),(1153,3),(1144,2),(1144,3),(1080,1),(1080,2),(1080,3),(1082,1),(1082,2),(1082,3),(1083,1),(1083,2),(1083,3),(1074,1),(1074,2),(1074,3),(1076,1),(1076,2),(1076,3),(1078,1),(1078,2),(1078,3),(1075,1),(1075,2),(1075,3),(1073,1),(1073,2),(1073,3),(1077,1),(1077,2),(1077,3),(1079,1),(1079,2),(1079,3),(1072,1),(1072,2),(1072,3),(1071,1),(1071,2),(1071,3),(1070,1),(1070,2),(1070,3),(1067,1),(1067,2),(1067,3),(1069,1),(1069,2),(1069,3),(1068,1),(1068,2),(1068,3),(1064,1),(1064,2),(1064,3),(1146,2),(1146,3),(1090,1),(1090,2),(1090,3),(1098,1),(1098,2),(1098,3),(1099,1),(1099,2),(1099,3),(876,3),(187,1),(186,1),(185,1),(184,1),(351,2),(351,3),(312,1),(312,2),(312,3),(333,1),(333,2),(333,3),(363,1),(363,2),(363,3),(386,1),(386,2),(386,3),(368,1),(368,2),(368,3),(372,1),(372,2),(372,3),(379,1),(379,2),(379,3),(378,1),(378,2),(378,3),(382,1),(382,2),(382,3),(381,1),(381,2),(381,3),(922,3),(1057,3),(1123,3),(647,2),(647,3),(912,3),(805,2),(805,3),(944,3),(943,3),(1086,1),(1086,2),(1086,3),(1085,1),(1085,2),(1085,3),(1087,1),(1087,2),(1087,3),(1088,1),(1088,2),(1088,3),(1089,1),(1089,2),(1089,3),(1091,1),(1091,2),(1091,3),(1092,1),(1092,2),(1092,3),(1093,1),(1093,2),(1093,3),(1094,1),(1094,2),(1094,3),(1095,1),(1095,2),(1095,3),(1096,1),(1096,2),(1096,3),(507,3),(568,3),(567,3),(569,3),(970,3),(971,3),(565,3),(570,3),(574,3),(577,3),(572,3),(575,3),(576,3),(563,3),(573,3),(571,3),(564,3),(578,3),(566,3),(369,1),(369,2),(369,3),(371,1),(371,2),(371,3),(374,1),(374,2),(374,3),(373,1),(373,2),(373,3),(376,1),(376,2),(376,3),(377,1),(377,2),(377,3),(380,1),(380,2),(380,3),(384,1),(384,2),(384,3),(385,1),(385,2),(385,3),(387,1),(387,2),(387,3),(352,1),(352,2),(352,3),(364,1),(364,2),(364,3),(332,1),(332,2),(332,3),(532,2),(532,3),(549,2),(549,3),(548,2),(548,3),(550,2),(550,3),(547,2),(547,3),(545,2),(545,3),(546,2),(546,3),(1105,3),(1104,3),(1106,3),(1107,3),(1108,3),(1109,3),(1110,3),(1111,3),(1112,2),(1112,3),(1113,3),(1114,3),(1116,2),(1116,3),(1115,2),(1115,3),(1103,3),(1102,3),(1101,3),(885,3),(950,3);
/*!40000 ALTER TABLE `script_rdkversions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `socvendor`
--

DROP TABLE IF EXISTS `socvendor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `socvendor` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `FKE987E18F984B586A` (`groups_id`),
  CONSTRAINT `FKE987E18F984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `socvendor`
--

LOCK TABLES `socvendor` WRITE;
/*!40000 ALTER TABLE `socvendor` DISABLE KEYS */;
INSERT INTO `socvendor` VALUES (1,0,'Parker',NULL),(2,0,'Px001bn',NULL),(3,0,'Rng150',NULL),(4,0,'Intel',NULL),(5,0,'Broadcom – MIPS',NULL),(6,0,'Broadcom - ARM',NULL);
/*!40000 ALTER TABLE `socvendor` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `streaming_details`
--

DROP TABLE IF EXISTS `streaming_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `streaming_details` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `audio_format` varchar(255) NOT NULL,
  `channel_type` varchar(255) NOT NULL,
  `stream_id` varchar(64) NOT NULL,
  `video_format` varchar(255) NOT NULL,
  `gateway_ip` varchar(255) DEFAULT NULL,
  `ocap_id` varchar(255) DEFAULT NULL,
  `recorder_id` varchar(255) DEFAULT NULL,
  `groups_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `stream_id` (`stream_id`),
  KEY `FKD3332F65984B586A` (`groups_id`),
  CONSTRAINT `FKD3332F65984B586A` FOREIGN KEY (`groups_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `streaming_details`
--

LOCK TABLES `streaming_details` WRITE;
/*!40000 ALTER TABLE `streaming_details` DISABLE KEYS */;
INSERT INTO `streaming_details` VALUES (4,14,'ac3','SD','01','mpeg2',NULL,NULL,NULL,NULL),(5,3,'ac3','HD','02','mpeg4',NULL,NULL,NULL,NULL),(6,4,'aac','SD','03','mpeg2',NULL,NULL,NULL,NULL),(7,4,'aac','HD','04','mpeg4',NULL,NULL,NULL,NULL),(8,1,'mp3','HD','05','mpeg2',NULL,NULL,NULL,NULL),(9,1,'mp3','HD','06','mpeg4',NULL,NULL,NULL,NULL),(10,1,'wav','HD','07','mpeg2',NULL,NULL,NULL,NULL),(11,1,'wav','HD','08','mpeg4',NULL,NULL,NULL,NULL),(12,1,'ac3','HD','09','h264',NULL,NULL,NULL,NULL),(13,1,'aac','HD','10','h264',NULL,NULL,NULL,NULL),(14,1,'mp3','HD','11','h264',NULL,NULL,NULL,NULL),(15,2,'wav','HD','12','h264',NULL,NULL,NULL,NULL);
/*!40000 ALTER TABLE `streaming_details` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `third_party_execution_details`
--

DROP TABLE IF EXISTS `third_party_execution_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `third_party_execution_details` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `box_type` varchar(255) DEFAULT NULL,
  `callback_url` varchar(255) DEFAULT NULL,
  `exec_name` varchar(255) DEFAULT NULL,
  `execution_id` bigint(20) DEFAULT NULL,
  `execution_start_time` bigint(20) NOT NULL,
  `file_path` varchar(255) DEFAULT NULL,
  `image_name` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKA7A4E82A8358C58A` (`execution_id`),
  CONSTRAINT `FKA7A4E82A8358C58A` FOREIGN KEY (`execution_id`) REFERENCES `execution` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `email` varchar(255) NOT NULL,
  `group_name_id` bigint(20) DEFAULT NULL,
  `name` varchar(255) NOT NULL,
  `password_hash` varchar(255) DEFAULT NULL,
  `status` varchar(255) DEFAULT NULL,
  `username` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`),
  KEY `FK36EBCB5A529693` (`group_name_id`),
  CONSTRAINT `FK36EBCB5A529693` FOREIGN KEY (`group_name_id`) REFERENCES `groups` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,1,'sreejasuma@tataelxsi.co.in',NULL,'ADMINISTRATOR','5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8',NULL,'admin');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_group`
--

DROP TABLE IF EXISTS `user_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_group` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `group_manager_id` bigint(20) NOT NULL,
  `group_name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK72A9010B3C9C6FA8` (`group_manager_id`),
  CONSTRAINT `FK72A9010B3C9C6FA8` FOREIGN KEY (`group_manager_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_group`
--

LOCK TABLES `user_group` WRITE;
/*!40000 ALTER TABLE `user_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_group_user`
--

DROP TABLE IF EXISTS `user_group_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_group_user` (
  `user_group_users_id` bigint(20) DEFAULT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  KEY `FK9C06927F5976FFAA` (`user_group_users_id`),
  KEY `FK9C06927F4A160D0A` (`user_id`),
  CONSTRAINT `FK9C06927F4A160D0A` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`),
  CONSTRAINT `FK9C06927F5976FFAA` FOREIGN KEY (`user_group_users_id`) REFERENCES `user_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_group_user`
--

LOCK TABLES `user_group_user` WRITE;
/*!40000 ALTER TABLE `user_group_user` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_group_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_permissions`
--

DROP TABLE IF EXISTS `user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_permissions` (
  `user_id` bigint(20) DEFAULT NULL,
  `permissions_string` varchar(255) DEFAULT NULL,
  KEY `FKE693E6104A160D0A` (`user_id`),
  CONSTRAINT `FKE693E6104A160D0A` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_permissions`
--

LOCK TABLES `user_permissions` WRITE;
/*!40000 ALTER TABLE `user_permissions` DISABLE KEYS */;
INSERT INTO `user_permissions` VALUES (1,'*:*');
/*!40000 ALTER TABLE `user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_roles`
--

DROP TABLE IF EXISTS `user_roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_roles` (
  `user_id` bigint(20) NOT NULL,
  `role_id` bigint(20) NOT NULL,
  PRIMARY KEY (`user_id`,`role_id`),
  KEY `FK73429949A4EB492A` (`role_id`),
  KEY `FK734299494A160D0A` (`user_id`),
  CONSTRAINT `FK734299494A160D0A` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`),
  CONSTRAINT `FK73429949A4EB492A` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_roles`
--

LOCK TABLES `user_roles` WRITE;
/*!40000 ALTER TABLE `user_roles` DISABLE KEYS */;
INSERT INTO `user_roles` VALUES (1,1);
/*!40000 ALTER TABLE `user_roles` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2014-06-04 16:21:04
