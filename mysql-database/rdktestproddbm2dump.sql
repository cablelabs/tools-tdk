-- MySQL dump 10.13  Distrib 5.1.54, for pc-linux-gnu (i686)
--
-- Host: localhost    Database: rdktesttoolm1proddb
-- ------------------------------------------------------
-- Server version	5.1.54-community

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `box_manufacturer`
--

DROP TABLE IF EXISTS `box_manufacturer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box_manufacturer` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box_manufacturer`
--

LOCK TABLES `box_manufacturer` WRITE;
/*!40000 ALTER TABLE `box_manufacturer` DISABLE KEYS */;
INSERT INTO `box_manufacturer` VALUES (1,0,'Arris'),(2,0,'Broadcom'),(3,0,'Cisco'),(4,0,'Entropic'),(5,0,'Humax'),(6,0,'Intel'),(7,0,'Motorola'),(8,0,'Pace'),(9,0,'Samsung'),(10,0,'Technicolor');
/*!40000 ALTER TABLE `box_manufacturer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `box_model`
--

DROP TABLE IF EXISTS `box_model`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box_model` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box_model`
--

LOCK TABLES `box_model` WRITE;
/*!40000 ALTER TABLE `box_model` DISABLE KEYS */;
/*!40000 ALTER TABLE `box_model` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `box_type`
--

DROP TABLE IF EXISTS `box_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `box_type` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `box_type`
--

LOCK TABLES `box_type` WRITE;
/*!40000 ALTER TABLE `box_type` DISABLE KEYS */;
INSERT INTO `box_type` VALUES (1,0,'Xi3'),(2,0,'XG1'),(3,0,'XG5');
/*!40000 ALTER TABLE `box_type` ENABLE KEYS */;
UNLOCK TABLES;



--
-- Table structure for table `device`
--

DROP TABLE IF EXISTS `device`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `box_manufacturer_id` bigint(20) NOT NULL,
  `box_type_id` bigint(20) NOT NULL,
  `device_status` varchar(255) NOT NULL,
  `socvendor_id` bigint(20) NOT NULL,
  `stb_ip` varchar(255) NOT NULL,
  `stb_name` varchar(255) NOT NULL,
  `stb_port` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `stb_ip` (`stb_ip`),
  UNIQUE KEY `stb_name` (`stb_name`),
  KEY `FKB06B1E56D70E4BBC` (`box_manufacturer_id`),
  KEY `FKB06B1E5641CE91C` (`box_type_id`),
  KEY `FKB06B1E565DC65445` (`socvendor_id`),
  CONSTRAINT `FKB06B1E565DC65445` FOREIGN KEY (`socvendor_id`) REFERENCES `socvendor` (`id`),
  CONSTRAINT `FKB06B1E5641CE91C` FOREIGN KEY (`box_type_id`) REFERENCES `box_type` (`id`),
  CONSTRAINT `FKB06B1E56D70E4BBC` FOREIGN KEY (`box_manufacturer_id`) REFERENCES `box_manufacturer` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `device_group`
--

DROP TABLE IF EXISTS `device_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device_group` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `device_group_device`
--

DROP TABLE IF EXISTS `device_group_device`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `device_group_device` (
  `device_group_devices_id` bigint(20) DEFAULT NULL,
  `device_id` bigint(20) DEFAULT NULL,
  KEY `FKD0056F5FBC11ECEF` (`device_id`),
  KEY `FKD0056F5FE4F3C3A` (`device_group_devices_id`),
  CONSTRAINT `FKD0056F5FE4F3C3A` FOREIGN KEY (`device_group_devices_id`) REFERENCES `device_group` (`id`),
  CONSTRAINT `FKD0056F5FBC11ECEF` FOREIGN KEY (`device_id`) REFERENCES `device` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `execution`
--

DROP TABLE IF EXISTS `execution`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `execution` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `date_of_execution` varchar(255) NOT NULL,
  `device_id` bigint(20) NOT NULL,
  `device_group_id` bigint(20) DEFAULT NULL,
  `end_time` datetime DEFAULT NULL,
  `output_data` longtext,
  `result` varchar(255) DEFAULT NULL,
  `script_id` bigint(20) NOT NULL,
  `script_group_id` bigint(20) DEFAULT NULL,
  `start_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKBEF90B18E2F1DCCF` (`script_id`),
  KEY `FKBEF90B18BC11ECEF` (`device_id`),
  KEY `FKBEF90B18E9F2698` (`device_group_id`),
  KEY `FKBEF90B18FDA8F66E` (`script_group_id`),
  CONSTRAINT `FKBEF90B18FDA8F66E` FOREIGN KEY (`script_group_id`) REFERENCES `script_group` (`id`),
  CONSTRAINT `FKBEF90B18BC11ECEF` FOREIGN KEY (`device_id`) REFERENCES `device` (`id`),
  CONSTRAINT `FKBEF90B18E2F1DCCF` FOREIGN KEY (`script_id`) REFERENCES `script` (`id`),
  CONSTRAINT `FKBEF90B18E9F2698` FOREIGN KEY (`device_group_id`) REFERENCES `device_group` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1239 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;



--
-- Table structure for table `execution_result`
--

DROP TABLE IF EXISTS `execution_result`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `execution_result` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `actual_result` varchar(255) DEFAULT NULL,
  `expected_result` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `execution_result`
--

LOCK TABLES `execution_result` WRITE;
/*!40000 ALTER TABLE `execution_result` DISABLE KEYS */;
/*!40000 ALTER TABLE `execution_result` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `function`
--

DROP TABLE IF EXISTS `function`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `function` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `module_id` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK524F73D86DEEED2F` (`module_id`),
  CONSTRAINT `FK524F73D86DEEED2F` FOREIGN KEY (`module_id`) REFERENCES `module` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `function`
--

LOCK TABLES `function` WRITE;
/*!40000 ALTER TABLE `function` DISABLE KEYS */;
INSERT INTO `function` VALUES (1,0,1,'play'),(2,0,1,'TuneIt'),(3,0,2,'pause'),(4,0,2,'forward'),(8,0,4,'TestMgr_IARM_Init'),(9,0,4,'IARM_Term'),(10,0,5,'IARM_Join_process'),(11,0,5,'TestMgr_IARM_Term'),(12,0,5,'TestMgr_IARM_RequestResource'),(13,0,5,'TestMgr_IARM_RegisterEventHandler'),(14,0,5,'TestMgr_IARM_ReleaseResource'),(15,0,5,'TestMgr_IARM_UnRegisterEventHandler'),(16,0,7,'TestMgr_E2ELinearTV'),(17,0,7,'TestMgr_E2ELinearTV_GetURL'),(18,0,8,'TestMgr_IARMBUS_Init'),(19,0,8,'TestMgr_IARMBUS_Connect'),(20,0,8,'TestMgr_IARMBUS_Disconnect'),(21,0,8,'TestMgr_IARMBUS_Term'),(22,0,8,'TestMgr_IARMBUS_BusCall'),(23,0,7,'TestMgr_E2ELinearTV_PlayURL'),(24,0,8,'TestMgr_IARMBUS_RegisterCall'),(25,0,8,'TestMgr_IARMBUS_RequestResource'),(26,0,8,'TestMgr_IARMBUS_ReleaseResource'),(27,0,3,'TestMgr_Qt_Graphics_Test_Execute'),(28,0,3,'TestMgr_Qt_Non_Graphics_Test_Execute'),(29,0,8,'TestMgr_IARMBUS_BroadcastEvent'),(30,0,8,'TestMgr_IARMBUS_InvokeSecondApplication'),(31,0,8,'TestMgr_IARMBUS_RegisterEventHandler'),(32,0,8,'TestMgr_IARMBUS_UnRegisterEventHandler'),(36,0,9,'TestMgr_Webkit_Test_Execute'),(37,0,8,'TestMgr_IARMBUS_IsConnected'),(38,0,8,'TestMgr_IARMBUS_RegisterEvent'),(39,0,3,'TestMgr_Qt_Test_Execute'),(40,0,8,'TestMgr_IARMBUS_GetContext'),(41,0,8,'TestMgr_IARMBUS_GetLastReceivedEventDetails'),(42,0,7,'TestMgr_E2ELinearTV_KillPlayer');
/*!40000 ALTER TABLE `function` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `module`
--

DROP TABLE IF EXISTS `module`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `module` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `rdk_version` varchar(255) NOT NULL,
  `test_group` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `module`
--

LOCK TABLES `module` WRITE;
/*!40000 ALTER TABLE `module` DISABLE KEYS */;
INSERT INTO `module` VALUES (1,0,'Ocap','1.2','E2E'),(2,0,'Gstreamer','1.2','Component'),(3,0,'Qt','1.2','OpenSource'),(4,0,'IARM','1.2','Component'),(5,0,'IARMTest','1.2','Component'),(7,0,'LinearTV','1.2','E2E'),(8,0,'IARMBUS ','1.2','Component'),(9,0,'webkit','1.2','OpenSource');
/*!40000 ALTER TABLE `module` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `parameter`
--

DROP TABLE IF EXISTS `parameter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameter` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `parameter_type_id` bigint(20) NOT NULL,
  `primitive_test_id` bigint(20) DEFAULT NULL,
  `value` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK747EB3A9C5F1CB98` (`parameter_type_id`),
  KEY `FK747EB3A967097214` (`primitive_test_id`),
  CONSTRAINT `FK747EB3A967097214` FOREIGN KEY (`primitive_test_id`) REFERENCES `primitive_test` (`id`),
  CONSTRAINT `FK747EB3A9C5F1CB98` FOREIGN KEY (`parameter_type_id`) REFERENCES `parameter_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=174 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameter`
--

LOCK TABLES `parameter` WRITE;
/*!40000 ALTER TABLE `parameter` DISABLE KEYS */;
INSERT INTO `parameter` VALUES (9,1,20,4,'agent'),(16,1,27,9,'ReleaseOwnership'),(23,1,25,8,'0'),(24,1,21,8,'IRMgr'),(25,1,23,8,'IR'),(26,1,22,8,'GetRepeatInterval'),(27,1,24,8,'1000'),(28,1,26,8,'0'),(95,1,41,19,'http:url'),(96,1,35,18,'Daemon'),(97,1,34,18,'1'),(98,1,39,18,'1'),(99,1,36,18,'BUS_DAEMON'),(100,1,40,18,'0'),(101,1,38,18,'1'),(102,1,37,18,'1'),(139,1,29,11,'1'),(140,1,30,12,'1'),(147,1,44,22,'Daemon'),(148,1,43,22,'0'),(149,1,45,23,'0'),(150,1,46,23,'Daemon'),(152,1,49,25,'agent'),(154,1,32,20,'http:url'),(157,1,17,1,'mpeg2'),(158,1,19,1,'ocapSD'),(159,1,16,1,'ac3'),(160,1,18,1,'tune'),(163,1,51,27,'2'),(170,1,52,28,'qt_non_gfx'),(171,1,53,28,'directfb'),(172,1,42,21,'/IARMBUS_exes/tst_iarmbus'),(173,1,48,26,'directfb');
/*!40000 ALTER TABLE `parameter` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `parameter_type`
--

DROP TABLE IF EXISTS `parameter_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameter_type` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `function_id` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `parameter_type_enum` varchar(255) NOT NULL,
  `range_val` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK438D7610F773FC6F` (`function_id`),
  CONSTRAINT `FK438D7610F773FC6F` FOREIGN KEY (`function_id`) REFERENCES `function` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameter_type`
--

LOCK TABLES `parameter_type` WRITE;
/*!40000 ALTER TABLE `parameter_type` DISABLE KEYS */;
INSERT INTO `parameter_type` VALUES (1,0,1,'locator','INTEGER','0-5'),(2,0,1,'frequency','STRING','0-100'),(3,0,2,'frequency','STRING','0-1000'),(4,0,2,'channel','INTEGER','0-1000'),(5,0,2,'modulation','INTEGER','0-1000'),(6,0,3,'param1','INTEGER','0-5'),(7,0,3,'frequency','STRING','0-100'),(8,0,4,'param5','INTEGER','0-5'),(9,0,4,'frequenasdcy','STRING','0-100'),(10,0,8,'Process_name','STRING','A-Z'),(11,0,10,'Process_name','STRING','A-Z'),(12,0,12,'Resource','INTEGER','0-5'),(13,0,13,'UIDEV_Event_ID','INTEGER','0-7'),(14,0,14,'Resource','INTEGER','0-5'),(15,0,15,'UIDEV_Event_ID','INTEGER','0-7'),(16,0,16,'audiotype','STRING','A-Z'),(17,0,16,'typeofocap','STRING','A-Z'),(18,0,16,'typeofurl','STRING','A-Z'),(19,0,16,'videotype','STRING','A-Z'),(20,0,18,'Process_name','STRING','A-Z'),(21,0,22,'owner_name','STRING','A-Z'),(22,0,22,'method_name','STRING','A-Z'),(23,0,22,'data_type','STRING','A-Z'),(24,0,22,'set_timeout','INTEGER','1-65535'),(25,0,22,'newState','INTEGER','0-2'),(26,0,22,'resource_type','INTEGER','0-7'),(27,0,24,'owner_name','STRING','A-Z'),(29,0,25,'resource_type','INTEGER','0-7'),(30,0,26,'resource_type','INTEGER','0-7'),(31,0,27,'Display_option','STRING','directfb (or) eglnullws'),(32,0,23,'videoStreamURL','STRING','A-Z'),(34,0,29,'event_id','INTEGER','0-2'),(35,0,29,'owner_name','STRING','A-Z'),(36,0,29,'data_type','STRING','A-Z'),(37,0,29,'keyType','INTEGER','1-65535'),(38,0,29,'keyCode','INTEGER','1-65535'),(39,0,29,'newState','INTEGER','0-2'),(40,0,29,'resource_type','INTEGER','0-7'),(41,0,17,'Validurl','STRING','A-Z'),(42,0,30,'appname','STRING','A-Z'),(43,0,31,'event_id','INTEGER','0-2'),(44,0,31,'owner_name','STRING','A-Z'),(45,0,32,'event_id','INTEGER','0-2'),(46,0,32,'owner_name','STRING','A-Z'),(48,0,36,'Display_option','STRING','directfb (or) eglnullws'),(49,0,37,'member_name','STRING','A-Z'),(50,0,27,'Component_choice','STRING','qt_non_gfx or qt_gfx'),(51,0,38,'max_event','INTEGER','0-2'),(52,0,39,'Qt_component_type','STRING','qt_non_gfx or qt_gfx'),(53,0,39,'Display_option','STRING','directfb (or) eglnullws');
/*!40000 ALTER TABLE `parameter_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `primitive_test`
--

DROP TABLE IF EXISTS `primitive_test`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `primitive_test` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `function_id` bigint(20) NOT NULL,
  `module_id` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FKA504E8EA6DEEED2F` (`module_id`),
  KEY `FKA504E8EAF773FC6F` (`function_id`),
  CONSTRAINT `FKA504E8EAF773FC6F` FOREIGN KEY (`function_id`) REFERENCES `function` (`id`),
  CONSTRAINT `FKA504E8EA6DEEED2F` FOREIGN KEY (`module_id`) REFERENCES `module` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `primitive_test`
--

LOCK TABLES `primitive_test` WRITE;
/*!40000 ALTER TABLE `primitive_test` DISABLE KEYS */;
INSERT INTO `primitive_test` VALUES (1,3,16,7,'LinearTV'),(4,1,18,8,'IARMBUS_Init'),(5,0,21,8,'IARMBUS_Term'),(6,0,19,8,'IARMBUS_Connect'),(7,0,20,8,'IARMBUS_DisConnect'),(8,3,22,8,'IARMBUS_BusCall'),(9,1,24,8,'IARMBUS_RegisterCall'),(11,3,25,8,'IARMBUS_RequestResource'),(12,3,26,8,'IARMBUS_ReleaseResource'),(18,6,29,8,'IARMBUS_BroadcastEvent'),(19,3,17,7,'E2E_LinearTV_URL'),(20,4,23,7,'E2E_LinearTV_Play_URL'),(21,3,30,8,'IARMBUS_InvokeSecondApplication'),(22,15,31,8,'IARMBUS_RegisterEventHandler'),(23,14,32,8,'IARMBUS_UnRegisterEventHandler'),(25,1,37,8,'IARMBUS_IsConnected'),(26,3,36,9,'Webkit_Test'),(27,1,38,8,'IARMBUS_RegisterEvent'),(28,3,39,3,'Qt_Test'),(29,0,40,8,'IARMBUS_GetContext'),(30,0,42,7,'E2E_LinearTV_KillPlayer'),(31,0,41,8,'IARMBUS_GetLastReceivedEventDetails');
/*!40000 ALTER TABLE `primitive_test` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `report`
--

DROP TABLE IF EXISTS `report`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `report` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `report`
--

LOCK TABLES `report` WRITE;
/*!40000 ALTER TABLE `report` DISABLE KEYS */;
/*!40000 ALTER TABLE `report` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script`
--

DROP TABLE IF EXISTS `script`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `primitive_test_id` bigint(20) NOT NULL,
  `script_content` longtext NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  `synopsis` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKC9E5D0CB67097214` (`primitive_test_id`),
  CONSTRAINT `FKC9E5D0CB67097214` FOREIGN KEY (`primitive_test_id`) REFERENCES `primitive_test` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=138 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script`
--

LOCK TABLES `script` WRITE;
/*!40000 ALTER TABLE `script` DISABLE KEYS */;
INSERT INTO `script` VALUES (31,10,'IARMBUS Connect & Disconnect test',6,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_1\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or(\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                #calling IARMBUS API \"IARM_Bus_Disconnect\"\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script tests the successful joining of the Agent application with the IARM Bus.\r\nTest Case ID : CT_IARMBUS_1                 '),(32,24,'IARMBUS Init Negative test',4,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_2\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif \"SUCCESS\" in result:\r\n        print \"SUCCESS: IARM Bus library is initialized\";\r\n        #calling IARMBUS API \"IARM_Bus_Init\" to initialize IARMBus library second time\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"INVALID_PARAM\" in details:\r\n                print \"SUCCESS: IARM Bus Library is already initialized\";\r\n                #actual test case is passed\r\n                result = \"SUCCESS\";\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Init failed with %s\" %details;\r\n                print \"FAILURE: IARM Bus Library initialized second time\";\r\n                #Actual test case is failed\r\n                result = \"FAILURE\";\r\nelif \"INVALID_PARAM\" in details:\r\n                print \"SUCCESS: IARM Bus Library is already initialized\";\r\n                #actual test case is passed\r\n                result = \"SUCCESS\";\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s\" %details;\r\n        #Actual test case is failed\r\n        result = \"FAILURE\";\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies the error scenario of rejoining the Agent with the IARM BUS which has been already registered.     \r\nTest Case ID : CT_IARMBUS_2\r\n     '),(33,17,'IARMBUS IsConnected test',25,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_3\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails = tdkTestObj.getResultDetails();\r\nif ( \"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application is initialized with IARM Bus library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application is successfully connected with IARMBUS\";\r\n                #calling IARMBUS API \"IARM_Bus_IsConnected\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_IsConnected\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details = tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: API-Is_Connected success\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details = tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARM Bus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Isconnected failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script tests the registration status of the Agent with the IARM Bus\r\nTest Case ID :CT_IARMBUS_3                                '),(54,40,'webkit',26,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"webkittestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"Webkit test module loading status :  %s\" %result;\r\n\r\n#Prmitive test case which associated to this Script\r\ntdkTestObj = obj.createTestStep(\'Webkit_Test\');\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"%s\" %result;\r\n\r\n#Get the log path of the Webkit Test suite\r\nlogpath =tdkTestObj.getLogPath();\r\n\r\n#Unloading the webkit test module\r\nobj.unloadModule(\"webkittestsuite\");','FREE','This test script executes the webkit test suites'),(56,17,'IARMBUS Receving IRkey',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_4\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #Wait for 30 sec to receive IR events\r\n                                        time.sleep(30);\r\n                                        # Calling IARMBUS_GetLastReceivedEventDetails to get the last event details\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS: Event is not Received\";\r\n                                        else:\r\n                                                print \"FAILURE: Event is Received\";\r\n\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script tests the successful registration of an Event Handler to handle IR events\r\nTest Case ID:CT_IARMBUS_4. \r\nNote:Script will wait for 30sec to receive IR Keys from actual remote , later remote keys will be automated by IR key simulator.'),(57,6,'IARMBUS unregisterEvt Handler test',23,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_5\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS :Register call success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        # Requesting RESOURCE_FOCUS resource\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                # Register for IR Key event.\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #WAIT for 30 sec to receive IR events\r\n                                        time.sleep(30);\r\n                                        #Get the last IR key code\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Event Received\";\r\n                                        else:\r\n                                                print \"FAILURE: Event is not received\";\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                #wait for 30 sec\r\n                                                time.sleep(30);\r\n                                                #try to get last received IR key code\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS: Event is not Received\";\r\n                                                else:\r\n                                                        print \"FAILURE: Event is Received\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script tests the successful de-registration of an Event handler\r\nTest Case ID : CT_IARMBUS_5 \r\nNote:Script will wait for 30sec to receive IR Keys from actual remote , later remote keys will be automated by IR key simulator.'),(68,4,'IARMBUS Unregister with out Register Event Handler test',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_6\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"FAILURE\" in result:\r\n                                        print \"SUCCESS :Could not unregister Event Handler before registering \";\r\n                                        #WAIT and get last receiver IR key.\r\n                                        time.sleep(10);\r\n                                        #No IR key should receive\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS: Event is not Received\";\r\n                                        else:\r\n                                                print \"FAILURE: Event is Received\";\r\n\r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: Application can unregister event before register --> IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script tests the failure scenario when an unregister event handler is called without registering a event handler. Note:Script will wait for 10sec to receive IR Keys from actual remote, later remote keys will be automated by IR key simulator.'),(69,7,'IARMBUS Release Resource test',12,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_7\')\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Register RPC method Success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Event Handler registered successfully\";\r\n                                        # Wait for 20 sec to receive IR events\r\n                                        time.sleep(20);\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS: Event is not Received\";\r\n                                        else:\r\n                                                print \"FAILURE: Event is Received\";\r\n\r\n                                        \r\n                                        #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Allocated  resource is successfully released\";\r\n                                                # Wait for 20 sec to receive IR events\r\n                                                time.sleep(20);\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS: Event is not Received\";\r\n                                                else:\r\n                                                        print \"FAILURE: Event is Received\";\r\n                                                # Agent should not receive any key code\r\n                                                # Get last received IR key code\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS: Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script tests the successful release of an acquired resource\r\nTest Case ID : CT_IARMBUS_7. Note:Script will wait for 20sec to receive IR Keys from actual remote , later remote keys will be automated by IR key simulator.'),(70,23,'IARMBUS Request same resource in different application test',11,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_8\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application registers RPC methods\";\r\n                        #wait for 2 sec to start second application\r\n                        time.sleep(2);\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Second application Invoked successfully\";\r\n                        else:\r\n                                print \"FAILURE: Second application failed to execute\";\r\n                        #This agent application also tries to grabb the same resource mentioned above\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Requested resource is allocated from another application\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Resource Released\";\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies the release of a resource by one application when another application requests the same resource. TestCase ID:CT_IARMBUS_8				'),(71,3,'IARMBUS Request same resource from same application test',11,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_9\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application registers RPC method\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                #Application tries to acquire the same resource second time\r\n                                #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                                print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"FAILURE\" in result:\r\n                                        print \"SUCCESS: Requested resource is already allocated for the application\";\r\n                                         #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Allocated  resource is successfully released\";\r\n                                                 #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: Requesting resource second time -IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies the request of a resource by a application when the same \r\n application already acquires the same resource.TestCase ID:CT_IARMBUS_9				'),(72,15,'IARMBUS Request decoder-0 test',11,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_10\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application registeres RPC\"\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        # Requesting decoder 0 resource\r\n                        tdkTestObj.addParameter(\"resource_type\",1);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Requested decoder-0 resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",1);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Allocated  resource is successfully released\";\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies the successful obtaining of decoder-0 resource\r\nTest Case ID : CT_IARMBUS_10          				'),(73,8,'IARMBUS Request decoder-1 test',11,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_11\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Appplication register RPC\"\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        # Requesting decoder 1 resource\r\n                        tdkTestObj.addParameter(\"resource_type\",2);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Requested deocder-1 resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",2);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Allocated  decoder-1 resource is successfully released\";\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies the successful obtaining of decoder-1 resource\r\nTest Case ID : CT_IARMBUS_11      				'),(74,10,'IARMBUS Request graphics plane-0 test',11,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_12\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Appplication register RPC\"\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        # Requesting graphics plan-0 resource\r\n                        tdkTestObj.addParameter(\"resource_type\",3);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Requested graphics plane-0 resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",3);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Allocated  graphics plane-0 resource is successfully released\";\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies the successful obtaining of graphics plane -0 resource\r\nTest Case ID : CT_IARMBUS_12     				'),(75,8,'IARMBUS Request graphics plane-1 test',11,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_13\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Appplication register RPC\"\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        # Requesting graphics plan-1 resource\r\n                        tdkTestObj.addParameter(\"resource_type\",4);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Requested graphics plane-1 resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",4);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Allocated  graphics plane-1 resource is successfully released\";\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies the successful obtaining of graphics plane - 1 resource\r\nTest Case ID : CT_IARMBUS_13    				'),(76,2,'IARMBUS Request display_resolution_change  test',11,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_14\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Appplication register RPC\"\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        # Requesting  \"display resolution change\" resource\r\n                        tdkTestObj.addParameter(\"resource_type\",5);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Requested -display resolution change- resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",5);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Allocated -display resolution change- resource is successfully released\";\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies the successful obtaining of display resolution resource\r\nTest Case ID : CT_IARMBUS_14       				'),(77,4,'IARMBUS Request power  test',11,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_15\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Appplication register RPC\"\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        # Requesting power resource\r\n                        tdkTestObj.addParameter(\"resource_type\",6);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Requested power resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                tdkTestObj.addParameter(\"resource_type\",6);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Allocated power resource is successfully released\";\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies the successful obtaining of power resource\r\nTest Case ID : CT_IARMBUS_15    				'),(78,2,'IARMBUS RegisterCall test',9,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_16\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        # IARMBUS_Connect is to connect the application with IARM-BUS Daemon\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #IARMBUS_RegisterCall is to register an RPC that can be invoked by other application\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application Registeres an RPC successfully\";\r\n                        #IARMBUS_DisConnect is to disconnect application from IARM-Bus Daemon\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies the successful registration of an RPC call in the app\r\nTest Case ID : CT_IARMBUS_16    				'),(79,10,'IARMBUS BusCall test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_17\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        # IARMBUS_Connect is to connect the application with IARM-BUS Daemon\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #IARMBUS_RegisterCall is to register an RPC that can be invoked by other application\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application Registeres an RPC successfully\";\r\n                        #IARMBUS_BusCall is to invoke an RPC.\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                        tdkTestObj.addParameter(\"data_type\",\"PWR\");\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application invokes an RPC successfully\";\r\n                                #IARMBUS_DisConnect is to disconnect application from IARM-Bus Daemon\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Call failed with %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script tests the invocation of an RPC method registered in another application\r\nTest Case ID : CT_IARMBUS_17             				'),(80,8,'IARMBUS Register event handler for IR key',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_18\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                #Register IR event handler for receving IR key events\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Rehistered event handler to receive IR key\";\r\n                                        #Wait for 30 sec to receive IR events\r\n                                        time.sleep(30);\r\n                                        #try to get last received IR key code\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS: Event is not Received\";\r\n                                        else:\r\n                                                print \"FAILURE: Event is Received\";\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script tests the successful registration of Event Handler for IR Key Events\r\nTest Case ID : CT_IARMBUS_18. Note:Script will wait for 30sec to receive IR Keys from actual remote , later remote keys will be automated by IR key simulator.\r\n\r\n'),(81,13,'IARMBUS Broadcast IR event',18,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_19\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARM-Bus Daemon\";\r\n                #Run another application to receive broadcasted events\r\n                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                tdkTestObj.addParameter(\"event_id\",0);\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Event Handler registered for IR key events\";\r\n                        #sleep for 5 sec to receive IR key event\r\n                        time.sleep(5);\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Second application Invoked successfully\";\r\n                        else:\r\n                                print \"FAILURE: Second application failed to execute\";\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: GetLastReceivedEventDetails executed successfully\";\r\n                        else:\r\n                                print \"FAILURE: GetLastReceivedEventDetails failed\";\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                        tdkTestObj.addParameter(\"event_id\",0);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"FAILURE\" in result:\r\n                                print \"SUCCESS: UnRegister Event Handler for IR key events\";\r\n                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE : IARM_Bus_UnRegisterEventHanlder failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE : IARM_Bus_RegisterEventHandler failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script Broadcasts an IR event to all the registered apps in IARM BUS\r\nTest Case ID : CT_IARMBUS_19 \r\n'),(82,4,'IARMBUS No IR event test',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_20\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                #Ext HDD event handler is registerd\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #Wait for 30 sec to receive IR events\r\n                                        time.sleep(30);\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS: Event is not Received\";\r\n                                        else:\r\n                                                print \"FAILURE: Event is Received\";\r\n                                        #No IR event is received till delay completes\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script verifies whether no IR key event is received for an application which has not registered to receive IR events. Test Case ID:CT_IARMBUS_20	\r\n'),(83,1,'IARMBUS HDD event test',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_21\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                #Register event handler for receving HDD events\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #wait for 30 sec to receive HDD events\r\n                                        time.sleep(30);\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script verifies the receiving of HDD Event while mounting of HDD\r\nTest Case ID : CT_IARMBUS_21     	\r\nNOTE:This test script will FAIL because IARMBUS component is not released for XG1. This is script is for XG1 only testing.				'),(84,1,'IARMBUS ExtHDD event',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_22\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                #Register event handler for receving ExtHDD mount/unmount events\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #wait for 30 sec to receive ExtHDD events\r\n                                        time.sleep(30);\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script verifies the receiving of Ext HDD Event while mounting Ext HDD\r\nTest Case ID : CT_IARMBUS_22     \r\nNOTE:This test script will FAIL because IARMBUS component is not released for XG1. This is script is for XG1 only testing.	  				'),(85,1,'IARMBUS ExtHDD paring event test',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_23\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                #Register event handler for receving ExtHDD paring events\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #wait for 30 sec to receive ExtHDD events\r\n                                        time.sleep(30);\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script verifies the receiving of Ext HDD pairing Event \r\nTest Case ID : CT_IARMBUS_23       \r\nNOTE:This test script will FAIL because IARMBUS component is not released for XG1. This is script is for XG1 only testing.	      				'),(86,1,'IARMBUS Ext HDD ON Event test',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_24\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                #Register event handler for receving ExtHDD_ON events\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #wait for 30 sec to receive ExtHDD events\r\n                                        time.sleep(30);\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script verifies the receiving of Ext HDD ON Event\r\nTest Case ID : CT_IARMBUS_24     	\r\nNOTE:This test script will FAIL because IARMBUS component is not released for XG1. This is script is for XG1 only testing.				'),(87,1,'IARMBUS Ext HDD OFF event test',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_25\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                #Register event handler for receving ExtHDD_OFF events\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #wait for 30 sec to receive ExtHDD events\r\n                                        time.sleep(30);\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script verifies the receiving of Ext HDD OFF Event\r\nTest Case ID : CT_IARMBUS_25\r\nNOTE:This test script will FAIL because IARMBUS component is not released for XG1. This is script is for XG1 only testing.	            				'),(88,2,'IARMBUS Query Key Repeat Interval test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_27\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        # IARMBUS_Connect is to connect the application with IARM-BUS Daemon\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #IARMBUS_BusCall is to invoke an RPC.\r\n                #Passing parameters to query key repeat interval\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                tdkTestObj.addParameter(\"method_name\",\"GetRepeatInterval\");\r\n                tdkTestObj.addParameter(\"data_type\",\"IR\");\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application invokes an RPC successfully\";\r\n                        #IARMBUS_DisConnect is to disconnect application from IARM-Bus Daemon\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script queries the Key Repeat Interval of the STB\r\nTest Case ID : CT_IARMBUS_27          				'),(89,5,'IARMBUS Set Key Repeat Interval test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_28\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                #passing prameter for querying key repeat interval time\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                tdkTestObj.addParameter(\"method_name\",\"GetRepeatInterval\");\r\n                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Query- RPC method invoked for querying key repeat interval \";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        #passing prameter for setting key repeat interval time\r\n                        tdkTestObj.addParameter(\"method_name\",\"SetRepeatInterval\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                        tdkTestObj.addParameter(\"set_timeout\",100);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        set_interval=details;\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Set- RPC method invoked for setting key repeat interval \";\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                #passing prameter for querying key repeat interval time\r\n                                tdkTestObj.addParameter(\"method_name\",\"GetRepeatInterval\");\r\n                                tdkTestObj.addParameter(\"data_type\",\"IR\");\r\n                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                get_interval=tdkTestObj.getResultDetails();\r\n                                if get_interval == set_interval:\r\n                                        print \"SUCCESS: Key Repeat Intervals are same\";\r\n                                else:\r\n                                        print \"FAILURE: Both the Key Repeat Interval are not same\";\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Query- RPC method invoked for setting key repeat interval \";\r\n                                        #Need to compare both keyRepeatInterval time\r\n                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: GetRepeatInterval ---> IARM_Bus_Call failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: SetRepeatInterval ---> IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: GetRepeatInterval ---> IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s\" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script Sets the Key Repeat Interval of the STB to the desired value\r\nTest Case ID : CT_IARMBUS_28      				'),(90,8,'IARMBUS Query Power state',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_29\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n# Calling IARM_Bus_Init API\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        # Calling IARM_Bus_Connect API\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                #passing parameter for Querying STB power state\r\n                tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                tdkTestObj.addParameter(\"data_type\",\"PWR\");\r\n                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Query Power state invoked successfully\";\r\n                        # Calling IARM_Bus_DisConnect API\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: Query POwer state --> IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script queries the Current Power state of the STB\r\nTest Case ID : CT_IARMBUS_29            				'),(91,7,'IARMBUS Set Power state',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_30\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"Application is successfully connected with IARM-BUS Daemon\";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method is registered\";\r\n                        #calling IARMBUS API \"IARM_Bus_Call\"\r\n                        #passing parameter for querying STB power state\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                        tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                        tdkTestObj.addParameter(\"data_type\",\"PWR\");\r\n                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Querying STB power state -RPC method invoked successfully\";\r\n                                #Setting the POWER state\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                tdkTestObj.addParameter(\"method_name\",\"SetPowerState\");\r\n                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                # setting state to ON\r\n                                tdkTestObj.addParameter(\"newState\",2);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                before_set_powerstate = details;\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS: Setting STB power state -RPC method invoked successfully\";\r\n                                        #Querying the STB power state\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                                        tdkTestObj.addParameter(\"method_name\",\"GetPowerState\");\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        after_set_powerset=details;\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Querying STB power state -RPC method invoked successfully\";\r\n                                                if before_set_powerstate == after_set_powerset :\r\n                                                        print \"SUCCESS: Both the Power states are equal\";\r\n                                                else:\r\n                                                        print \"FAILURE: Both power states are different\";\r\n                                                #comparing the Power state before and after setting the power state\r\n                                                #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                        else:\r\n                                                print \"FAILURE: Querying STB power state - IARM_Bus_Call failed with %s \" %details;\r\n                                else:\r\n                                        print \"FAILURE: Set STB power state - IARM_Bus_Call failed with %s \" %details;\r\n                        else:\r\n                                print \"FAILURE: Querying STB power state - IARM_Bus_Call failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script sets the Power state of the STB to the desired state\r\nTest Case ID : CT_IARMBUS_30      				'),(92,2,'IARMBUS RegisterEventMax',27,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_31\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS: Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS: Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterEvent\"\r\n                #This should be called in the IARM Manager perspective like irmgr,pwrmgr,diskmgr.\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEvent\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: Application successfully register events\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterEvent failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script registers for all possible events .\r\nTest Case ID : CT_IARMBUS_31                 				'),(93,12,'IARMBBUS Register for Resource Available event test',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_32\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.addParameter(\"resource_type\",1);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                #passing parameter for receving RESOURCE_AVAILABLE event\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        #Call second application to check for resource available event\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS:InvokeSecondApplication success\";\r\n                                        else:\r\n                                                print \"FAILURE:InvokeSecondApplication fails\";\r\n                                        #wait for 10 sec\r\n                                        time.sleep(10);\r\n                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS: Event is not Received\";\r\n                                        else:\r\n                                                print \"FAILURE: Event is Received\";\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.addParameter(\"resource_type\",1);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"SUCCESS\" in result:\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script tests the receiving of RESOURCE_AVAILABLE Event when one application releases a resource.Test Case ID:CT_IARMBUS_32				'),(94,12,'IARMBUS Broadcast ResolutionChange Event test',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_33\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.addParameter(\"resource_type\",0);\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                #passing parameter for receving Resolution change event\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                tdkTestObj.addParameter(\"event_id\",1);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :Event Handler registered successfully\";\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_InvokeSecondApplication\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS:InvokeSecondApplication success\";\r\n                                        else:\r\n                                                print \"FAILURE:InvokeSecondApplication fails\";\r\n                                        time.sleep(10);\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS: Event Received\";\r\n                                        else:\r\n                                                print \"FAILURE: Event is not received\";\r\n\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"Daemon\");\r\n                                        tdkTestObj.addParameter(\"event_id\",1);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"FAILURE\" in result:\r\n                                                print \"SUCCESS :UnRegister Event Handler registered successfully\";\r\n                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                tdkTestObj.addParameter(\"resource_type\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"FAILURE\" in result:\r\n                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                        print \"SUCCESS :Allocated  resource is taken and already Released by second application\";\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"SUCCESS\" in result:\r\n                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                        else:\r\n                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                else:\r\n                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IARM_Bus_UnRegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script Broadcasts a Resolution Change event to all the registered apps in IARM BUS\r\nTest Case ID : CT_IARMBUS_33       				'),(95,3,'IARMBUS PowerModeChanged event test',22,'import tdklib;\r\nimport time;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_34\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_RegisterCall\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterCall\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"Register RPC calls success\";\r\n                        #calling IARMBUS API \"IARM_BusDaemon_RequestOwnership\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_RequestResource\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS :Requested resource is allocated successfully for the application\";\r\n                                #calling IARMBUS API \"IARM_Bus_RegisterEventHandler\"\r\n                                #passing parameter for receving POWER_MODE_CHANGEDevent\r\n                                tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                tdkTestObj.executeTestCase();\r\n                                result = tdkTestObj.getResult();\r\n                                details=tdkTestObj.getResultDetails();\r\n                                if \"SUCCESS\" in result:\r\n                                        print \"SUCCESS :IR Event Handler registered successfully\";\r\n                                        tdkTestObj = obj.createTestStep(\'IARMBUS_RegisterEventHandler\');\r\n                                        tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                        tdkTestObj.executeTestCase();\r\n                                        result = tdkTestObj.getResult();\r\n                                        details=tdkTestObj.getResultDetails();\r\n                                        if \"SUCCESS\" in result:\r\n                                                print \"SUCCESS : PWR Event Handler registered successfully\";\r\n                                                #WAIT 30 sec to receive receive power mode changed\r\n                                                time.sleep(30)\r\n                                                #POWER IR key should receive\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_GetLastReceivedEventDetails\');\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS: Event is not Received\";\r\n                                                else:\r\n                                                        print \"FAILURE: Event is Received\";\r\n                                                #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                tdkTestObj.addParameter(\"owner_name\",\"IRMgr\");\r\n                                                tdkTestObj.addParameter(\"event_id\",0);\r\n                                                tdkTestObj.executeTestCase();\r\n                                                result = tdkTestObj.getResult();\r\n                                                details=tdkTestObj.getResultDetails();\r\n                                                if \"FAILURE\" in result:\r\n                                                        print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                        #calling IARMBUS API \"IARM_Bus_UnRegisterEventHandler\"\r\n                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_UnRegisterEventHandler\');\r\n                                                        tdkTestObj.addParameter(\"owner_name\",\"PWRMgr\");\r\n                                                        tdkTestObj.addParameter(\"event_id\",0);\r\n                                                        tdkTestObj.executeTestCase();\r\n                                                        result = tdkTestObj.getResult();\r\n                                                        details=tdkTestObj.getResultDetails();\r\n                                                        if \"FAILURE\" in result:\r\n                                                                print \"SUCCESS :Event Handler unregistered successfully\";\r\n                                                                #calling IARMBUS API \"IARM_BusDaemon_ReleaseOwnership\"\r\n                                                                tdkTestObj = obj.createTestStep(\'IARMBUS_ReleaseResource\');\r\n                                                                tdkTestObj.executeTestCase();\r\n                                                                result = tdkTestObj.getResult();\r\n                                                                details=tdkTestObj.getResultDetails();\r\n                                                                if \"SUCCESS\" in result:\r\n                                                                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                                                                        print \"SUCCESS :Allocated  resource is successfully released\";\r\n                                                                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                                                                        tdkTestObj.executeTestCase();\r\n                                                                        result = tdkTestObj.getResult();\r\n                                                                        details=tdkTestObj.getResultDetails();\r\n                                                                        if \"SUCCESS\" in result:\r\n                                                                                print \"SUCCESS :Application successfully disconnected from IARMBus\";\r\n                                                                        else:\r\n                                                                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                                                                else:\r\n                                                                        print \"FAILURE: IARM_BusDaemon_ReleaseOwnership failed with %s\" %details;\r\n                                                        else:\r\n                                                                print \"FAILURE:PWR -> IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                                else:\r\n                                                        print \"FAILURE:IR -> IARM_Bus_UnRegisterEventHandler failed with %s\" %details;\r\n                                        else:\r\n                                                print \"FAILURE: IR->IARM_Bus_RegisterEventHandler %s\" %details;\r\n                                else:\r\n                                        print \"FAILURE: PWR->IARM_Bus_RegisterEventHandler %s\" %details;\r\n                        else:\r\n                                print \"FAILURE: IARM_BusDaemon_RequestOwnership %s\" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_RegisterCall failed with %s\" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This test script tests the successful receiving of PowerModeChanged Event when Power key is pressed . TestCase ID:CT_IARMBUS_34				'),(96,1,'IARMBUS BusCall MFR-STB Manufature Name test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_35\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                # Need to add parameter for getting STB Manufature name (mfr)\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method invoked successfully\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script queries the STB Manufacturer Name\r\nTest Case ID :CT_IARMBUS_35      		\r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)'),(97,1,'IARMBUS BusCall MFR-OUI test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_36\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                # Need to add parameter for getting STB Manufature-Organizationally Unique Identifier\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method invoked successfully\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script queries the Manufacturer Organizationally Unique Identifier\r\nTest Case ID : CT_IARMBUS_36          \r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)	'),(98,1,'IARMBUS BusCall MFR-Model Name test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_37\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                # Need to add parameter for getting STB Manufature-Model Name\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method invoked successfully\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script queries the MFR- Model Name\r\nTest Case ID : CT_IARMBUS_37      \r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)         				'),(99,1,'IARMBUS BusCall MFR-Board description test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_38\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                # Need to add parameter for getting STB Manufature-board description\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method invoked successfully\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script queries the MFR Board Description\r\nTest Case ID : CT_IARMBUS_38           		\r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)		'),(100,1,'IARMBUS BusCall MFR-Board Product Class test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_39\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                # Need to add parameter for getting STB Manufature-Product Class\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method invoked successfully\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script queries the MFR Board Product Class\r\nTest Case ID : CT_IARMBUS_39     \r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)'),(101,1,'IARMBUS BusCall MFR-SerialNumber test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_40\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                # Need to add parameter for getting STB Manufature-serial Number\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method invoked successfully\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script queries the MFR Serial Number\r\nTest Case ID : CT_IARMBUS_40          \r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)				'),(102,1,'IARMBUS BusCall MFR-Hardware version test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_41\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                # Need to add parameter for getting STB Manufature-Hardware version\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method invoked successfully\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script queries the MFR Hardware version\r\nTest Case ID : CT_IARMBUS_41    	\r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)			'),(103,1,'IARMBUS BusCall MFR-Software version test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_42\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                # Need to add parameter for getting STB Manufature-software version\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method invoked successfully\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script queries the MFR Software version\r\nTest Case ID : CT_IARMBUS_42    	\r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)			'),(104,1,'IARMBUS BusCall MFR- Provision Code test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_43\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                # Need to add parameter for getting STB Manufature-provision code\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method invoked successfully\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script queries the MFR Provision Code\r\nTest Case ID : CT_IARMBUS_43          				\r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)'),(105,1,'IARMBUS BusCall MFR-First Use Date test',8,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_44\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_Call\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_BusCall\');\r\n                # Need to add parameter for getting STB Manufature-First Use Date\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: RPC method invoked successfully\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_Call failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n',NULL,'This test script queries the MFR First Use date\r\nTest Case ID : CT_IARMBUS_44     \r\nNOTE:This test script will FAIL because all MFR related Bus calls causes the agent to wait infinitely(issue with IARM Bus RDK component)				'),(106,20,'E2E_LinearTV_TuneSD_01',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD_01\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Error code Response is success\";\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"SD channel Tuned and played Successfully\";\r\n                else:\r\n                        print \"Failed to tune and play SD Channel\";\r\n        else:\r\n                print \"Error code Response is Failed\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n','FREE','This script tests tuning of a  SD service in End-to-End scenario\r\nTest Case ID: E2E_LinearTV_01  				'),(107,15,'E2E_LinearTV_TuneHD_02',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneHD_02\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Error code Response is success\";\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"HD channel Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and Play the HD channel\"\r\n        else:\r\n                print \"Error code Response is Failed\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n','FREE','This script tests tuning of a  HD service in End-to-End scenario\r\nTest Case ID: E2E_LinearTV_02 			'),(108,17,'E2E_LinearTV_TuneSD-SD_03',19,'#use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD-SD_03\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_GetURL function to send request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+PLAYURL[-1];\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Pre condition-Json Response received successfully\";\r\n                #Calling LinearTV_GetURL function to send request url\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n                streamDetails = tdkTestObj.getStreamDetails(\'03\');\r\n                channeltype =streamDetails.getChannelType();\r\n                url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                print \"[URL] : %s\" %url2;\r\n                tdkTestObj.addParameter(\"Validurl\",url2);\r\n                tdkTestObj.executeTestCase();\r\n                details = tdkTestObj.getResultDetails();\r\n                # Remove unwanted part from URL\r\n                PLAYURL2 = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAYURL2 = \"+PLAYURL2[-1];\r\n                result = tdkTestObj.getResult();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"SD-SD channel tune response received successfully\";\r\n                else:\r\n                        print \"Failed to receive tune response SD-SD channel\";\r\n        else:\r\n                print \"Pre condition-Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n','FREE','This script tests tuning of an SD service from another SD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_03				'),(109,9,'E2E_LinearTV_TuneSD-HD_04',19,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneSD-HD_04\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_GetURL function to send request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if result == \"[SCRIPTSTATUSRESULT]SUCCESS\":\r\n                print \"Pre condition-Json Response received successfully\";\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n                streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n                channeltype =streamDetails.getChannelType();\r\n                url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                print \"[URL] : %s\" %url2;\r\n                tdkTestObj.addParameter(\"Validurl\",url2);\r\n                tdkTestObj.addParameter(\"Validurl\",url2);\r\n                #Execute the test case in STB\r\n                tdkTestObj.executeTestCase();\r\n                details = tdkTestObj.getResultDetails();\r\n                # Remove unwanted part from URL\r\n                PLAYURL2 = url.split(\"[RESULTDETAILS]\");\r\n                print \"PLAYURL2 = \"+PLAYURL2[-1];\r\n                result = tdkTestObj.getResult();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if result == \"[SCRIPTSTATUSRESULT]SUCCESS\":\r\n                        print \"SD-HD channel tune response received successfully\";\r\n                else:\r\n                        print \"Failed to receive tune response SD-HD channel\";\r\n        else:\r\n                print \"Pre condition-Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n','FREE','This script tests tuning of an SD service from another HD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_04    				'),(110,9,'E2E_LinearTV_TuneHD-SD_05',19,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneHD-SD_05\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_GetURL function to send request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if result == \"[SCRIPTSTATUSRESULT]SUCCESS\":\r\n                print \"Pre condition-Json Response received successfully\";\r\n                #Calling LinearTV_GetURL function to send request url\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n                streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n                channeltype =streamDetails.getChannelType();\r\n                url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                print \"[URL] : %s\" %url2;\r\n                tdkTestObj.addParameter(\"Validurl\",url2);\r\n                tdkTestObj.executeTestCase();\r\n                details = tdkTestObj.getResultDetails();\r\n                # Remove unwanted part from URL\r\n                PLAYURL2 = url.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL2 = \"+PLAYURL2[-1];\r\n                result = tdkTestObj.getResult();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if result == \"[SCRIPTSTATUSRESULT]SUCCESS\":\r\n                        print \"SD-SD channel tune response received successfully\";\r\n                else:\r\n                        print \"Failed to receive tune response HD-SD channel\";\r\n        else:\r\n                print \"Pre condition-Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests tuning of an HD service from another SD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_05  				'),(112,11,'E2E_LinearTV_TuneHD-HD_06',19,'# use tdklib library,which provides a wrapper for tdk testcase script\r\nimport tdklib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_TuneHD-HD_06\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Prmitive test case which associated to this Script\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if result == \"[SCRIPTSTATUSRESULT]SUCCESS\":\r\n                print \"Pre condition-Json Response received successfully\";\r\n                #Calling LinearTV_GetURL function to send request url\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n                streamDetails = tdkTestObj.getStreamDetails(\'03\');\r\n                channeltype =streamDetails.getChannelType();\r\n                url2=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n                print \"[URL] : %s\" %url2;\r\n                tdkTestObj.addParameter(\"Validurl\",url2);\r\n                tdkTestObj.executeTestCase();\r\n                details = tdkTestObj.getResultDetails();\r\n                # Remove unwanted part from URL\r\n                PLAYURL2 = details.split(\"[RESULTDETAILS]\");\r\n                print \"PLAY URL2 = \"+PLAYURL2[-1];\r\n                result = tdkTestObj.getResult();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if result == \"[SCRIPTSTATUSRESULT]SUCCESS\":\r\n                        print \"HD-HD channel tune response received successfully\";\r\n                else:\r\n                        print \"Failed to receive tune response HD-HD channel\";\r\n        else:\r\n                print \"Pre condition-Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n','FREE','This script tests tuning of an HD service from another HD service in End-to-End scenario\r\nTest Case ID : E2E_LinearTV_06 				'),(113,12,'E2E_LinearTV_Live_Trickplay_07',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_07\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for slow rewind Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=-0.5.000000&time_pos=8000\";\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"Slow rewind with -0.5x is played successfully \";\r\n                else:\r\n                        print \"Failed to play slow rewind with -0.5x\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n\r\n','FREE','This script tests the playback of slow rewind with play speed -0.5 in End-to-End scenario Test Case ID : E2E_LinearTV_07 				'),(114,10,'E2E_LinearTV_Live_Trickplay_08',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_08\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for slow forward Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=0.5.000000&time_pos=8000\";\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"Slow farword with 0.5x is played successfully \";\r\n                else:\r\n                        print \"Failed to play Slow forward with 0.5x\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n','FREE','This script tests the playback of slow forward with play speed 0.5 in End-to-End scenario Test Case ID : E2E_LinearTV_08 				'),(115,8,'E2E_LinearTV_Live_Trickplay_09',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_09\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Fast rewind Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=-4.000000&time_pos=8000\";\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast rewind with -4x is played successfully \";\r\n                else:\r\n                        print \"Failed to play fast rewind with -4x\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n','FREE','This script tests the playback of fast rewind with play speed -4x in End-to-End scenario Test Case ID : E2E_LinearTV_09 				'),(116,13,'E2E_LinearTV_Live_Trickplay_10',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay10\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Fast forward Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=4.000000&time_pos=8000\";\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 4x is played successfully \";\r\n                else:\r\n                        print \"Failed to play fast forward with 4x\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n','FREE','This script tests the playback of fast forward with play speed 4X in End-to-End scenario Test Case ID : E2E_LinearTV_10   				'),(117,7,'E2E_LinearTV_Live_Trickplay_11',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay11\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Fast forward of 15x Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=15.000000&time_pos=8000\";\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 15x is played successfully \";\r\n                else:\r\n                        print \"Failed to play fast forward with 15x\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n','FREE','This script tests the playback of Fast forward with play speed 15x in End-to-End scenario Test Case ID : E2E_LinearTV_11  				'),(118,8,'E2E_LinearTV_Live_Trickplay_12',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay12\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Fast forward of 15x Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=30.000000&time_pos=8000\";\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 30x is played successfully \";\r\n                else:\r\n                        print \"Failed to play fast forward with 30x\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n','FREE','This script tests the playback of fast forward with play speed 30x in End-to-End scenario Test Case ID : E2E_LinearTV_12  				'),(119,8,'E2E_LinearTV_Live_Trickplay_13',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_13\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Fast forward of 60X Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=60.000000&time_pos=8000\";\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast forward with 60x is played successfully \";\r\n                else:\r\n                        print \"Failed to play fast forward with 60x\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of fast forward with play speed 60x in End-to-End scenario Test Case ID : E2E_LinearTV_13  				'),(120,8,'E2E_LinearTV_Live_Trickplay_14',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_14\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Fast reverse of -15x Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=-15.000000&time_pos=8000\";\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast reverse with -15x is played successfully \";\r\n                else:\r\n                        print \"Failed to play fast reverse with -15x\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of fast reverse with play speed -15x in End-to-End scenario Test Case ID : E2E_LinearTV_14 				'),(121,8,'E2E_LinearTV_Live_Trickplay_15',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay15\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Fasr reverse of -30x Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=-30.000000&time_pos=8000\";\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast reverse with -30x is played successfully \";\r\n                else:\r\n                        print \"Failed to play fast reverse with -30x\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n','FREE','This script tests the playback of fast reverse with play speed -30x in End-to-End scenario Test Case ID : E2E_LinearTV_15 '),(122,9,'E2E_LinearTV_Live_Trickplay_16',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_Live_Trickplay_16\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL function to send the url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Fast reverse of -60X Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"live=ocap://\"+streamDetails.getOCAPID()+\"&playspeed=-60.000000&time_pos=8000\";\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"Fast reverse with -60x is played successfully \";\r\n                else:\r\n                        print \"Failed to play fast reverse with -60x\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n','FREE','This script tests the playback of fast reverse with play speed -60x in End-to-End scenario Test Case ID : E2E_LinearTV_16  				'),(123,9,'E2E_LinearTV_MPEG2_AC3_17',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_AC3_17\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'01\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n               #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG2/AC3 streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG2/AC3 streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n\r\n','FREE','This script tests the playback of MPEG2 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_17 				'),(124,7,'E2E_LinearTV_MPEG4_AC3_18',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG4_AC3_18\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'02\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n               \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG2/AC3 streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG2/AC3 streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";','FREE','This script tests the playback of MPEG4 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_18				'),(125,9,'E2E_LinearTV_MPEG2_AAC_19',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport streamlib;\r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_AAC_19\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'03\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        result = tdkTestObj.getResult();\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n               \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG2/AAC streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG2/AAC streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n','FREE','This script tests the playback of MPEG2 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_19 				'),(126,7,'E2E_LinearTV_MPEG4_AAC_20',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG4_AAC_20\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'04\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG4/AAC streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG4/AAC streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n','FREE','This script tests the playback of MPEG4 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_20  				'),(127,7,'E2E_LinearTV_MPEG2_MP3_21',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_MP3_21\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n       #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'05\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n               #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as PLAYURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n               \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG2/MP3 streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG2/MP3 streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n','FREE','This script tests the playback of MPEG2 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_21				'),(128,8,'E2E_LinearTV_MPEG4_MP3_22',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib;\r\nimport time; \r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG4_MP3_22\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'06\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n               #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n               \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG4/MP3 streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG4/MP3 streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n\r\n','FREE','This script tests the playback of MPEG4 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_22				'),(129,7,'E2E_LinearTV_MPEG2_WAV_23',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG2_WAV_23\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'07\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n               #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG2/WAV streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG2/WAV streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n\r\n','FREE','This script tests the playback of MPEG2 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_23  				'),(130,9,'E2E_LinearTV_MPEG4_WAV_24',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_MPEG4_WAV_24\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'08\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        #Passing Parameter as url\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n               #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                #Adding Parameter as validURL\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n               \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"MPEG4/WAV streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play MPEG4/WAV streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n\r\n','FREE','This script tests the playback of MPEG4 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_24  				'),(131,9,'E2E_LinearTV_H.264_AC3_25',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_AC3_25\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'09\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"H.264/AC3 streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play H.264/AC3 streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n','FREE','This script tests the playback of H.264 video with AC3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_25				'),(132,13,'E2E_LinearTV_H.264_AAC_26',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_AAC_26\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'10\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        validURL = url.split(\"[RESULTDETAILS]\");\r\n        print \"Valid URL = \"+validURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n               #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",validURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"H.264/AAC streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play H.264/AAC streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n','FREE','This script tests the playback of H.264 video with AAC audio service in End-to-End scenario Test Case ID : E2E_LinearTV_26  				'),(133,9,'E2E_LinearTV_H.264_MP3_27',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_MP3_27\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'11\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n                #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"H.264/MP3 streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play H.264/MP3 streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n','FREE','This script tests the playback of H.264 video with MP3 audio service in End-to-End scenario Test Case ID : E2E_LinearTV_27				'),(134,7,'E2E_LinearTV_H.264_WAV_28',19,'# use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\nimport time;\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"lineartv\",\"1.2\");\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'E2E_LinearTV_H.264_WAV_28\');\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\nif  \"Load Module Success\" in result:\r\n        print \"LinearTV module loaded successfully\";\r\n        #Calling LinearTV_URL Function to send Request url\r\n        tdkTestObj = obj.createTestStep(\'E2E_LinearTV_URL\');\r\n        #Stream details for tuning\r\n        streamDetails = tdkTestObj.getStreamDetails(\'12\');\r\n        channeltype =streamDetails.getChannelType();\r\n        #Framing URL for Request\r\n        url=\"http://\"+streamDetails.getGatewayIp()+\":8080/videoStreamInit?recorderId=\"+streamDetails.getRecorderID()+\"&video=\"+streamDetails.getVideoFormat()+\"&audio=&\"+streamDetails.getAudioFormat()+\"live=ocap://\"+streamDetails.getOCAPID();\r\n        print \"[URL] : %s\" %url;\r\n        tdkTestObj.addParameter(\"Validurl\",url);\r\n        #Execute the test case in STB\r\n        tdkTestObj.executeTestCase();\r\n        #Get the result of execution\r\n        details = tdkTestObj.getResultDetails();\r\n        # Remove unwanted part from URL\r\n        PLAYURL = details.split(\"[RESULTDETAILS]\");\r\n        print \"PLAY URL = \"+PLAYURL[-1];\r\n        result = tdkTestObj.getResult();\r\n        print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n        if \"SUCCESS\" in result:\r\n                print \"Json Response Received Sucessfully\";\r\n               #Calling LinearTV_Play_URL Function to play the stream\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_Play_URL\');\r\n                tdkTestObj.addParameter(\"videoStreamURL\",PLAYURL[-1]);\r\n                tdkTestObj.executeTestCase();\r\n                \r\n                #calling LinearTV_KillPlayer function to kill the player\r\n                tdkTestObj = obj.createTestStep(\'E2E_LinearTV_KillPlayer\');\r\n                tdkTestObj.executeTestCase();\r\n                print \"[TEST EXECUTION RESULT] : %s\" %result;\r\n                if \"SUCCESS\" in result:\r\n                        print \"H.264/WAV streams Tuned and played successfully\";\r\n                else:\r\n                        print \"Failed to Tune and  play H.264/WAV streams\";\r\n        else:\r\n                print \"Failed to receive Json Response\";\r\nelse:\r\n        print \"Failed to load LinearTV module\";\r\n\r\n\r\n','FREE','This script tests the playback of H.264 video with WAV audio service in End-to-End scenario Test Case ID : E2E_LinearTV_28 				'),(135,100,'QtTest',28,'#Use tdklib library,which provides a wrapper for tdk testcase script \r\nimport tdklib; \r\n\r\n#Test component to be tested\r\nobj = tdklib.TDKScriptingLibrary(\"qttestsuite\",\"1.2\");\r\n\r\n#IP and Port of box, No need to change,\r\n#This will be replaced with correspoing Box Ip and port while executing script\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'QtTest\');\r\n\r\n#Get the result of connection with test component and STB\r\nresult =obj.getResult();\r\nprint \"Qt test module loading status :  %s\" %result;\r\n\r\n#Prmitive test case which associated to this Script\r\ntdkTestObj = obj.createTestStep(\'Qt_Test\');\r\n\r\n# Configuring the test object for non gfx test suites execution \r\ntdkTestObj.addParameter(\"Qt_component_type\",\"qt_non_gfx\");\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"%s\" %result;\r\n\r\n#Get the log path of the Qt Non-Graphics Testsuite\r\nlogpath =tdkTestObj.getLogPath();\r\n\r\n#Prmitive test case which associated to this Script\r\ntdkTestObj = obj.createTestStep(\'Qt_Test\');\r\n\r\n# Configuring the test object for gfx test suites execution\r\ntdkTestObj.addParameter(\"Qt_component_type\",\"qt_gfx\");\r\n\r\n#Execute the test case in STB\r\ntdkTestObj.executeTestCase();\r\n\r\n#Get the result of execution\r\nresult = tdkTestObj.getResult();\r\nprint \"%s\" %result;\r\n\r\n#Get the log path of the Qt Non-Graphics Testsuite\r\nlogpath =tdkTestObj.getLogPath();\r\n\r\n#Unload the qt test suite module\r\nobj.unloadModule(\"qttestsuite\");','FREE','This test script executes the Qt Graphics and non Graphics Test suites.			'),(136,4,'IARMBUS GetContext test',29,'import tdklib;\r\nobj = tdklib.TDKScriptingLibrary(\"iarmbus\",\"1.2\");\r\nip = <ipaddress>\r\nport = <port>\r\nobj.configureTestCase(ip,port,\'CT_IARMBUS_26\');\r\nresult =obj.getResult();\r\nprint \"[LIB LOAD STATUS]  :  %s\" %result;\r\n#calling IARMBUS API \"IARM_Bus_Init\"\r\ntdkTestObj = obj.createTestStep(\'IARMBUS_Init\');\r\ntdkTestObj.executeTestCase();\r\nresult = tdkTestObj.getResult();\r\ndetails=tdkTestObj.getResultDetails();\r\nif (\"SUCCESS\" in result or (\"FAILURE\" in result and \"INVALID_PARAM\" in details)):\r\n        print \"SUCCESS :Application successfully initialized with IARMBUS library\";\r\n        #calling IARMBUS API \"IARM_Bus_Connect\"\r\n        tdkTestObj = obj.createTestStep(\'IARMBUS_Connect\');\r\n        tdkTestObj.executeTestCase();\r\n        result = tdkTestObj.getResult();\r\n        details=tdkTestObj.getResultDetails();\r\n        if \"SUCCESS\" in result:\r\n                print \"SUCCESS :Application successfully connected with IARMBUS \";\r\n                #calling IARMBUS API \"IARM_Bus_GetContext\"\r\n                tdkTestObj = obj.createTestStep(\'IARMBUS_GetContext\');\r\n                tdkTestObj.executeTestCase();\r\n                result = tdkTestObj.getResult();\r\n                details=tdkTestObj.getResultDetails();\r\n                if \"SUCCESS\" in result:\r\n                        print \"SUCCESS: GetContext API returns success\";\r\n                        #calling IARMBUS API \"IARM_Bus_DisConnect\"\r\n                        tdkTestObj = obj.createTestStep(\'IARMBUS_DisConnect\');\r\n                        tdkTestObj.executeTestCase();\r\n                        result = tdkTestObj.getResult();\r\n                        details=tdkTestObj.getResultDetails();\r\n                        if \"SUCCESS\" in result:\r\n                                print \"SUCCESS: Application successfully disconnected from IARMBus\";\r\n                        else:\r\n                                print \"FAILURE: IARM_Bus_Disconnect failed with %s \" %details;\r\n                else:\r\n                        print \"FAILURE: IARM_Bus_GetContext failed with %s \" %details;\r\n        else:\r\n                print \"FAILURE: IARM_Bus_Connect failed with %s\" %details;\r\nelse:\r\n        print \"FAILURE: IARM_Bus_Init failed with %s \" %details;\r\nprint \"[TEST EXECUTION RESULT] : %s\" %result;\r\n','FREE','This script queries the Context of the application which is joined with IARMBUS. \r\nTest Case ID:CT_IARMBUS_26\r\nNOTE:This test script will FAIL because \"IARM_Bus_GetContext\" API is not implemented in IARM BUS component(issue with IARM Bus RDK component)			');
/*!40000 ALTER TABLE `script` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script_group`
--

DROP TABLE IF EXISTS `script_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script_group` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script_group`
--

LOCK TABLES `script_group` WRITE;
/*!40000 ALTER TABLE `script_group` DISABLE KEYS */;
INSERT INTO `script_group` VALUES (9,10,'OpenSourceSuite',NULL),(12,40,'ComponentSuite',NULL),(13,28,'E2ESuite',NULL);
/*!40000 ALTER TABLE `script_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `script_group_script`
--

DROP TABLE IF EXISTS `script_group_script`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `script_group_script` (
  `script_group_scripts_id` bigint(20) DEFAULT NULL,
  `script_id` bigint(20) DEFAULT NULL,
  KEY `FKF6D3D57FE2F1DCCF` (`script_id`),
  KEY `FKF6D3D57F6492105` (`script_group_scripts_id`),
  CONSTRAINT `FKF6D3D57F6492105` FOREIGN KEY (`script_group_scripts_id`) REFERENCES `script_group` (`id`),
  CONSTRAINT `FKF6D3D57FE2F1DCCF` FOREIGN KEY (`script_id`) REFERENCES `script` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `script_group_script`
--

LOCK TABLES `script_group_script` WRITE;
/*!40000 ALTER TABLE `script_group_script` DISABLE KEYS */;
INSERT INTO `script_group_script` VALUES (9,54),(12,68),(12,69),(12,70),(12,71),(12,72),(12,73),(12,74),(12,75),(12,76),(12,77),(12,78),(12,79),(12,80),(12,81),(12,82),(12,83),(12,84),(12,85),(12,86),(12,87),(12,88),(12,89),(12,90),(12,91),(12,92),(12,93),(12,94),(12,95),(12,96),(12,97),(12,98),(12,99),(12,100),(12,101),(12,102),(12,103),(12,104),(12,105),(13,106),(13,107),(13,108),(13,109),(13,110),(13,112),(13,113),(13,114),(13,115),(13,116),(13,117),(13,118),(13,119),(13,120),(13,121),(13,122),(13,123),(13,124),(13,125),(13,126),(13,127),(13,128),(13,129),(13,130),(13,131),(13,132),(13,133),(13,134),(9,135),(12,136);
/*!40000 ALTER TABLE `script_group_script` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiro_role`
--

DROP TABLE IF EXISTS `shiro_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `shiro_role` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shiro_role`
--

LOCK TABLES `shiro_role` WRITE;
/*!40000 ALTER TABLE `shiro_role` DISABLE KEYS */;
/*!40000 ALTER TABLE `shiro_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiro_role_permissions`
--

DROP TABLE IF EXISTS `shiro_role_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `shiro_role_permissions` (
  `shiro_role_id` bigint(20) DEFAULT NULL,
  `permissions_string` varchar(255) DEFAULT NULL,
  KEY `FK389B46C98BA4B1D` (`shiro_role_id`),
  CONSTRAINT `FK389B46C98BA4B1D` FOREIGN KEY (`shiro_role_id`) REFERENCES `shiro_role` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shiro_role_permissions`
--

LOCK TABLES `shiro_role_permissions` WRITE;
/*!40000 ALTER TABLE `shiro_role_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `shiro_role_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiro_user`
--

DROP TABLE IF EXISTS `shiro_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `shiro_user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `password_hash` varchar(255) NOT NULL,
  `username` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shiro_user`
--

LOCK TABLES `shiro_user` WRITE;
/*!40000 ALTER TABLE `shiro_user` DISABLE KEYS */;
INSERT INTO `shiro_user` VALUES (1,0,'5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8','user123');
/*!40000 ALTER TABLE `shiro_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiro_user_permissions`
--

DROP TABLE IF EXISTS `shiro_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `shiro_user_permissions` (
  `shiro_user_id` bigint(20) DEFAULT NULL,
  `permissions_string` varchar(255) DEFAULT NULL,
  KEY `FK34555A9EADE50EFD` (`shiro_user_id`),
  CONSTRAINT `FK34555A9EADE50EFD` FOREIGN KEY (`shiro_user_id`) REFERENCES `shiro_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shiro_user_permissions`
--

LOCK TABLES `shiro_user_permissions` WRITE;
/*!40000 ALTER TABLE `shiro_user_permissions` DISABLE KEYS */;
INSERT INTO `shiro_user_permissions` VALUES (1,'*:*');
/*!40000 ALTER TABLE `shiro_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiro_user_roles`
--

DROP TABLE IF EXISTS `shiro_user_roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `shiro_user_roles` (
  `shiro_role_id` bigint(20) NOT NULL,
  `shiro_user_id` bigint(20) NOT NULL,
  PRIMARY KEY (`shiro_user_id`,`shiro_role_id`),
  KEY `FKBA221057ADE50EFD` (`shiro_user_id`),
  KEY `FKBA2210578BA4B1D` (`shiro_role_id`),
  CONSTRAINT `FKBA2210578BA4B1D` FOREIGN KEY (`shiro_role_id`) REFERENCES `shiro_role` (`id`),
  CONSTRAINT `FKBA221057ADE50EFD` FOREIGN KEY (`shiro_user_id`) REFERENCES `shiro_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shiro_user_roles`
--

LOCK TABLES `shiro_user_roles` WRITE;
/*!40000 ALTER TABLE `shiro_user_roles` DISABLE KEYS */;
/*!40000 ALTER TABLE `shiro_user_roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `socvendor`
--

DROP TABLE IF EXISTS `socvendor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `socvendor` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `socvendor`
--

LOCK TABLES `socvendor` WRITE;
/*!40000 ALTER TABLE `socvendor` DISABLE KEYS */;
INSERT INTO `socvendor` VALUES (1,0,'Parker'),(2,0,'Px001bn'),(3,0,'Rng150'),(4,0,'Intel'),(5,0,'Broadcom – MIPS'),(6,0,'Broadcom - ARM');
/*!40000 ALTER TABLE `socvendor` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `streaming_details`
--

DROP TABLE IF EXISTS `streaming_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `streaming_details` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version` bigint(20) NOT NULL,
  `audio_format` varchar(255) NOT NULL,
  `channel_type` varchar(255) NOT NULL,
  `gateway_ip` varchar(255) NOT NULL,
  `ocap_id` varchar(255) NOT NULL,
  `recorder_id` varchar(255) NOT NULL,
  `stream_id` varchar(64) NOT NULL,
  `video_format` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `stream_id` (`stream_id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `streaming_details`
--

LOCK TABLES `streaming_details` WRITE;
/*!40000 ALTER TABLE `streaming_details` DISABLE KEYS */;
INSERT INTO `streaming_details` VALUES (4,2,'ac3','SD','192.168.161.56','0x1040','T0100111395','01','mpeg2'),(5,1,'ac3','HD','192.168.161.56','0x100a','T0100111395','02','mpeg4'),(6,2,'aac','SD','192.168.161.56','0x2289','T0100111395','03','mpeg2'),(7,2,'aac','HD','192.168.161.56','0x21fb','T0100111395','04','mpeg4'),(8,0,'mp3','HD','192.168.161.56','0x21fb','T0100111395','05','mpeg2'),(9,0,'mp3','HD','192.168.161.56','0x2500','T0100111395','06','mpeg4'),(10,0,'wav','HD','192.168.161.56','0x1269','T0100111395','07','mpeg2'),(11,0,'wav','HD','192.168.161.56','0x1265','T0100111395','08','mpeg4'),(12,0,'ac3','HD','192.168.161.56','0x2897','T0100111395','09','h264'),(13,0,'aac','HD','192.168.161.56','0x2f13','T0100111395','10','h264'),(14,0,'mp3','HD','192.168.161.56','0x2f58','T0100111395','11','h264'),(15,0,'wav','HD','192.168.161.56','0x1ca3','T0100111395','12','h264');
/*!40000 ALTER TABLE `streaming_details` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-06-19 17:45:26
