##########################################################################
# If not stated otherwise in this file or this component's Licenses.txt
# file the following copyright and licenses apply:
#
# Copyright 2016 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################
import os
import sys
import re
import string
import StringIO
#moduleName="DeviceSettings"
#filePath="./scriptsDump"
#fileName="DS_SetEncoding_test_10"
#moduleName=str(sys.argv[2])
#filePath=str(sys.argv[1])
#fileName=str(sys.argv[3])
targetFolder="twc"
def convertScript(filePath,fileName):
	fout=open(filePath+"/twc/twc_"+fileName+".py","wb")
	fin=open(filePath+"/"+fileName+".py", "rb")

	lines = fin.readlines()

	xmlData = ''
	scriptData=''
	headerCompleted=0;

	if lines[0] != "'''\n":
		print 'First line in the file is not a start of comment. Exiting'
		exit	
	for i  in range(len( lines)):
		if(headerCompleted==0):
			if lines[i+1] != "'''\n":       #using i+1 to skip the start of comment.
				xmlData = xmlData +  lines[i+1]
			else :
				headerCompleted=1
		else:
			if (i+2)<len(lines) :
				scriptData= scriptData + lines [i+2]

#	print xmlData
#	print scriptData
#	obj.getLoadModuleResult
#	indexToCutFrm=scriptData.find("loadmodulestatus")
	indexToCutFrm=scriptData.find("obj.getLoadModuleResult")
	indexToCutFrm=scriptData.rfind("\n",0,indexToCutFrm)
	scriptData2=scriptData[indexToCutFrm:]
	scriptData1=scriptData[:indexToCutFrm]
	startScript=""
	importLines=""
	for line in scriptData1.splitlines():
#		print(line)
		if "import" in line and "tdklib" in line:
			continue
		if "import" in line and "tdklib" not in line:
			importLines=importLines+"\n"+line
			continue
		if "tdklib.TDKScriptingLibrary"  in line:
			continue
		if "<ipaddress>"  in line:
			continue
		if "<port>"  in line:
			continue
		if "obj.configureTestCase"  in line:
			continue
		startScript= startScript+"\n"+line		
	scriptData=importLines+"\n"+startScript+"\n"+"def executeTests(obj):\n	"+scriptData2.replace("\n","\n	")
	functionHeader="#This python script is autogenerated by parsing the original scripts imported from the Database"
	functionHeader+="\n#This script is supposed to be called from the genericscript.py \n#TODO:Ajan: replace this caling script name with correct one\n\n"
	importsScripts="#TODO: ajan: validate which imports are necessary and remove others\nimport sys;\nfrom time import gmtime, strftime;\nimport tdklib;\nimport time;\nimport datalib;\nimport numpy as np;\n\n\n"
	scriptData=functionHeader+importsScripts+scriptData
	fout.write(scriptData)




def showUsage():
        print "python generateScripts.py [[-all][<path>][filename]"
        print "generateScripts.py will generate TDK automation scripts from TDK py scripts imported form the Data Base. If no path specified , files in ./scriptsDump will be considered"

def confirmTheAction(folder):
        print "This will overwirte existing files in this folder!!!!"
        choice = raw_input().lower();
        if (choice != 'y'):
                sys.exit()


if len(sys.argv)==1 :
	print "No arguments !. Please use proper arguments"
	showUsage()
	sys.exit()




if (sys.argv[1] == "-all"):
	if (len(sys.argv)== 2 ):#ie only -all is the argument which  means at default path , all  modules , all scripts
		filePath="./scriptsDump"
		print"-all ./scriptsDump , the default path "
	if (len(sys.argv)== 3 ):
		filePath=sys.argv[2]
		print "-all "+sys.argv[2]
	print "Opening "+filePath
	if os.path.isdir(filePath):
		if not os.path.exists(filePath+"/twc"):
			print "Creating folder "+filePath+"/twc"
			os.makedirs(filePath+"/twc")
			
		for scriptFile in os.listdir(filePath):
			if scriptFile.endswith(".py") and not scriptFile.startswith("twc_") :
				convertScript(filePath,scriptFile[:-3])
else:
	if (len(sys.argv)!= 3 ):
		print"Without -all option , the program expects 2 arguments"
		showUsage()
	else:
		filePath=sys.argv[1]
		scriptFile=sys.argv[3]
		print "Converting"+ filePath+"/"+scriptFile
		if os.path.isdir(filePath):
                        if not os.path.exists(filePath+"/twc"):
                                print "Creating folder "+filePath+"/twc"
                                os.makedirs(filePath+"/twc")
		if os.path.exists(filePath+"/"+scriptFile):
			convertScript(filePath,scriptFile[:-3])
		else:
			print "Given script in given module and path does not exist"
			sys.exit()

'''
if (sys.argv[1] == "-all"):
	if (len(sys.argv)== 2 ):#ie only -all is the argument which  means at default path , all  modules , all scripts
		filePath="./scriptsDump"
		print"-all ./scriptsDump , the default path "
	if (len(sys.argv)== 3 ):
		filePath=sys.argv[2]
		print "-all "+sys.argv[2]
        if (len(sys.argv)== 4 ):
                filePath=sys.argv[2]
		moduledir=sys.argv[3]
                print "-all "+sys.argv[2]+" "+sys.argv[3]

	print "Opening "+filePath
	for moduledir in os.listdir(filePath):
		if os.path.isdir(os.path.join(filePath, moduledir)):
			if not os.path.exists(filePath+"/"+moduledir+"/twc"):
				print "Creating folder "+filePath+"/"+moduledir+"/twc"
				os.makedirs(filePath+"/"+moduledir+"/twc")
				
			for scriptFile in os.listdir(os.path.join(filePath, moduledir)):
				if scriptFile.endswith(".py") and not scriptFile.startswith("twc_") :
					convertScript(filePath,moduledir,scriptFile[:-3])
else:
	if (len(sys.argv)!= 4 ):
		print"Without -all option , the program expects 3 arguments"
		showUsage()
	else:
		filePath=sys.argv[1]
		moduledir=sys.argv[2]
		scriptFile=sys.argv[3]
		print "Converting"+ filePath+"/"+moduledir+"/"+scriptFile
		if os.path.isdir(filePath +"/"+ moduledir):
                        if not os.path.exists(filePath+"/"+moduledir+"/twc"):
                                print "Creating folder "+filePath+"/"+moduledir+"/twc"
                                os.makedirs(filePath+"/"+moduledir+"/twc")
		if os.path.exists(filePath+"/"+moduledir+"/"+scriptFile):
			convertScript(filePath,moduledir,scriptFile[:-3])
		else:
			print "Given script in given module and path does not exist"
			sys.exit()
'''
